Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 5129F7D5441
	for <lists+amd-gfx@lfdr.de>; Tue, 24 Oct 2023 16:46:46 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 563B310E3CA;
	Tue, 24 Oct 2023 14:46:44 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from mail-oa1-x31.google.com (mail-oa1-x31.google.com
 [IPv6:2001:4860:4864:20::31])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 351CB10E3CA
 for <amd-gfx@lists.freedesktop.org>; Tue, 24 Oct 2023 14:46:42 +0000 (UTC)
Received: by mail-oa1-x31.google.com with SMTP id
 586e51a60fabf-1dd8304b980so3146702fac.2
 for <amd-gfx@lists.freedesktop.org>; Tue, 24 Oct 2023 07:46:42 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=gmail.com; s=20230601; t=1698158801; x=1698763601; darn=lists.freedesktop.org;
 h=cc:to:subject:message-id:date:from:in-reply-to:references
 :mime-version:from:to:cc:subject:date:message-id:reply-to;
 bh=CGz5K3VvDdh04+KDXYcvoh5KoJjtF7aZFW+roVZauDY=;
 b=A8tLgU7kBvIYxSvnmpPJZY5+pNXq9andDhfvJJ7PQ3pQHEYULBHH4ciqhrbegR+Yj4
 6XMCJ/9lqbKAWHz8rVYJcsR5kDUQrFtt57QiW+b5V6rph4VijfEYplAsPFbC5VI72XCj
 Uk2GMZDgk/B/g/8VsnaqkXQSG01a4mT/hQgK6Gs2pel/113Nk5sCHcFPXlafP3QJ6mlJ
 0knMAURraosoo/ANzID8mw6wKMt6sAM9RMXRxQN5YZ7ccDisbUerWPBvIsyukpxyq6iq
 p85lGQmTVPdySfrOqEYyuJGhgkYH9hwRTgiIibcOucGAUVW/mUy6o46du0BY8iatV858
 4Tbg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20230601; t=1698158801; x=1698763601;
 h=cc:to:subject:message-id:date:from:in-reply-to:references
 :mime-version:x-gm-message-state:from:to:cc:subject:date:message-id
 :reply-to;
 bh=CGz5K3VvDdh04+KDXYcvoh5KoJjtF7aZFW+roVZauDY=;
 b=TKZCBK/52OGu2xHdlPvs6n2oAG5PvqkgyYL8BF5T6d/h/du7fkLzsJBtL3Q1FTfqwM
 GmZTNoftceY4Zjy2C/3NkWW09zShmOumtkAxmSEgq+IHMpu8JyPQBKvOjc/Nlye9FfNm
 IE5kcVE0n5ZeNr4fsliI9v6XtIrnepMpRxYHE25Lyo6bKjIiINO/vrdb5Riu5shbUQWK
 oYwbGFeXUBuaVz0h/8qeiYO5aqvFe9IzT//daVk4tY18IUJJ6hE9adJjiuhma6dsfKkP
 xdW01+Ug6XTu71tEHit93Kb+IHWaNcOLhhY542b0F9nwuk5Rn4QpKOq7m7Dxa5Vbthff
 aLbw==
X-Gm-Message-State: AOJu0YxMhD67qaMJ7bQuB5Ro/Z0HwNLUEpjkxcK4/umUk+9ZNULLUFxK
 OSQvFOVcSnRDFHATkPgKoQBMz67FP2LquFhy84g=
X-Google-Smtp-Source: AGHT+IFxVMJP82hwwAn1vawOsu/FCz3U23Pkif1zFmp9e1Pel5+tYUJ9IT8zb/pkDHryda9FUF0B2VvT8N36tpKs/gA=
X-Received: by 2002:a05:6870:ab19:b0:1e9:b496:ce2d with SMTP id
 gu25-20020a056870ab1900b001e9b496ce2dmr15314704oab.12.1698158801019; Tue, 24
 Oct 2023 07:46:41 -0700 (PDT)
MIME-Version: 1.0
References: <20231023032344.164925-1-luben.tuikov@amd.com>
 <402f475c-bb67-4061-9521-2f811eca7657@gmail.com>
 <53e14f59-6743-4a11-bf27-151507071bb0@amd.com>
 <bf4e2094-3304-412b-a196-27c289e080a5@gmail.com>
 <6dcf471e-6daf-4aaf-a534-322b6483bc87@gmail.com>
In-Reply-To: <6dcf471e-6daf-4aaf-a534-322b6483bc87@gmail.com>
From: Alex Deucher <alexdeucher@gmail.com>
Date: Tue, 24 Oct 2023 10:46:29 -0400
Message-ID: <CADnq5_NuPw2KdW2FZd6u4LF2ArkHxi9J+peDAzg7WADXj49OPQ@mail.gmail.com>
Subject: Re: [PATCH] drm/amdgpu: Initialize schedulers before using them
To: =?UTF-8?Q?Christian_K=C3=B6nig?= <ckoenig.leichtzumerken@gmail.com>
Content-Type: multipart/mixed; boundary="0000000000001b813306087768f4"
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: Alex Deucher <Alexander.Deucher@amd.com>,
 Felix Kuehling <Felix.Kuehling@amd.com>, Luben Tuikov <luben.tuikov@amd.com>,
 =?UTF-8?Q?Christian_K=C3=B6nig?= <christian.koenig@amd.com>,
 AMD Graphics <amd-gfx@lists.freedesktop.org>
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

--0000000000001b813306087768f4
Content-Type: text/plain; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

On Tue, Oct 24, 2023 at 6:14=E2=80=AFAM Christian K=C3=B6nig
<ckoenig.leichtzumerken@gmail.com> wrote:
>
> [SNIP]
> > Let me take a closer look first
>
> I think I've figured out why this isn't working as expected. It started
> with this patch here:
>
> commit 5fd8518d187ed03403a4d4f7f56f52c00b11c148
> Author: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
> Date:   Mon Dec 6 14:59:35 2021 -0500
>
>      drm/amdgpu: Move scheduler init to after XGMI is ready
>
>      Before we initialize schedulers we must know which reset
>      domain are we in - for single device there iis a single
>      domain per device and so single wq per device. For XGMI
>      the reset domain spans the entire XGMI hive and so the
>      reset wq is per hive.
>
>      Signed-off-by: Andrey Grodzovsky <andrey.grodzovsky@amd.com>
>      Reviewed-by: Christian K=C3=B6nig <christian.koenig@amd.com>
>      Link: https://www.spinics.net/lists/amd-gfx/msg74112.html
>
> Andrey separated the scheduler initialization from the ring init because
> we need some of the rings for XGMI initialization which in turn in
> necessary to figure out the XGMI hive and so the reset domain for the
> scheduler.
>
> The code inside amdgpu_ttm_set_buffer_funcs_status() is actually
> correct, the problem is that this is called as part of the hw init which
> comes earlier than the scheduler init.
>
> @Alex, Ideas how to fix this? My best guess is that we should move the
> call to amdgpu_ttm_set_buffer_funcs_status() from the DMA specific code
> into the higher level handling in amdgpu_device.c

Yes, I think so, but there could be some tricky ordering issues with
respect to suspend and resume.  I think something like the attached
patch should do the trick.

Alex

--0000000000001b813306087768f4
Content-Type: text/x-patch; charset="US-ASCII"; 
	name="0001-drm-amdgpu-move-buffer-funcs-setting-up-a-level.patch"
Content-Disposition: attachment; 
	filename="0001-drm-amdgpu-move-buffer-funcs-setting-up-a-level.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_lo4fw2k60>
X-Attachment-Id: f_lo4fw2k60

RnJvbSBlMDZlYzg2YWYwM2M4ZjczMGU4YmEyYWU4YjY2OGJiMzcyN2Y0NTVkIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbGV4IERldWNoZXIgPGFsZXhhbmRlci5kZXVjaGVyQGFtZC5j
b20+CkRhdGU6IFR1ZSwgMjQgT2N0IDIwMjMgMTA6NDI6MDggLTA0MDAKU3ViamVjdDogW1BBVENI
XSBkcm0vYW1kZ3B1OiBtb3ZlIGJ1ZmZlciBmdW5jcyBzZXR0aW5nIHVwIGEgbGV2ZWwKClJhdGhl
ciB0aGFuIGRvaW5nIHRoaXMgaW4gdGhlIElQIGNvZGUgZm9yIHRoZSBTRE1BIHBhZ2luZwplbmdp
bmUsIG1vdmUgaXQgdXAgdG8gdGhlIGNvcmUgZGV2aWNlIGxldmVsIGluaXQgbGV2ZWwuClRoaXMg
c2hvdWxkIGZpeCB0aGUgc2NoZWR1bGVyIGluaXQgb3JkZXJpbmcuCgpTaWduZWQtb2ZmLWJ5OiBB
bGV4IERldWNoZXIgPGFsZXhhbmRlci5kZXVjaGVyQGFtZC5jb20+Ci0tLQogZHJpdmVycy9ncHUv
ZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2RldmljZS5jIHwgMTIgKysrKysrKysrKysKIGRyaXZlcnMv
Z3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9zZG1hLmMgICB8IDIzICsrKysrKysrKysrKysrKysr
KysrKysKIGRyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9zZG1hLmggICB8ICAxICsK
IGRyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2Npa19zZG1hLmMgICAgICB8ICA1IC0tLS0tCiBk
cml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1hX3YyXzQuYyAgICAgfCAgNSAtLS0tLQogZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92M18wLmMgICAgIHwgIDUgLS0tLS0KIGRyaXZl
cnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFfdjRfMC5jICAgICB8IDE2ICstLS0tLS0tLS0tLS0t
LQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92NV8wLmMgICAgIHwgMTAgKy0tLS0t
LS0tLQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92NV8yLmMgICAgIHwgMTAgKy0t
LS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92Nl8wLmMgICAgIHwgMTAg
Ky0tLS0tLS0tLQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2lfZG1hLmMgICAgICAgIHwg
IDUgLS0tLS0KIDExIGZpbGVzIGNoYW5nZWQsIDQwIGluc2VydGlvbnMoKyksIDYyIGRlbGV0aW9u
cygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9kZXZp
Y2UuYyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9kZXZpY2UuYwppbmRleCBj
YzA0N2ZlMGI3ZWUuLjdiNDEyMDM4M2Y4OSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2Ft
ZC9hbWRncHUvYW1kZ3B1X2RldmljZS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1
L2FtZGdwdV9kZXZpY2UuYwpAQCAtMjY2Nyw2ICsyNjY3LDggQEAgc3RhdGljIGludCBhbWRncHVf
ZGV2aWNlX2lwX2luaXQoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpCiAJaWYgKHIpCiAJCWdv
dG8gaW5pdF9mYWlsZWQ7CiAKKwlhbWRncHVfc2RtYV9zZXRfYnVmZmVyX2Z1bmNzX2hlbHBlcihh
ZGV2KTsKKwogCS8qIERvbid0IGluaXQga2ZkIGlmIHdob2xlIGhpdmUgbmVlZCB0byBiZSByZXNl
dCBkdXJpbmcgaW5pdCAqLwogCWlmICghYWRldi0+Z21jLnhnbWkucGVuZGluZ19yZXNldCkgewog
CQlrZ2Qya2ZkX2luaXRfem9uZV9kZXZpY2UoYWRldik7CkBAIC0zMjY1LDYgKzMyNjcsOCBAQCBp
bnQgYW1kZ3B1X2RldmljZV9pcF9zdXNwZW5kKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2KQog
CQlhbWRncHVfdmlydF9yZXF1ZXN0X2Z1bGxfZ3B1KGFkZXYsIGZhbHNlKTsKIAl9CiAKKwlhbWRn
cHVfc2RtYV91bnNldF9idWZmZXJfZnVuY3NfaGVscGVyKGFkZXYpOworCiAJciA9IGFtZGdwdV9k
ZXZpY2VfaXBfc3VzcGVuZF9waGFzZTEoYWRldik7CiAJaWYgKHIpCiAJCXJldHVybiByOwpAQCAt
MzQ1NCw2ICszNDU4LDggQEAgc3RhdGljIGludCBhbWRncHVfZGV2aWNlX2lwX3Jlc3VtZShzdHJ1
Y3QgYW1kZ3B1X2RldmljZSAqYWRldikKIAogCXIgPSBhbWRncHVfZGV2aWNlX2lwX3Jlc3VtZV9w
aGFzZTIoYWRldik7CiAKKwlhbWRncHVfc2RtYV9zZXRfYnVmZmVyX2Z1bmNzX2hlbHBlcihhZGV2
KTsKKwogCXJldHVybiByOwogfQogCkBAIC00MjQxLDYgKzQyNDcsOCBAQCB2b2lkIGFtZGdwdV9k
ZXZpY2VfZmluaV9odyhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldikKIAkvKiBkaXNhYmxlIHJh
cyBmZWF0dXJlIG11c3QgYmVmb3JlIGh3IGZpbmkgKi8KIAlhbWRncHVfcmFzX3ByZV9maW5pKGFk
ZXYpOwogCisJYW1kZ3B1X3NkbWFfdW5zZXRfYnVmZmVyX2Z1bmNzX2hlbHBlcihhZGV2KTsKKwog
CWFtZGdwdV9kZXZpY2VfaXBfZmluaV9lYXJseShhZGV2KTsKIAogCWFtZGdwdV9pcnFfZmluaV9o
dyhhZGV2KTsKQEAgLTQ0MTIsNiArNDQyMCw4IEBAIGludCBhbWRncHVfZGV2aWNlX3N1c3BlbmQo
c3RydWN0IGRybV9kZXZpY2UgKmRldiwgYm9vbCBmYmNvbikKIAogCWFtZGdwdV9yYXNfc3VzcGVu
ZChhZGV2KTsKIAorCWFtZGdwdV9zZG1hX3Vuc2V0X2J1ZmZlcl9mdW5jc19oZWxwZXIoYWRldik7
CisKIAlhbWRncHVfZGV2aWNlX2lwX3N1c3BlbmRfcGhhc2UxKGFkZXYpOwogCiAJaWYgKCFhZGV2
LT5pbl9zMGl4KQpAQCAtNTE4Myw2ICs1MTkzLDggQEAgaW50IGFtZGdwdV9kb19hc2ljX3Jlc2V0
KHN0cnVjdCBsaXN0X2hlYWQgKmRldmljZV9saXN0X2hhbmRsZSwKIAkJCQlpZiAocikKIAkJCQkJ
Z290byBvdXQ7CiAKKwkJCQlhbWRncHVfc2RtYV9zZXRfYnVmZmVyX2Z1bmNzX2hlbHBlcih0bXBf
YWRldik7CisKIAkJCQlpZiAodnJhbV9sb3N0KQogCQkJCQlhbWRncHVfZGV2aWNlX2ZpbGxfcmVz
ZXRfbWFnaWModG1wX2FkZXYpOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2Ft
ZGdwdS9hbWRncHVfc2RtYS5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3Nk
bWEuYwppbmRleCBlOGNiYzQxNDJkODAuLjMzZjg4ZmM5ZDkyZiAxMDA2NDQKLS0tIGEvZHJpdmVy
cy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3NkbWEuYworKysgYi9kcml2ZXJzL2dwdS9kcm0v
YW1kL2FtZGdwdS9hbWRncHVfc2RtYS5jCkBAIC0yOTIsNiArMjkyLDI5IEBAIGludCBhbWRncHVf
c2RtYV9pbml0X21pY3JvY29kZShzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwKIAlyZXR1cm4g
ZXJyOwogfQogCit2b2lkIGFtZGdwdV9zZG1hX3NldF9idWZmZXJfZnVuY3NfaGVscGVyKHN0cnVj
dCBhbWRncHVfZGV2aWNlICphZGV2KQoreworCXN0cnVjdCBhbWRncHVfcmluZyAqc2RtYTsKKwlp
bnQgaTsKKworCWZvciAoaSA9IDA7IGkgPCBhZGV2LT5zZG1hLm51bV9pbnN0YW5jZXM7IGkrKykg
eworCQlpZiAoYWRldi0+c2RtYS5oYXNfcGFnZV9xdWV1ZSkgeworCQkJc2RtYSA9ICZhZGV2LT5z
ZG1hLmluc3RhbmNlW2ldLnBhZ2U7CisJCQlpZiAoKGFkZXYtPm1tYW4uYnVmZmVyX2Z1bmNzX3Jp
bmcgPT0gc2RtYSkgJiYKKwkJCSAgICBzZG1hLT5zY2hlZC5yZWFkeSkgeworCQkJCWFtZGdwdV90
dG1fc2V0X2J1ZmZlcl9mdW5jc19zdGF0dXMoYWRldiwgdHJ1ZSk7CisJCQkJYnJlYWs7CisJCQl9
CisJCX0KKwkJc2RtYSA9ICZhZGV2LT5zZG1hLmluc3RhbmNlW2ldLnJpbmc7CisJCWlmICgoYWRl
di0+bW1hbi5idWZmZXJfZnVuY3NfcmluZyA9PSBzZG1hKSAmJgorCQkgICAgc2RtYS0+c2NoZWQu
cmVhZHkpIHsKKwkJCWFtZGdwdV90dG1fc2V0X2J1ZmZlcl9mdW5jc19zdGF0dXMoYWRldiwgdHJ1
ZSk7CisJCQlicmVhazsKKwkJfQorCX0KK30KKwogdm9pZCBhbWRncHVfc2RtYV91bnNldF9idWZm
ZXJfZnVuY3NfaGVscGVyKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2KQogewogCXN0cnVjdCBh
bWRncHVfcmluZyAqc2RtYTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1
L2FtZGdwdV9zZG1hLmggYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfc2RtYS5o
CmluZGV4IDUxM2FjMjIxMjBjMS4uMzMyMDk1OTNlOTc0IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dw
dS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfc2RtYS5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQv
YW1kZ3B1L2FtZGdwdV9zZG1hLmgKQEAgLTE2OSw2ICsxNjksNyBAQCBpbnQgYW1kZ3B1X3NkbWFf
aW5pdF9taWNyb2NvZGUoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYsIHUzMiBpbnN0YW5jZSwK
IAkJCSAgICAgICBib29sIGR1cGxpY2F0ZSk7CiB2b2lkIGFtZGdwdV9zZG1hX2Rlc3Ryb3lfaW5z
dF9jdHgoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYsCiAgICAgICAgIGJvb2wgZHVwbGljYXRl
KTsKK3ZvaWQgYW1kZ3B1X3NkbWFfc2V0X2J1ZmZlcl9mdW5jc19oZWxwZXIoc3RydWN0IGFtZGdw
dV9kZXZpY2UgKmFkZXYpOwogdm9pZCBhbWRncHVfc2RtYV91bnNldF9idWZmZXJfZnVuY3NfaGVs
cGVyKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2KTsKIGludCBhbWRncHVfc2RtYV9yYXNfc3df
aW5pdChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldik7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9hbWQvYW1kZ3B1L2Npa19zZG1hLmMgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdw
dS9jaWtfc2RtYS5jCmluZGV4IGVlNWRjZTZmNjA0My4uYTNmY2NjNGMxZjQzIDEwMDY0NAotLS0g
YS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9jaWtfc2RtYS5jCisrKyBiL2RyaXZlcnMvZ3B1
L2RybS9hbWQvYW1kZ3B1L2Npa19zZG1hLmMKQEAgLTMwOCw4ICszMDgsNiBAQCBzdGF0aWMgdm9p
ZCBjaWtfc2RtYV9nZnhfc3RvcChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldikKIAl1MzIgcmJf
Y250bDsKIAlpbnQgaTsKIAotCWFtZGdwdV9zZG1hX3Vuc2V0X2J1ZmZlcl9mdW5jc19oZWxwZXIo
YWRldik7Ci0KIAlmb3IgKGkgPSAwOyBpIDwgYWRldi0+c2RtYS5udW1faW5zdGFuY2VzOyBpKysp
IHsKIAkJcmJfY250bCA9IFJSRUczMihtbVNETUEwX0dGWF9SQl9DTlRMICsgc2RtYV9vZmZzZXRz
W2ldKTsKIAkJcmJfY250bCAmPSB+U0RNQTBfR0ZYX1JCX0NOVExfX1JCX0VOQUJMRV9NQVNLOwpA
QCAtNDk4LDkgKzQ5Niw2IEBAIHN0YXRpYyBpbnQgY2lrX3NkbWFfZ2Z4X3Jlc3VtZShzdHJ1Y3Qg
YW1kZ3B1X2RldmljZSAqYWRldikKIAkJciA9IGFtZGdwdV9yaW5nX3Rlc3RfaGVscGVyKHJpbmcp
OwogCQlpZiAocikKIAkJCXJldHVybiByOwotCi0JCWlmIChhZGV2LT5tbWFuLmJ1ZmZlcl9mdW5j
c19yaW5nID09IHJpbmcpCi0JCQlhbWRncHVfdHRtX3NldF9idWZmZXJfZnVuY3Nfc3RhdHVzKGFk
ZXYsIHRydWUpOwogCX0KIAogCXJldHVybiAwOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJt
L2FtZC9hbWRncHUvc2RtYV92Ml80LmMgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1h
X3YyXzQuYwppbmRleCBiNThhMTNiZDc1ZGIuLjQ1Mzc3YTE3NTI1MCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92Ml80LmMKKysrIGIvZHJpdmVycy9ncHUvZHJt
L2FtZC9hbWRncHUvc2RtYV92Ml80LmMKQEAgLTMzOSw4ICszMzksNiBAQCBzdGF0aWMgdm9pZCBz
ZG1hX3YyXzRfZ2Z4X3N0b3Aoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpCiAJdTMyIHJiX2Nu
dGwsIGliX2NudGw7CiAJaW50IGk7CiAKLQlhbWRncHVfc2RtYV91bnNldF9idWZmZXJfZnVuY3Nf
aGVscGVyKGFkZXYpOwotCiAJZm9yIChpID0gMDsgaSA8IGFkZXYtPnNkbWEubnVtX2luc3RhbmNl
czsgaSsrKSB7CiAJCXJiX2NudGwgPSBSUkVHMzIobW1TRE1BMF9HRlhfUkJfQ05UTCArIHNkbWFf
b2Zmc2V0c1tpXSk7CiAJCXJiX2NudGwgPSBSRUdfU0VUX0ZJRUxEKHJiX2NudGwsIFNETUEwX0dG
WF9SQl9DTlRMLCBSQl9FTkFCTEUsIDApOwpAQCAtNDc0LDkgKzQ3Miw2IEBAIHN0YXRpYyBpbnQg
c2RtYV92Ml80X2dmeF9yZXN1bWUoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpCiAJCXIgPSBh
bWRncHVfcmluZ190ZXN0X2hlbHBlcihyaW5nKTsKIAkJaWYgKHIpCiAJCQlyZXR1cm4gcjsKLQot
CQlpZiAoYWRldi0+bW1hbi5idWZmZXJfZnVuY3NfcmluZyA9PSByaW5nKQotCQkJYW1kZ3B1X3R0
bV9zZXRfYnVmZmVyX2Z1bmNzX3N0YXR1cyhhZGV2LCB0cnVlKTsKIAl9CiAKIAlyZXR1cm4gMDsK
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFfdjNfMC5jIGIvZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92M18wLmMKaW5kZXggYzVlYTMyNjg3ZWI1Li4y
YWQ2MTViZTRiYjMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFf
djNfMC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFfdjNfMC5jCkBAIC01
MTMsOCArNTEzLDYgQEAgc3RhdGljIHZvaWQgc2RtYV92M18wX2dmeF9zdG9wKHN0cnVjdCBhbWRn
cHVfZGV2aWNlICphZGV2KQogCXUzMiByYl9jbnRsLCBpYl9jbnRsOwogCWludCBpOwogCi0JYW1k
Z3B1X3NkbWFfdW5zZXRfYnVmZmVyX2Z1bmNzX2hlbHBlcihhZGV2KTsKLQogCWZvciAoaSA9IDA7
IGkgPCBhZGV2LT5zZG1hLm51bV9pbnN0YW5jZXM7IGkrKykgewogCQlyYl9jbnRsID0gUlJFRzMy
KG1tU0RNQTBfR0ZYX1JCX0NOVEwgKyBzZG1hX29mZnNldHNbaV0pOwogCQlyYl9jbnRsID0gUkVH
X1NFVF9GSUVMRChyYl9jbnRsLCBTRE1BMF9HRlhfUkJfQ05UTCwgUkJfRU5BQkxFLCAwKTsKQEAg
LTc0Niw5ICs3NDQsNiBAQCBzdGF0aWMgaW50IHNkbWFfdjNfMF9nZnhfcmVzdW1lKHN0cnVjdCBh
bWRncHVfZGV2aWNlICphZGV2KQogCQlyID0gYW1kZ3B1X3JpbmdfdGVzdF9oZWxwZXIocmluZyk7
CiAJCWlmIChyKQogCQkJcmV0dXJuIHI7Ci0KLQkJaWYgKGFkZXYtPm1tYW4uYnVmZmVyX2Z1bmNz
X3JpbmcgPT0gcmluZykKLQkJCWFtZGdwdV90dG1fc2V0X2J1ZmZlcl9mdW5jc19zdGF0dXMoYWRl
diwgdHJ1ZSk7CiAJfQogCiAJcmV0dXJuIDA7CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0v
YW1kL2FtZGdwdS9zZG1hX3Y0XzAuYyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFf
djRfMC5jCmluZGV4IDY4M2Q1MWFlNGJmMS4uM2Q2OGRkNTUyM2M2IDEwMDY0NAotLS0gYS9kcml2
ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1hX3Y0XzAuYworKysgYi9kcml2ZXJzL2dwdS9kcm0v
YW1kL2FtZGdwdS9zZG1hX3Y0XzAuYwpAQCAtODc3LDggKzg3Nyw2IEBAIHN0YXRpYyB2b2lkIHNk
bWFfdjRfMF9nZnhfZW5hYmxlKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2LCBib29sIGVuYWJs
ZSkKIAl1MzIgcmJfY250bCwgaWJfY250bDsKIAlpbnQgaTsKIAotCWFtZGdwdV9zZG1hX3Vuc2V0
X2J1ZmZlcl9mdW5jc19oZWxwZXIoYWRldik7Ci0KIAlmb3IgKGkgPSAwOyBpIDwgYWRldi0+c2Rt
YS5udW1faW5zdGFuY2VzOyBpKyspIHsKIAkJcmJfY250bCA9IFJSRUczMl9TRE1BKGksIG1tU0RN
QTBfR0ZYX1JCX0NOVEwpOwogCQlyYl9jbnRsID0gUkVHX1NFVF9GSUVMRChyYl9jbnRsLCBTRE1B
MF9HRlhfUkJfQ05UTCwgUkJfRU5BQkxFLCBlbmFibGUgPyAxIDogMCk7CkBAIC05MTMsOCArOTEx
LDYgQEAgc3RhdGljIHZvaWQgc2RtYV92NF8wX3BhZ2Vfc3RvcChzdHJ1Y3QgYW1kZ3B1X2Rldmlj
ZSAqYWRldikKIAl1MzIgcmJfY250bCwgaWJfY250bDsKIAlpbnQgaTsKIAotCWFtZGdwdV9zZG1h
X3Vuc2V0X2J1ZmZlcl9mdW5jc19oZWxwZXIoYWRldik7Ci0KIAlmb3IgKGkgPSAwOyBpIDwgYWRl
di0+c2RtYS5udW1faW5zdGFuY2VzOyBpKyspIHsKIAkJcmJfY250bCA9IFJSRUczMl9TRE1BKGks
IG1tU0RNQTBfUEFHRV9SQl9DTlRMKTsKIAkJcmJfY250bCA9IFJFR19TRVRfRklFTEQocmJfY250
bCwgU0RNQTBfUEFHRV9SQl9DTlRMLApAQCAtMTQwMiwxMyArMTM5OCw3IEBAIHN0YXRpYyBpbnQg
c2RtYV92NF8wX3N0YXJ0KHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2KQogCQkJciA9IGFtZGdw
dV9yaW5nX3Rlc3RfaGVscGVyKHBhZ2UpOwogCQkJaWYgKHIpCiAJCQkJcmV0dXJuIHI7Ci0KLQkJ
CWlmIChhZGV2LT5tbWFuLmJ1ZmZlcl9mdW5jc19yaW5nID09IHBhZ2UpCi0JCQkJYW1kZ3B1X3R0
bV9zZXRfYnVmZmVyX2Z1bmNzX3N0YXR1cyhhZGV2LCB0cnVlKTsKIAkJfQotCi0JCWlmIChhZGV2
LT5tbWFuLmJ1ZmZlcl9mdW5jc19yaW5nID09IHJpbmcpCi0JCQlhbWRncHVfdHRtX3NldF9idWZm
ZXJfZnVuY3Nfc3RhdHVzKGFkZXYsIHRydWUpOwogCX0KIAogCXJldHVybiByOwpAQCAtMTkyMSwx
MSArMTkxMSw4IEBAIHN0YXRpYyBpbnQgc2RtYV92NF8wX2h3X2Zpbmkodm9pZCAqaGFuZGxlKQog
CXN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0gKHN0cnVjdCBhbWRncHVfZGV2aWNlICopaGFu
ZGxlOwogCWludCBpOwogCi0JaWYgKGFtZGdwdV9zcmlvdl92ZihhZGV2KSkgewotCQkvKiBkaXNh
YmxlIHRoZSBzY2hlZHVsZXIgZm9yIFNETUEgKi8KLQkJYW1kZ3B1X3NkbWFfdW5zZXRfYnVmZmVy
X2Z1bmNzX2hlbHBlcihhZGV2KTsKKwlpZiAoYW1kZ3B1X3NyaW92X3ZmKGFkZXYpKQogCQlyZXR1
cm4gMDsKLQl9CiAKIAlpZiAoYW1kZ3B1X3Jhc19pc19zdXBwb3J0ZWQoYWRldiwgQU1ER1BVX1JB
U19CTE9DS19fU0RNQSkpIHsKIAkJZm9yIChpID0gMDsgaSA8IGFkZXYtPnNkbWEubnVtX2luc3Rh
bmNlczsgaSsrKSB7CkBAIC0xOTY0LDcgKzE5NTEsNiBAQCBzdGF0aWMgaW50IHNkbWFfdjRfMF9y
ZXN1bWUodm9pZCAqaGFuZGxlKQogCWlmIChhZGV2LT5pbl9zMGl4KSB7CiAJCXNkbWFfdjRfMF9l
bmFibGUoYWRldiwgdHJ1ZSk7CiAJCXNkbWFfdjRfMF9nZnhfZW5hYmxlKGFkZXYsIHRydWUpOwot
CQlhbWRncHVfdHRtX3NldF9idWZmZXJfZnVuY3Nfc3RhdHVzKGFkZXYsIHRydWUpOwogCQlyZXR1
cm4gMDsKIAl9CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFf
djVfMC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92NV8wLmMKaW5kZXggYzFm
ZjVlZGE4OTYxLi4zYzQ4NWU1YTUzMWEgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQv
YW1kZ3B1L3NkbWFfdjVfMC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NkbWFf
djVfMC5jCkBAIC01NTksOCArNTU5LDYgQEAgc3RhdGljIHZvaWQgc2RtYV92NV8wX2dmeF9zdG9w
KHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2KQogCXUzMiByYl9jbnRsLCBpYl9jbnRsOwogCWlu
dCBpOwogCi0JYW1kZ3B1X3NkbWFfdW5zZXRfYnVmZmVyX2Z1bmNzX2hlbHBlcihhZGV2KTsKLQog
CWZvciAoaSA9IDA7IGkgPCBhZGV2LT5zZG1hLm51bV9pbnN0YW5jZXM7IGkrKykgewogCQlyYl9j
bnRsID0gUlJFRzMyX1NPQzE1X0lQKEdDLCBzZG1hX3Y1XzBfZ2V0X3JlZ19vZmZzZXQoYWRldiwg
aSwgbW1TRE1BMF9HRlhfUkJfQ05UTCkpOwogCQlyYl9jbnRsID0gUkVHX1NFVF9GSUVMRChyYl9j
bnRsLCBTRE1BMF9HRlhfUkJfQ05UTCwgUkJfRU5BQkxFLCAwKTsKQEAgLTgyNSw5ICs4MjMsNiBA
QCBzdGF0aWMgaW50IHNkbWFfdjVfMF9nZnhfcmVzdW1lKHN0cnVjdCBhbWRncHVfZGV2aWNlICph
ZGV2KQogCQlyID0gYW1kZ3B1X3JpbmdfdGVzdF9oZWxwZXIocmluZyk7CiAJCWlmIChyKQogCQkJ
cmV0dXJuIHI7Ci0KLQkJaWYgKGFkZXYtPm1tYW4uYnVmZmVyX2Z1bmNzX3JpbmcgPT0gcmluZykK
LQkJCWFtZGdwdV90dG1fc2V0X2J1ZmZlcl9mdW5jc19zdGF0dXMoYWRldiwgdHJ1ZSk7CiAJfQog
CiAJcmV0dXJuIDA7CkBAIC0xNDI2LDExICsxNDIxLDggQEAgc3RhdGljIGludCBzZG1hX3Y1XzBf
aHdfZmluaSh2b2lkICpoYW5kbGUpCiB7CiAJc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSAo
c3RydWN0IGFtZGdwdV9kZXZpY2UgKiloYW5kbGU7CiAKLQlpZiAoYW1kZ3B1X3NyaW92X3ZmKGFk
ZXYpKSB7Ci0JCS8qIGRpc2FibGUgdGhlIHNjaGVkdWxlciBmb3IgU0RNQSAqLwotCQlhbWRncHVf
c2RtYV91bnNldF9idWZmZXJfZnVuY3NfaGVscGVyKGFkZXYpOworCWlmIChhbWRncHVfc3Jpb3Zf
dmYoYWRldikpCiAJCXJldHVybiAwOwotCX0KIAogCXNkbWFfdjVfMF9jdHhfc3dpdGNoX2VuYWJs
ZShhZGV2LCBmYWxzZSk7CiAJc2RtYV92NV8wX2VuYWJsZShhZGV2LCBmYWxzZSk7CmRpZmYgLS1n
aXQgYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1hX3Y1XzIuYyBiL2RyaXZlcnMvZ3B1
L2RybS9hbWQvYW1kZ3B1L3NkbWFfdjVfMi5jCmluZGV4IDdkMWU1NzE4OWM4Yy4uODNjMjQwZjc0
MWI1IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1hX3Y1XzIuYwor
KysgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1hX3Y1XzIuYwpAQCAtMzY0LDggKzM2
NCw2IEBAIHN0YXRpYyB2b2lkIHNkbWFfdjVfMl9nZnhfc3RvcChzdHJ1Y3QgYW1kZ3B1X2Rldmlj
ZSAqYWRldikKIAl1MzIgcmJfY250bCwgaWJfY250bDsKIAlpbnQgaTsKIAotCWFtZGdwdV9zZG1h
X3Vuc2V0X2J1ZmZlcl9mdW5jc19oZWxwZXIoYWRldik7Ci0KIAlmb3IgKGkgPSAwOyBpIDwgYWRl
di0+c2RtYS5udW1faW5zdGFuY2VzOyBpKyspIHsKIAkJcmJfY250bCA9IFJSRUczMl9TT0MxNV9J
UChHQywgc2RtYV92NV8yX2dldF9yZWdfb2Zmc2V0KGFkZXYsIGksIG1tU0RNQTBfR0ZYX1JCX0NO
VEwpKTsKIAkJcmJfY250bCA9IFJFR19TRVRfRklFTEQocmJfY250bCwgU0RNQTBfR0ZYX1JCX0NO
VEwsIFJCX0VOQUJMRSwgMCk7CkBAIC02MjUsOSArNjIzLDYgQEAgc3RhdGljIGludCBzZG1hX3Y1
XzJfZ2Z4X3Jlc3VtZShzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldikKIAkJciA9IGFtZGdwdV9y
aW5nX3Rlc3RfaGVscGVyKHJpbmcpOwogCQlpZiAocikKIAkJCXJldHVybiByOwotCi0JCWlmIChh
ZGV2LT5tbWFuLmJ1ZmZlcl9mdW5jc19yaW5nID09IHJpbmcpCi0JCQlhbWRncHVfdHRtX3NldF9i
dWZmZXJfZnVuY3Nfc3RhdHVzKGFkZXYsIHRydWUpOwogCX0KIAogCXJldHVybiAwOwpAQCAtMTI4
NCwxMSArMTI3OSw4IEBAIHN0YXRpYyBpbnQgc2RtYV92NV8yX2h3X2Zpbmkodm9pZCAqaGFuZGxl
KQogewogCXN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0gKHN0cnVjdCBhbWRncHVfZGV2aWNl
ICopaGFuZGxlOwogCi0JaWYgKGFtZGdwdV9zcmlvdl92ZihhZGV2KSkgewotCQkvKiBkaXNhYmxl
IHRoZSBzY2hlZHVsZXIgZm9yIFNETUEgKi8KLQkJYW1kZ3B1X3NkbWFfdW5zZXRfYnVmZmVyX2Z1
bmNzX2hlbHBlcihhZGV2KTsKKwlpZiAoYW1kZ3B1X3NyaW92X3ZmKGFkZXYpKQogCQlyZXR1cm4g
MDsKLQl9CiAKIAlzZG1hX3Y1XzJfY3R4X3N3aXRjaF9lbmFibGUoYWRldiwgZmFsc2UpOwogCXNk
bWFfdjVfMl9lbmFibGUoYWRldiwgZmFsc2UpOwpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJt
L2FtZC9hbWRncHUvc2RtYV92Nl8wLmMgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9zZG1h
X3Y2XzAuYwppbmRleCA3ZTRkNTE4OGNiZmEuLjNjN2RkZDIxOWRlOCAxMDA2NDQKLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2RtYV92Nl8wLmMKKysrIGIvZHJpdmVycy9ncHUvZHJt
L2FtZC9hbWRncHUvc2RtYV92Nl8wLmMKQEAgLTM0OCw4ICszNDgsNiBAQCBzdGF0aWMgdm9pZCBz
ZG1hX3Y2XzBfZ2Z4X3N0b3Aoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpCiAJdTMyIHJiX2Nu
dGwsIGliX2NudGw7CiAJaW50IGk7CiAKLQlhbWRncHVfc2RtYV91bnNldF9idWZmZXJfZnVuY3Nf
aGVscGVyKGFkZXYpOwotCiAJZm9yIChpID0gMDsgaSA8IGFkZXYtPnNkbWEubnVtX2luc3RhbmNl
czsgaSsrKSB7CiAJCXJiX2NudGwgPSBSUkVHMzJfU09DMTVfSVAoR0MsIHNkbWFfdjZfMF9nZXRf
cmVnX29mZnNldChhZGV2LCBpLCByZWdTRE1BMF9RVUVVRTBfUkJfQ05UTCkpOwogCQlyYl9jbnRs
ID0gUkVHX1NFVF9GSUVMRChyYl9jbnRsLCBTRE1BMF9RVUVVRTBfUkJfQ05UTCwgUkJfRU5BQkxF
LCAwKTsKQEAgLTU2MSw5ICs1NTksNiBAQCBzdGF0aWMgaW50IHNkbWFfdjZfMF9nZnhfcmVzdW1l
KHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2KQogCQlyID0gYW1kZ3B1X3JpbmdfdGVzdF9oZWxw
ZXIocmluZyk7CiAJCWlmIChyKQogCQkJcmV0dXJuIHI7Ci0KLQkJaWYgKGFkZXYtPm1tYW4uYnVm
ZmVyX2Z1bmNzX3JpbmcgPT0gcmluZykKLQkJCWFtZGdwdV90dG1fc2V0X2J1ZmZlcl9mdW5jc19z
dGF0dXMoYWRldiwgdHJ1ZSk7CiAJfQogCiAJcmV0dXJuIDA7CkBAIC0xMzA4LDExICsxMzAzLDgg
QEAgc3RhdGljIGludCBzZG1hX3Y2XzBfaHdfZmluaSh2b2lkICpoYW5kbGUpCiB7CiAJc3RydWN0
IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSAoc3RydWN0IGFtZGdwdV9kZXZpY2UgKiloYW5kbGU7CiAK
LQlpZiAoYW1kZ3B1X3NyaW92X3ZmKGFkZXYpKSB7Ci0JCS8qIGRpc2FibGUgdGhlIHNjaGVkdWxl
ciBmb3IgU0RNQSAqLwotCQlhbWRncHVfc2RtYV91bnNldF9idWZmZXJfZnVuY3NfaGVscGVyKGFk
ZXYpOworCWlmIChhbWRncHVfc3Jpb3ZfdmYoYWRldikpCiAJCXJldHVybiAwOwotCX0KIAogCXNk
bWFfdjZfMF9jdHhlbXB0eV9pbnRfZW5hYmxlKGFkZXYsIGZhbHNlKTsKIAlzZG1hX3Y2XzBfZW5h
YmxlKGFkZXYsIGZhbHNlKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1
L3NpX2RtYS5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvc2lfZG1hLmMKaW5kZXggNDJj
NDU0N2YzMmVjLi45YWEwZTExZWU2NzMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQv
YW1kZ3B1L3NpX2RtYS5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3NpX2RtYS5j
CkBAIC0xMTUsOCArMTE1LDYgQEAgc3RhdGljIHZvaWQgc2lfZG1hX3N0b3Aoc3RydWN0IGFtZGdw
dV9kZXZpY2UgKmFkZXYpCiAJdTMyIHJiX2NudGw7CiAJdW5zaWduZWQgaTsKIAotCWFtZGdwdV9z
ZG1hX3Vuc2V0X2J1ZmZlcl9mdW5jc19oZWxwZXIoYWRldik7Ci0KIAlmb3IgKGkgPSAwOyBpIDwg
YWRldi0+c2RtYS5udW1faW5zdGFuY2VzOyBpKyspIHsKIAkJLyogZG1hMCAqLwogCQlyYl9jbnRs
ID0gUlJFRzMyKERNQV9SQl9DTlRMICsgc2RtYV9vZmZzZXRzW2ldKTsKQEAgLTE3Nyw5ICsxNzUs
NiBAQCBzdGF0aWMgaW50IHNpX2RtYV9zdGFydChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldikK
IAkJciA9IGFtZGdwdV9yaW5nX3Rlc3RfaGVscGVyKHJpbmcpOwogCQlpZiAocikKIAkJCXJldHVy
biByOwotCi0JCWlmIChhZGV2LT5tbWFuLmJ1ZmZlcl9mdW5jc19yaW5nID09IHJpbmcpCi0JCQlh
bWRncHVfdHRtX3NldF9idWZmZXJfZnVuY3Nfc3RhdHVzKGFkZXYsIHRydWUpOwogCX0KIAogCXJl
dHVybiAwOwotLSAKMi40MS4wCgo=
--0000000000001b813306087768f4--
