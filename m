Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [131.252.210.177])
	by mail.lfdr.de (Postfix) with ESMTPS id 522C31B3887
	for <lists+amd-gfx@lfdr.de>; Wed, 22 Apr 2020 09:11:21 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 7FE0D6E9E0;
	Wed, 22 Apr 2020 07:11:18 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from NAM11-DM6-obe.outbound.protection.outlook.com
 (mail-dm6nam11on2069.outbound.protection.outlook.com [40.107.223.69])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 10D016E9E0
 for <amd-gfx@lists.freedesktop.org>; Wed, 22 Apr 2020 07:11:16 +0000 (UTC)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=amF1SQnUiCkdp9dEr/xNoiJeazwCDnD5uBlmCiSlI8wNuWYBJwhMKurEa59wZvZwYIMLkgWP0S4nejL8Y+BNzdnJmmEF+w2oxPU+q19asNGrGmN9zhpFBNawg4TlpTRebEHlMPv0vHKEP2u1w348x1p4n3pv+uCXxRvPnnfQMF3hq26TM//MxcRxzJRvs5tB1wTHtfZ4DWTetjBIX4vAO7te5lPClTRReiDoF/g4dK1EXq2f0Asyrax+dWRN01z/QPNdXz2/yl+aDYduMYdJhpZ39bXBOkqOl4VBheW8CRTUb77oBzyCHbC5+KpSZRa103Oz9+1hiOuogFucLAjG/w==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com; 
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=N2om4NAYw3BA4mB3+6+N7yKjA6LQQPMjsIWpGsqrPkI=;
 b=TSd5DRIwHn1S6ROGzPHrSEPLcZFc2ow8yBrtWwxsXbYi8R1awsQVkCcekju0Aqov/S5XqofBmZrOFXBF1IAQ/Ztgh2f0Q8frEUjKtKyFUZI9fI1sJg02xG7FhX01X3REVxaNagjE1Qf8YmTCrejUGTG+T8RMedzB7dkv2TWMgyG+dRgseq3XPzCnEcBQODKMoeG2vHOXHAtvATpv+O9+lLEvEu8kfTb4ueZZ0i9cYHaqmsge6I5E48gxOUwnMfN91QQ7JmcC/oRwr6sbRoTvtuYaGs8rcdYltuHD90kECh5O3mOmGrQBb9XkAYmnIiJqr1FV8jOV5Fdxa3Gi6Vegng==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=N2om4NAYw3BA4mB3+6+N7yKjA6LQQPMjsIWpGsqrPkI=;
 b=R4yk3IQ2vzYdqKA/QHh/eMZs+GHeyg8WzTap34aKiNI/Rz/5DngW9v/yx8yFlVhgHAwMhTImTk+OBmeFBgPwQxvHmzGFzLPFHtzndjw96xoMQGCm1mHp3fO3vtK5OsFMI/RH/PNl0MuP7GT+NaCnIWMJmolYgNnlo6GD9DddXlk=
Received: from MN2PR12MB3039.namprd12.prod.outlook.com (2603:10b6:208:c9::27)
 by MN2SPR01MB0027.namprd12.prod.outlook.com (2603:10b6:208:d0::24)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.2937.13; Wed, 22 Apr
 2020 07:11:14 +0000
Received: from MN2PR12MB3039.namprd12.prod.outlook.com
 ([fe80::58b5:b730:f260:a425]) by MN2PR12MB3039.namprd12.prod.outlook.com
 ([fe80::58b5:b730:f260:a425%7]) with mapi id 15.20.2921.030; Wed, 22 Apr 2020
 07:11:14 +0000
From: "Tao, Yintian" <Yintian.Tao@amd.com>
To: "Tao, Yintian" <Yintian.Tao@amd.com>, "Koenig, Christian"
 <Christian.Koenig@amd.com>, "Liu, Monk" <Monk.Liu@amd.com>, "Liu, Shaoyun"
 <Shaoyun.Liu@amd.com>, "Kuehling, Felix" <Felix.Kuehling@amd.com>
Subject: RE: [PATCH] drm/amdgpu: refine kiq access register
Thread-Topic: [PATCH] drm/amdgpu: refine kiq access register
Thread-Index: AQHWGGByviDGdSAj+kywaUPnLT4nHqiEuYbg
Date: Wed, 22 Apr 2020 07:11:14 +0000
Message-ID: <MN2PR12MB30395480417314B7398BA427E5D20@MN2PR12MB3039.namprd12.prod.outlook.com>
References: <20200422044228.20986-1-yttao@amd.com>
In-Reply-To: <20200422044228.20986-1-yttao@amd.com>
Accept-Language: zh-CN, en-US
Content-Language: en-US
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
authentication-results: spf=none (sender IP is )
 smtp.mailfrom=Yintian.Tao@amd.com; 
x-originating-ip: [180.167.199.189]
x-ms-publictraffictype: Email
x-ms-office365-filtering-ht: Tenant
x-ms-office365-filtering-correlation-id: 8806600f-db98-43f5-f592-08d7e68c580f
x-ms-traffictypediagnostic: MN2SPR01MB0027:|MN2SPR01MB0027:
x-ms-exchange-transport-forked: True
x-microsoft-antispam-prvs: <MN2SPR01MB00270252968CC394E26521F0E5D20@MN2SPR01MB0027.namprd12.prod.outlook.com>
x-ms-oob-tlc-oobclassifiers: OLM:421;
x-forefront-prvs: 03818C953D
x-forefront-antispam-report: CIP:255.255.255.255; CTRY:; LANG:en; SCL:1; SRV:;
 IPV:NLI; SFV:NSPM; H:MN2PR12MB3039.namprd12.prod.outlook.com; PTR:; CAT:NONE;
 SFTY:;
 SFS:(4636009)(346002)(376002)(396003)(39850400004)(366004)(136003)(52536014)(478600001)(66946007)(110136005)(86362001)(8936002)(64756008)(53546011)(6506007)(76116006)(26005)(66556008)(6636002)(66476007)(66446008)(2906002)(316002)(7696005)(33656002)(30864003)(8676002)(186003)(4326008)(81156014)(55016002)(5660300002)(71200400001)(9686003)(921003)(579004);
 DIR:OUT; SFP:1101; 
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-ms-exchange-senderadcheck: 1
x-microsoft-antispam: BCL:0;
x-microsoft-antispam-message-info: hYNQOHB1Ewv+qmo59VDsL1Rr3arMILdKd0iqSIkCgjwmI1iGKs+nUUt/WCtEvQah6TyuBd+dsRo5Lyypd4M0r1VMn9L9d+VdNmr8Vl5TPB0T6kjIkXDn+PjVK4jVU/ckSB510qxFxjhSvG28eFa9t9jIwzw6IjyxwskXw4HJ4TQ3bgavfSJE5TXU6UrAqDJOP/4L9i6LGcNOEyPdZmUx0UCbeEkg7FkcK+9woSbn2kjtDK7vKdMoaxNZEYnZo+p7z2jGQTVcI/tBB1Ved2M8kNzcEu51e27yILkW0Vg0f1mKq8P0gbItFQ4upW/qfoi3FSwIgk4r1aOgGMn8+VleTxI+i4/kd//zD4Kim+gvdEFuruZ8boTo9fwTHzcy2x8wzYcA5GlGBl/vUPXJ2WV6tm1oy0jrv8yJ9l3Q3GQtkN68SVlfAepVw3fSPVDKs1dfMNnM3O1/CneWx84sEypzeyLM4GwkK85lu1X4Ukm9g6M=
x-ms-exchange-antispam-messagedata: 51yJ5dQE/4vErS+vRpbH+JEVEXIgxTx3h9kg/0+hk7HFyDAGrutGX4Ix4wLSa6UksSsNmiBtLiVUzfrKyLb1166JKt6uusLvtcswgM6ONCrbYoThqeeOzkKXxwFYk2d8TyObpWpEUgQH7B/mxcstTw==
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 8806600f-db98-43f5-f592-08d7e68c580f
X-MS-Exchange-CrossTenant-originalarrivaltime: 22 Apr 2020 07:11:14.1826 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: +i26+j8xRPiKdm7+v7R1CNdL7iPEFPn7qZNWAsFYcKIUo0m3CrN6XGBNoUb5cFsh
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN2SPR01MB0027
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: "amd-gfx@lists.freedesktop.org" <amd-gfx@lists.freedesktop.org>
Content-Type: text/plain; charset="gb2312"
Content-Transfer-Encoding: base64
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

QWRkIEZlbGl4IGFuZCBTaGFveXVuDQoNCi0tLS0tT3JpZ2luYWwgTWVzc2FnZS0tLS0tDQpGcm9t
OiBZaW50aWFuIFRhbyA8eXR0YW9AYW1kLmNvbT4gDQpTZW50OiAyMDIwxOo01MIyMsjVIDEyOjQy
DQpUbzogS29lbmlnLCBDaHJpc3RpYW4gPENocmlzdGlhbi5Lb2VuaWdAYW1kLmNvbT47IExpdSwg
TW9uayA8TW9uay5MaXVAYW1kLmNvbT4NCkNjOiBhbWQtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9y
ZzsgVGFvLCBZaW50aWFuIDxZaW50aWFuLlRhb0BhbWQuY29tPg0KU3ViamVjdDogW1BBVENIXSBk
cm0vYW1kZ3B1OiByZWZpbmUga2lxIGFjY2VzcyByZWdpc3Rlcg0KDQpBY2NvcmRpbmcgdG8gdGhl
IGN1cnJlbnQga2lxIGFjY2VzcyByZWdpc3RlciBtZXRob2QsIHRoZXJlIHdpbGwgYmUgcmFjZSBj
b25kaXRpb24gd2hlbiB1c2luZyBLSVEgdG8gcmVhZCByZWdpc3RlciBpZiBtdWx0aXBsZSBjbGll
bnRzIHdhbnQgdG8gcmVhZCBhdCBzYW1lIHRpbWUganVzdCBsaWtlIHRoZSBleHBhbXBsZSBiZWxv
dzoNCjEuIGNsaWVudC1BIHN0YXJ0IHRvIHJlYWQgUkVHLTAgdGhyb2d1aCBLSVEgMi4gY2xpZW50
LUEgcG9sbCB0aGUgc2Vxbm8tMCAzLiBjbGllbnQtQiBzdGFydCB0byByZWFkIFJFRy0xIHRocm91
Z2ggS0lRIDQuIGNsaWVudC1CIHBvbGwgdGhlIHNlcW5vLTEgNS4gdGhlIGtpcSBjb21wbGV0ZSB0
aGVzZSB0d28gcmVhZCBvcGVyYXRpb24gNi4gY2xpZW50LUEgdG8gcmVhZCB0aGUgcmVnaXN0ZXIg
YXQgdGhlIHdiIGJ1ZmZlciBhbmQNCiAgIGdldCBSRUctMSB2YWx1ZQ0KDQpBbmQgaWYgdGhlcmUg
YXJlIG11bHRpcGxlIGNsaWVudHMgdG8gZnJlcXVlbnRseSB3cml0ZSByZWdpc3RlcnMgdGhyb3Vn
aCBLSVEgd2hpY2ggbWF5IHJhaXNlIHRoZSBLSVEgcmluZyBidWZmZXIgb3ZlcndyaXR0ZW4gcHJv
YmxlbS4NCg0KVGhlcmVmb3JlLCBhbGxvY2F0ZSBmaXhlZCBudW1iZXIgd2Igc2xvdCBmb3IgcnJl
ZyB1c2UgYW5kIGxpbWl0IHRoZSBzdWJtaXQgbnVtYmVyIHdoaWNoIGRlcGVuZHMgb24gdGhlIGtp
cSByaW5nX3NpemUgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgb3ZlcndyaXR0ZW4gcHJvYmxlbS4N
Cg0KU2lnbmVkLW9mZi1ieTogWWludGlhbiBUYW8gPHl0dGFvQGFtZC5jb20+DQotLS0NCiBkcml2
ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHUuaCAgICAgICAgICAgfCAgIDcgKy0NCiAuLi4v
ZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2FtZGtmZF9nZnhfdjEwLmMgICAgfCAgMTIgKy0NCiAuLi4v
Z3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9hbWRrZmRfZ2Z4X3Y5LmMgfCAgMTIgKy0NCiBkcml2
ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfZ2Z4LmMgICAgICAgfCAxMjkgKysrKysrKysr
KysrKysrKy0tDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2dmeC5oICAgICAg
IHwgICA2ICstDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3JpbmcuaCAgICAg
IHwgICA2ICstDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3ZpcnQuYyAgICAg
IHwgIDEzICstDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ2Z4X3YxMF8wLmMgICAgICAg
IHwgICA4ICstDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ2Z4X3Y4XzAuYyAgICAgICAg
IHwgICA4ICstDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ2Z4X3Y5XzAuYyAgICAgICAg
IHwgIDM0ICsrKy0tDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ21jX3YxMF8wLmMgICAg
ICAgIHwgIDEyICstDQogZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ21jX3Y5XzAuYyAgICAg
ICAgIHwgIDEyICstDQogMTIgZmlsZXMgY2hhbmdlZCwgMjExIGluc2VydGlvbnMoKyksIDQ4IGRl
bGV0aW9ucygtKQ0KDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1k
Z3B1LmggYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHUuaA0KaW5kZXggNGUxZDRj
ZmU3YTlmLi40NTMwZTBkZTQyNTcgMTAwNjQ0DQotLS0gYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2Ft
ZGdwdS9hbWRncHUuaA0KKysrIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1LmgN
CkBAIC01MjYsNyArNTI2LDcgQEAgc3RhdGljIGlubGluZSB2b2lkIGFtZGdwdV9zZXRfaWJfdmFs
dWUoc3RydWN0IGFtZGdwdV9jc19wYXJzZXIgKnAsDQogLyoNCiAgKiBXcml0ZWJhY2sNCiAgKi8N
Ci0jZGVmaW5lIEFNREdQVV9NQVhfV0IgMTI4CS8qIFJlc2VydmUgYXQgbW9zdCAxMjggV0Igc2xv
dHMgZm9yIGFtZGdwdS1vd25lZCByaW5ncy4gKi8NCisjZGVmaW5lIEFNREdQVV9NQVhfV0IgMjU2
CS8qIFJlc2VydmUgYXQgbW9zdCAyNTYgV0Igc2xvdHMgZm9yIGFtZGdwdS1vd25lZCByaW5ncy4g
Ki8NCiANCiBzdHJ1Y3QgYW1kZ3B1X3diIHsNCiAJc3RydWN0IGFtZGdwdV9ibwkqd2Jfb2JqOw0K
QEAgLTEwMjgsNiArMTAyOCwxMSBAQCBib29sIGFtZGdwdV9kZXZpY2VfaGFzX2RjX3N1cHBvcnQo
c3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpOw0KIA0KIGludCBlbXVfc29jX2FzaWNfaW5pdChz
dHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldik7DQogDQoraW50IGFtZGdwdV9nZnhfa2lxX2xvY2so
c3RydWN0IGFtZGdwdV9raXEgKmtpcSwgYm9vbCByZWFkKTsgdm9pZCANCithbWRncHVfZ2Z4X2tp
cV91bmxvY2soc3RydWN0IGFtZGdwdV9raXEgKmtpcSk7DQorDQordm9pZCBhbWRncHVfZ2Z4X2tp
cV9jb25zdW1lKHN0cnVjdCBhbWRncHVfa2lxICpraXEsIHVpbnQzMl90ICpvZmZzKTsgDQordm9p
ZCBhbWRncHVfZ2Z4X2tpcV9yZXN0b3JlKHN0cnVjdCBhbWRncHVfa2lxICpraXEsIHVpbnQzMl90
ICpvZmZzKTsNCiAvKg0KICAqIFJlZ2lzdGVycyByZWFkICYgd3JpdGUgZnVuY3Rpb25zLg0KICAq
Lw0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9hbWRrZmRf
Z2Z4X3YxMC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2FtZGtmZF9nZnhf
djEwLmMNCmluZGV4IDY5MWM4OTcwNWJjZC4uMDM0YzlmNDE2NDk5IDEwMDY0NA0KLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2FtZGtmZF9nZnhfdjEwLmMNCisrKyBiL2Ry
aXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9hbWRrZmRfZ2Z4X3YxMC5jDQpAQCAtMzA5
LDYgKzMwOSw3IEBAIHN0YXRpYyBpbnQga2dkX2hpcV9tcWRfbG9hZChzdHJ1Y3Qga2dkX2RldiAq
a2dkLCB2b2lkICptcWQsDQogCQkJICAgIHVpbnQzMl90IGRvb3JiZWxsX29mZikNCiB7DQogCXN0
cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0gZ2V0X2FtZGdwdV9kZXZpY2Uoa2dkKTsNCisJc3Ry
dWN0IGFtZGdwdV9raXEgKmtpcSA9ICZhZGV2LT5nZngua2lxOw0KIAlzdHJ1Y3QgYW1kZ3B1X3Jp
bmcgKmtpcV9yaW5nID0gJmFkZXYtPmdmeC5raXEucmluZzsNCiAJc3RydWN0IHYxMF9jb21wdXRl
X21xZCAqbTsNCiAJdWludDMyX3QgbWVjLCBwaXBlOw0KQEAgLTMyNCwxMyArMzI1LDE5IEBAIHN0
YXRpYyBpbnQga2dkX2hpcV9tcWRfbG9hZChzdHJ1Y3Qga2dkX2RldiAqa2dkLCB2b2lkICptcWQs
DQogCXByX2RlYnVnKCJrZmQ6IHNldCBISVEsIG1lYzolZCwgcGlwZTolZCwgcXVldWU6JWQuXG4i
LA0KIAkJIG1lYywgcGlwZSwgcXVldWVfaWQpOw0KIA0KLQlzcGluX2xvY2soJmFkZXYtPmdmeC5r
aXEucmluZ19sb2NrKTsNCisJciA9IGFtZGdwdV9nZnhfa2lxX2xvY2soa2lxLCBmYWxzZSk7DQor
CWlmIChyKSB7DQorCQlwcl9lcnIoImZhaWxlZCB0byBsb2NrIGtpcVxuIik7DQorCQlnb3RvIG91
dF91bmxvY2s7DQorCX0NCisNCiAJciA9IGFtZGdwdV9yaW5nX2FsbG9jKGtpcV9yaW5nLCA3KTsN
CiAJaWYgKHIpIHsNCiAJCXByX2VycigiRmFpbGVkIHRvIGFsbG9jIEtJUSAoJWQpLlxuIiwgcik7
DQogCQlnb3RvIG91dF91bmxvY2s7DQogCX0NCiANCisJYW1kZ3B1X2dmeF9raXFfY29uc3VtZShr
aXEsIE5VTEwpOw0KIAlhbWRncHVfcmluZ193cml0ZShraXFfcmluZywgUEFDS0VUMyhQQUNLRVQz
X01BUF9RVUVVRVMsIDUpKTsNCiAJYW1kZ3B1X3Jpbmdfd3JpdGUoa2lxX3JpbmcsDQogCQkJICBQ
QUNLRVQzX01BUF9RVUVVRVNfUVVFVUVfU0VMKDApIHwgLyogUXVldWVfU2VsICovIEBAIC0zNTAs
OCArMzU3LDkgQEAgc3RhdGljIGludCBrZ2RfaGlxX21xZF9sb2FkKHN0cnVjdCBrZ2RfZGV2ICpr
Z2QsIHZvaWQgKm1xZCwNCiAJYW1kZ3B1X3Jpbmdfd3JpdGUoa2lxX3JpbmcsIG0tPmNwX2hxZF9w
cV93cHRyX3BvbGxfYWRkcl9oaSk7DQogCWFtZGdwdV9yaW5nX2NvbW1pdChraXFfcmluZyk7DQog
DQorCWFtZGdwdV9nZnhfa2lxX3Jlc3RvcmUoa2lxLCBOVUxMKTsNCiBvdXRfdW5sb2NrOg0KLQlz
cGluX3VubG9jaygmYWRldi0+Z2Z4LmtpcS5yaW5nX2xvY2spOw0KKwlhbWRncHVfZ2Z4X2tpcV91
bmxvY2soJmFkZXYtPmdmeC5raXEpOw0KIAlyZWxlYXNlX3F1ZXVlKGtnZCk7DQogDQogCXJldHVy
biByOw0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9hbWRr
ZmRfZ2Z4X3Y5LmMgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfYW1ka2ZkX2dm
eF92OS5jDQppbmRleCBkZjg0MWMyYWM1ZTcuLmYyNDNkOTk5MGNlZCAxMDA2NDQNCi0tLSBhL2Ry
aXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9hbWRrZmRfZ2Z4X3Y5LmMNCisrKyBiL2Ry
aXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9hbWRrZmRfZ2Z4X3Y5LmMNCkBAIC0zMDcs
NiArMzA3LDcgQEAgaW50IGtnZF9nZnhfdjlfaGlxX21xZF9sb2FkKHN0cnVjdCBrZ2RfZGV2ICpr
Z2QsIHZvaWQgKm1xZCwNCiAJCQkgICAgdWludDMyX3QgZG9vcmJlbGxfb2ZmKQ0KIHsNCiAJc3Ry
dWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSBnZXRfYW1kZ3B1X2RldmljZShrZ2QpOw0KKwlzdHJ1
Y3QgYW1kZ3B1X2tpcSAqa2lxID0gJmFkZXYtPmdmeC5raXE7DQogCXN0cnVjdCBhbWRncHVfcmlu
ZyAqa2lxX3JpbmcgPSAmYWRldi0+Z2Z4LmtpcS5yaW5nOw0KIAlzdHJ1Y3QgdjlfbXFkICptOw0K
IAl1aW50MzJfdCBtZWMsIHBpcGU7DQpAQCAtMzIyLDEzICszMjMsMTkgQEAgaW50IGtnZF9nZnhf
djlfaGlxX21xZF9sb2FkKHN0cnVjdCBrZ2RfZGV2ICprZ2QsIHZvaWQgKm1xZCwNCiAJcHJfZGVi
dWcoImtmZDogc2V0IEhJUSwgbWVjOiVkLCBwaXBlOiVkLCBxdWV1ZTolZC5cbiIsDQogCQkgbWVj
LCBwaXBlLCBxdWV1ZV9pZCk7DQogDQotCXNwaW5fbG9jaygmYWRldi0+Z2Z4LmtpcS5yaW5nX2xv
Y2spOw0KKwlyID0gYW1kZ3B1X2dmeF9raXFfbG9jayhraXEsIGZhbHNlKTsNCisJaWYgKHIpIHsN
CisJCXByX2VycigiZmFpbGVkIHRvIGxvY2sga2lxXG4iKTsNCisJCWdvdG8gb3V0X3VubG9jazsN
CisJfQ0KKw0KIAlyID0gYW1kZ3B1X3JpbmdfYWxsb2Moa2lxX3JpbmcsIDcpOw0KIAlpZiAocikg
ew0KIAkJcHJfZXJyKCJGYWlsZWQgdG8gYWxsb2MgS0lRICglZCkuXG4iLCByKTsNCiAJCWdvdG8g
b3V0X3VubG9jazsNCiAJfQ0KIA0KKwlhbWRncHVfZ2Z4X2tpcV9jb25zdW1lKGtpcSwgTlVMTCk7
DQogCWFtZGdwdV9yaW5nX3dyaXRlKGtpcV9yaW5nLCBQQUNLRVQzKFBBQ0tFVDNfTUFQX1FVRVVF
UywgNSkpOw0KIAlhbWRncHVfcmluZ193cml0ZShraXFfcmluZywNCiAJCQkgIFBBQ0tFVDNfTUFQ
X1FVRVVFU19RVUVVRV9TRUwoMCkgfCAvKiBRdWV1ZV9TZWwgKi8gQEAgLTM0OCw4ICszNTUsOSBA
QCBpbnQga2dkX2dmeF92OV9oaXFfbXFkX2xvYWQoc3RydWN0IGtnZF9kZXYgKmtnZCwgdm9pZCAq
bXFkLA0KIAlhbWRncHVfcmluZ193cml0ZShraXFfcmluZywgbS0+Y3BfaHFkX3BxX3dwdHJfcG9s
bF9hZGRyX2hpKTsNCiAJYW1kZ3B1X3JpbmdfY29tbWl0KGtpcV9yaW5nKTsNCiANCisJYW1kZ3B1
X2dmeF9raXFfcmVzdG9yZShraXEsIE5VTEwpOw0KIG91dF91bmxvY2s6DQotCXNwaW5fdW5sb2Nr
KCZhZGV2LT5nZngua2lxLnJpbmdfbG9jayk7DQorCWFtZGdwdV9nZnhfa2lxX3VubG9jaygmYWRl
di0+Z2Z4LmtpcSk7DQogCXJlbGVhc2VfcXVldWUoa2dkKTsNCiANCiAJcmV0dXJuIHI7DQpkaWZm
IC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2dmeC5jIGIvZHJpdmVy
cy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2dmeC5jDQppbmRleCBlYTU3NmI0MjYwYTQuLmM2
YjFjNzdiNWVhYyAxMDA2NDQNCi0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdw
dV9nZnguYw0KKysrIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X2dmeC5jDQpA
QCAtMjk1LDIzICsyOTUsOTkgQEAgc3RhdGljIGludCBhbWRncHVfZ2Z4X2tpcV9hY3F1aXJlKHN0
cnVjdCBhbWRncHVfZGV2aWNlICphZGV2LA0KIAlyZXR1cm4gLUVJTlZBTDsNCiB9DQogDQordm9p
ZCBhbWRncHVfZ2Z4X2tpcV9yZWdfb2Zmc19nZXQoc3RydWN0IGFtZGdwdV9raXEgKmtpcSwNCisJ
CQkJIHVpbnQzMl90ICpvZmZzZXQpDQorew0KKwl1aW50MzJfdCB0bXAgPSAwOw0KKw0KKwl0bXAg
PSBmaW5kX2ZpcnN0X3plcm9fYml0KGtpcS0+dXNlZCwNCisJCQkJICAgICAga2lxLT5udW1fc2xv
dCk7DQorCWlmICh0bXAgPCBraXEtPm51bV9zbG90KSB7DQorCQlfX3NldF9iaXQodG1wLCBraXEt
PnVzZWQpOw0KKwkJKm9mZnNldCA9IGtpcS0+cmVnX3ZhbF9vZmZzW3RtcF07DQorCX0NCit9DQor
DQordm9pZCBhbWRncHVfZ2Z4X2tpcV9yZWdfb2Zmc19mcmVlKHN0cnVjdCBhbWRncHVfa2lxICpr
aXEsDQorCQkJCSB1aW50MzJfdCBvZmZzZXQpDQorew0KKwl1aW50MzJfdCB0bXAgPSAwOw0KKw0K
Kwl0bXAgPSAob2Zmc2V0IC0ga2lxLT5yZWdfdmFsX29mZnNbMF0pID4+IDM7DQorCWlmICh0bXAg
PCBraXEtPm51bV9zbG90KQ0KKwkJX19jbGVhcl9iaXQodG1wLCBraXEtPnVzZWQpOw0KK30NCisN
CitpbnQgYW1kZ3B1X2dmeF9raXFfbG9jayhzdHJ1Y3QgYW1kZ3B1X2tpcSAqa2lxLCBib29sIHJl
YWQpIHsNCisJaW50IHJldHJ5ID0gTUFYX0tJUV9SRUdfVFJZOw0KKw0KKwlCVUdfT04oaW5faW50
ZXJydXB0KCkpOw0KKwl3aGlsZSAocmV0cnktLSA+IDApIHsNCisJCXNwaW5fbG9jaygma2lxLT5y
aW5nX2xvY2spOw0KKwkJaWYgKChhdG9taWM2NF9yZWFkKCZraXEtPnN1Ym1pdF9hdmFpbCkgPiAw
KSAmJg0KKwkJICAgIChyZWFkID8gZmluZF9maXJzdF96ZXJvX2JpdChraXEtPnVzZWQsIGtpcS0+
bnVtX3Nsb3QpIDwNCisJCSAgICAga2lxLT5udW1fc2xvdCA6IDEpKSB7DQorCQkJCWJyZWFrOw0K
KwkJfSBlbHNlIHsNCisJCQlzcGluX3VubG9jaygma2lxLT5yaW5nX2xvY2spOw0KKwkJCW1zbGVl
cCgyKTsNCisJCQljb250aW51ZTsNCisJCX0NCisNCisJfQ0KKw0KKwlpZiAocmV0cnkgPiAwKQ0K
KwkJcmV0dXJuIDA7DQorCWVsc2UNCisJCXJldHVybiAtRVRJTUU7DQorfQ0KKw0KK3ZvaWQgYW1k
Z3B1X2dmeF9raXFfdW5sb2NrKHN0cnVjdCBhbWRncHVfa2lxICpraXEpIHsNCisJc3Bpbl91bmxv
Y2soJmtpcS0+cmluZ19sb2NrKTsNCit9DQorDQordm9pZCBhbWRncHVfZ2Z4X2tpcV9jb25zdW1l
KHN0cnVjdCBhbWRncHVfa2lxICpraXEsIHVpbnQzMl90ICpvZmZzKSB7DQorCWF0b21pYzY0X2Rl
Yygma2lxLT5zdWJtaXRfYXZhaWwpOw0KKwlpZiAob2ZmcykNCisJCWFtZGdwdV9nZnhfa2lxX3Jl
Z19vZmZzX2dldChraXEsIG9mZnMpOw0KKw0KK30NCisNCit2b2lkIGFtZGdwdV9nZnhfa2lxX3Jl
c3RvcmUoc3RydWN0IGFtZGdwdV9raXEgKmtpcSwgdWludDMyX3QgKm9mZnMpIHsNCisJYXRvbWlj
NjRfaW5jKCZraXEtPnN1Ym1pdF9hdmFpbCk7DQorCWlmIChvZmZzKQ0KKwkJYW1kZ3B1X2dmeF9r
aXFfcmVnX29mZnNfZnJlZShraXEsICpvZmZzKTsgfQ0KKw0KIGludCBhbWRncHVfZ2Z4X2tpcV9p
bml0X3Jpbmcoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYsDQogCQkJICAgICBzdHJ1Y3QgYW1k
Z3B1X3JpbmcgKnJpbmcsDQogCQkJICAgICBzdHJ1Y3QgYW1kZ3B1X2lycV9zcmMgKmlycSkNCiB7
DQogCXN0cnVjdCBhbWRncHVfa2lxICpraXEgPSAmYWRldi0+Z2Z4LmtpcTsNCi0JaW50IHIgPSAw
Ow0KKwlpbnQgciA9IDAsIGksIGo7DQogDQogCXNwaW5fbG9ja19pbml0KCZraXEtPnJpbmdfbG9j
ayk7DQogDQotCXIgPSBhbWRncHVfZGV2aWNlX3diX2dldChhZGV2LCAma2lxLT5yZWdfdmFsX29m
ZnMpOw0KLQlpZiAocikNCi0JCXJldHVybiByOw0KKwlmb3IgKGkgPSAwOyBpIDwgTUFYX0tJUV9S
UkVHX05VTTsgaSsrKSB7DQorCQlyID0gYW1kZ3B1X2RldmljZV93Yl9nZXQoYWRldiwgJmtpcS0+
cmVnX3ZhbF9vZmZzW2ldKTsNCisJCWlmIChyKSB7DQorCQkJZm9yIChqID0gMDsgaiA8IGk7IGor
KykNCisJCQkJYW1kZ3B1X2RldmljZV93Yl9mcmVlKGFkZXYsIGtpcS0+cmVnX3ZhbF9vZmZzW2pd
KTsNCisJCQlyZXR1cm4gcjsNCisJCX0NCisJfQ0KIA0KIAlyaW5nLT5hZGV2ID0gTlVMTDsNCiAJ
cmluZy0+cmluZ19vYmogPSBOVUxMOw0KIAlyaW5nLT51c2VfZG9vcmJlbGwgPSB0cnVlOw0KIAly
aW5nLT5kb29yYmVsbF9pbmRleCA9IGFkZXYtPmRvb3JiZWxsX2luZGV4LmtpcTsNCisJa2lxLT5u
dW1fc2xvdCA9IE1BWF9LSVFfUlJFR19OVU07DQorCW1lbXNldCgma2lxLT51c2VkLCAwLCBzaXpl
b2Yoa2lxLT51c2VkKSk7DQorDQogDQogCXIgPSBhbWRncHVfZ2Z4X2tpcV9hY3F1aXJlKGFkZXYs
IHJpbmcpOw0KIAlpZiAocikNCkBAIC0zMjUsMTMgKzQwMSwyMCBAQCBpbnQgYW1kZ3B1X2dmeF9r
aXFfaW5pdF9yaW5nKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2LA0KIAkJCSAgICAgQU1ER1BV
X1JJTkdfUFJJT19ERUZBVUxUKTsNCiAJaWYgKHIpDQogCQlkZXZfd2FybihhZGV2LT5kZXYsICIo
JWQpIGZhaWxlZCB0byBpbml0IGtpcSByaW5nXG4iLCByKTsNCisJZWxzZQ0KKwkJYXRvbWljNjRf
c2V0KCZraXEtPnN1Ym1pdF9hdmFpbCwgcmluZy0+cmluZ19zaXplIC8gNCAvDQorCQkJICAgICAo
cmluZy0+ZnVuY3MtPmFsaWduX21hc2sgKyAxKSk7DQogDQogCXJldHVybiByOw0KIH0NCiANCiB2
b2lkIGFtZGdwdV9nZnhfa2lxX2ZyZWVfcmluZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcpICB7
DQotCWFtZGdwdV9kZXZpY2Vfd2JfZnJlZShyaW5nLT5hZGV2LCByaW5nLT5hZGV2LT5nZngua2lx
LnJlZ192YWxfb2Zmcyk7DQorCXN0cnVjdCBhbWRncHVfa2lxICpraXEgPSAmcmluZy0+YWRldi0+
Z2Z4LmtpcTsNCisJaW50IGkgPSAwOw0KKw0KKwlmb3IgKGkgPSAwOyBpIDwgTUFYX0tJUV9SUkVH
X05VTTsgaSsrKQ0KKwkJYW1kZ3B1X2RldmljZV93Yl9mcmVlKHJpbmctPmFkZXYsIGtpcS0+cmVn
X3ZhbF9vZmZzW2ldKTsNCiAJYW1kZ3B1X3JpbmdfZmluaShyaW5nKTsNCiB9DQogDQpAQCAtNjcx
LDE5ICs3NTQsMjQgQEAgaW50IGFtZGdwdV9nZnhfY3BfZWNjX2Vycm9yX2lycShzdHJ1Y3QgYW1k
Z3B1X2RldmljZSAqYWRldiwgIHVpbnQzMl90IGFtZGdwdV9raXFfcnJlZyhzdHJ1Y3QgYW1kZ3B1
X2RldmljZSAqYWRldiwgdWludDMyX3QgcmVnKSAgew0KIAlzaWduZWQgbG9uZyByLCBjbnQgPSAw
Ow0KLQl1bnNpZ25lZCBsb25nIGZsYWdzOw0KLQl1aW50MzJfdCBzZXE7DQorCXVpbnQzMl90IHNl
cSwgcmVnX3ZhbF9vZmZzID0gMCwgdmFsdWUgPSAwOw0KIAlzdHJ1Y3QgYW1kZ3B1X2tpcSAqa2lx
ID0gJmFkZXYtPmdmeC5raXE7DQogCXN0cnVjdCBhbWRncHVfcmluZyAqcmluZyA9ICZraXEtPnJp
bmc7DQogDQogCUJVR19PTighcmluZy0+ZnVuY3MtPmVtaXRfcnJlZyk7DQogDQotCXNwaW5fbG9j
a19pcnFzYXZlKCZraXEtPnJpbmdfbG9jaywgZmxhZ3MpOw0KKwlyID0gYW1kZ3B1X2dmeF9raXFf
bG9jayhraXEsIHRydWUpOw0KKwlpZiAocikgew0KKwkJcHJfZXJyKCJmYWlsZWQgdG8gbG9jayBr
aXFcbiIpOw0KKwkJZ290byBraXFfcmVhZF9leGl0Ow0KKwl9DQorDQorCWFtZGdwdV9nZnhfa2lx
X2NvbnN1bWUoa2lxLCAmcmVnX3ZhbF9vZmZzKTsNCiAJYW1kZ3B1X3JpbmdfYWxsb2MocmluZywg
MzIpOw0KLQlhbWRncHVfcmluZ19lbWl0X3JyZWcocmluZywgcmVnKTsNCisJYW1kZ3B1X3Jpbmdf
ZW1pdF9ycmVnKHJpbmcsIHJlZywgcmVnX3ZhbF9vZmZzKTsNCiAJYW1kZ3B1X2ZlbmNlX2VtaXRf
cG9sbGluZyhyaW5nLCAmc2VxKTsNCiAJYW1kZ3B1X3JpbmdfY29tbWl0KHJpbmcpOw0KLQlzcGlu
X3VubG9ja19pcnFyZXN0b3JlKCZraXEtPnJpbmdfbG9jaywgZmxhZ3MpOw0KKwlhbWRncHVfZ2Z4
X2tpcV91bmxvY2soa2lxKTsNCiANCiAJciA9IGFtZGdwdV9mZW5jZV93YWl0X3BvbGxpbmcocmlu
Zywgc2VxLCBNQVhfS0lRX1JFR19XQUlUKTsNCiANCkBAIC03MDcsOSArNzk1LDE0IEBAIHVpbnQz
Ml90IGFtZGdwdV9raXFfcnJlZyhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwgdWludDMyX3Qg
cmVnKQ0KIAlpZiAoY250ID4gTUFYX0tJUV9SRUdfVFJZKQ0KIAkJZ290byBmYWlsZWRfa2lxX3Jl
YWQ7DQogDQotCXJldHVybiBhZGV2LT53Yi53YltraXEtPnJlZ192YWxfb2Zmc107DQorCW1iKCk7
DQorCXZhbHVlID0gYWRldi0+d2Iud2JbcmVnX3ZhbF9vZmZzXTsNCisJYW1kZ3B1X2dmeF9raXFf
cmVzdG9yZShraXEsICZyZWdfdmFsX29mZnMpOw0KKwlyZXR1cm4gdmFsdWU7DQogDQogZmFpbGVk
X2tpcV9yZWFkOg0KKwlhbWRncHVfZ2Z4X2tpcV9yZXN0b3JlKGtpcSwgJnJlZ192YWxfb2Zmcyk7
DQora2lxX3JlYWRfZXhpdDoNCiAJcHJfZXJyKCJmYWlsZWQgdG8gcmVhZCByZWc6JXhcbiIsIHJl
Zyk7DQogCXJldHVybiB+MDsNCiB9DQpAQCAtNzE3LDE5ICs4MTAsMjQgQEAgdWludDMyX3QgYW1k
Z3B1X2tpcV9ycmVnKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2LCB1aW50MzJfdCByZWcpICB2
b2lkIGFtZGdwdV9raXFfd3JlZyhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwgdWludDMyX3Qg
cmVnLCB1aW50MzJfdCB2KSAgew0KIAlzaWduZWQgbG9uZyByLCBjbnQgPSAwOw0KLQl1bnNpZ25l
ZCBsb25nIGZsYWdzOw0KIAl1aW50MzJfdCBzZXE7DQogCXN0cnVjdCBhbWRncHVfa2lxICpraXEg
PSAmYWRldi0+Z2Z4LmtpcTsNCiAJc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nID0gJmtpcS0+cmlu
ZzsNCiANCiAJQlVHX09OKCFyaW5nLT5mdW5jcy0+ZW1pdF93cmVnKTsNCiANCi0Jc3Bpbl9sb2Nr
X2lycXNhdmUoJmtpcS0+cmluZ19sb2NrLCBmbGFncyk7DQorCXIgPSBhbWRncHVfZ2Z4X2tpcV9s
b2NrKGtpcSwgZmFsc2UpOw0KKwlpZiAocikgew0KKwkJcHJfZXJyKCJmYWlsZWQgdG8gbG9jayBr
aXFcbiIpOw0KKwkJZ290byBraXFfd3JpdGVfZXhpdDsNCisJfQ0KKw0KKwlhbWRncHVfZ2Z4X2tp
cV9jb25zdW1lKGtpcSwgTlVMTCk7DQogCWFtZGdwdV9yaW5nX2FsbG9jKHJpbmcsIDMyKTsNCiAJ
YW1kZ3B1X3JpbmdfZW1pdF93cmVnKHJpbmcsIHJlZywgdik7DQogCWFtZGdwdV9mZW5jZV9lbWl0
X3BvbGxpbmcocmluZywgJnNlcSk7DQogCWFtZGdwdV9yaW5nX2NvbW1pdChyaW5nKTsNCi0Jc3Bp
bl91bmxvY2tfaXJxcmVzdG9yZSgma2lxLT5yaW5nX2xvY2ssIGZsYWdzKTsNCisJYW1kZ3B1X2dm
eF9raXFfdW5sb2NrKGtpcSk7DQogDQogCXIgPSBhbWRncHVfZmVuY2Vfd2FpdF9wb2xsaW5nKHJp
bmcsIHNlcSwgTUFYX0tJUV9SRUdfV0FJVCk7DQogDQpAQCAtNzU0LDggKzg1MiwxMSBAQCB2b2lk
IGFtZGdwdV9raXFfd3JlZyhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwgdWludDMyX3QgcmVn
LCB1aW50MzJfdCB2KQ0KIAlpZiAoY250ID4gTUFYX0tJUV9SRUdfVFJZKQ0KIAkJZ290byBmYWls
ZWRfa2lxX3dyaXRlOw0KIA0KKwlhbWRncHVfZ2Z4X2tpcV9yZXN0b3JlKGtpcSwgTlVMTCk7DQog
CXJldHVybjsNCiANCiBmYWlsZWRfa2lxX3dyaXRlOg0KKwlhbWRncHVfZ2Z4X2tpcV9yZXN0b3Jl
KGtpcSwgTlVMTCk7DQora2lxX3dyaXRlX2V4aXQ6DQogCXByX2VycigiZmFpbGVkIHRvIHdyaXRl
IHJlZzoleFxuIiwgcmVnKTsgIH0gZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1k
Z3B1L2FtZGdwdV9nZnguaCBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV9nZngu
aA0KaW5kZXggNjM0NzQ2ODI5MDI0Li5iYjA1NTk0YzI3ZTAgMTAwNjQ0DQotLS0gYS9kcml2ZXJz
L2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfZ2Z4LmgNCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9h
bWQvYW1kZ3B1L2FtZGdwdV9nZnguaA0KQEAgLTk2LDYgKzk2LDcgQEAgc3RydWN0IGtpcV9wbTRf
ZnVuY3Mgew0KIAlpbnQgaW52YWxpZGF0ZV90bGJzX3NpemU7DQogfTsNCiANCisjZGVmaW5lIE1B
WF9LSVFfUlJFR19OVU0gNjQNCiBzdHJ1Y3QgYW1kZ3B1X2tpcSB7DQogCXU2NAkJCWVvcF9ncHVf
YWRkcjsNCiAJc3RydWN0IGFtZGdwdV9ibwkqZW9wX29iajsNCkBAIC0xMDMsNyArMTA0LDEwIEBA
IHN0cnVjdCBhbWRncHVfa2lxIHsNCiAJc3RydWN0IGFtZGdwdV9yaW5nCXJpbmc7DQogCXN0cnVj
dCBhbWRncHVfaXJxX3NyYwlpcnE7DQogCWNvbnN0IHN0cnVjdCBraXFfcG00X2Z1bmNzICpwbWY7
DQotCXVpbnQzMl90CQkJcmVnX3ZhbF9vZmZzOw0KKwl1aW50MzJfdAkJcmVnX3ZhbF9vZmZzW01B
WF9LSVFfUlJFR19OVU1dOw0KKwlhdG9taWM2NF90CQlzdWJtaXRfYXZhaWw7DQorCXVpbnQzMl90
CQludW1fc2xvdDsNCisJdW5zaWduZWQgbG9uZwkJdXNlZFtESVZfUk9VTkRfVVAoTUFYX0tJUV9S
UkVHX05VTSwgQklUU19QRVJfTE9ORyldOw0KIH07DQogDQogLyoNCmRpZmYgLS1naXQgYS9kcml2
ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfcmluZy5oIGIvZHJpdmVycy9ncHUvZHJtL2Ft
ZC9hbWRncHUvYW1kZ3B1X3JpbmcuaA0KaW5kZXggZjYxNjY0ZWU0OTQwLi5iMGVhNGY2N2E2ZTEg
MTAwNjQ0DQotLS0gYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfcmluZy5oDQor
KysgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfcmluZy5oDQpAQCAtMTgxLDcg
KzE4MSw4IEBAIHN0cnVjdCBhbWRncHVfcmluZ19mdW5jcyB7DQogCXZvaWQgKCplbmRfdXNlKShz
dHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcpOw0KIAl2b2lkICgqZW1pdF9zd2l0Y2hfYnVmZmVyKSAo
c3RydWN0IGFtZGdwdV9yaW5nICpyaW5nKTsNCiAJdm9pZCAoKmVtaXRfY250eGNudGwpIChzdHJ1
Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGZsYWdzKTsNCi0Jdm9pZCAoKmVtaXRfcnJl
Zykoc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCByZWcpOw0KKwl2b2lkICgqZW1p
dF9ycmVnKShzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IHJlZywNCisJCQkgIHVp
bnQzMl90IHJlZ192YWxfb2Zmcyk7DQogCXZvaWQgKCplbWl0X3dyZWcpKHN0cnVjdCBhbWRncHVf
cmluZyAqcmluZywgdWludDMyX3QgcmVnLCB1aW50MzJfdCB2YWwpOw0KIAl2b2lkICgqZW1pdF9y
ZWdfd2FpdCkoc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCByZWcsDQogCQkJICAg
ICAgdWludDMyX3QgdmFsLCB1aW50MzJfdCBtYXNrKTsNCkBAIC0yNjUsNyArMjY2LDcgQEAgc3Ry
dWN0IGFtZGdwdV9yaW5nIHsgICNkZWZpbmUgYW1kZ3B1X3JpbmdfZW1pdF9oZHBfZmx1c2gocikg
KHIpLT5mdW5jcy0+ZW1pdF9oZHBfZmx1c2goKHIpKSAgI2RlZmluZSBhbWRncHVfcmluZ19lbWl0
X3N3aXRjaF9idWZmZXIocikgKHIpLT5mdW5jcy0+ZW1pdF9zd2l0Y2hfYnVmZmVyKChyKSkNCiAj
ZGVmaW5lIGFtZGdwdV9yaW5nX2VtaXRfY250eGNudGwociwgZCkgKHIpLT5mdW5jcy0+ZW1pdF9j
bnR4Y250bCgociksIChkKSkgLSNkZWZpbmUgYW1kZ3B1X3JpbmdfZW1pdF9ycmVnKHIsIGQpIChy
KS0+ZnVuY3MtPmVtaXRfcnJlZygociksIChkKSkNCisjZGVmaW5lIGFtZGdwdV9yaW5nX2VtaXRf
cnJlZyhyLCBkLCBvKSAociktPmZ1bmNzLT5lbWl0X3JyZWcoKHIpLCAoZCksIA0KKyhvKSkNCiAj
ZGVmaW5lIGFtZGdwdV9yaW5nX2VtaXRfd3JlZyhyLCBkLCB2KSAociktPmZ1bmNzLT5lbWl0X3dy
ZWcoKHIpLCAoZCksICh2KSkgICNkZWZpbmUgYW1kZ3B1X3JpbmdfZW1pdF9yZWdfd2FpdChyLCBk
LCB2LCBtKSAociktPmZ1bmNzLT5lbWl0X3JlZ193YWl0KChyKSwgKGQpLCAodiksIChtKSkgICNk
ZWZpbmUgYW1kZ3B1X3JpbmdfZW1pdF9yZWdfd3JpdGVfcmVnX3dhaXQociwgZDAsIGQxLCB2LCBt
KSAociktPmZ1bmNzLT5lbWl0X3JlZ193cml0ZV9yZWdfd2FpdCgociksIChkMCksIChkMSksICh2
KSwgKG0pKSBAQCAtMzA4LDYgKzMwOSw3IEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBhbWRncHVfcmlu
Z193cml0ZShzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IHYpICB7DQogCWlmIChy
aW5nLT5jb3VudF9kdyA8PSAwKQ0KIAkJRFJNX0VSUk9SKCJhbWRncHU6IHdyaXRpbmcgbW9yZSBk
d29yZHMgdG8gdGhlIHJpbmcgdGhhbiBleHBlY3RlZCFcbiIpOw0KKw0KIAlyaW5nLT5yaW5nW3Jp
bmctPndwdHIrKyAmIHJpbmctPmJ1Zl9tYXNrXSA9IHY7DQogCXJpbmctPndwdHIgJj0gcmluZy0+
cHRyX21hc2s7DQogCXJpbmctPmNvdW50X2R3LS07DQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUv
ZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3ZpcnQuYyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1
L2FtZGdwdV92aXJ0LmMNCmluZGV4IDhjMTAwODRmNDRlZi4uZGQ1NGVhODAyYTlhIDEwMDY0NA0K
LS0tIGEvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3ZpcnQuYw0KKysrIGIvZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3ZpcnQuYw0KQEAgLTU2LDEzICs1NiwxOSBA
QCB2b2lkIGFtZGdwdV92aXJ0X2tpcV9yZWdfd3JpdGVfcmVnX3dhaXQoc3RydWN0IGFtZGdwdV9k
ZXZpY2UgKmFkZXYsDQogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7DQogCXVpbnQzMl90IHNlcTsNCiAN
Ci0Jc3Bpbl9sb2NrX2lycXNhdmUoJmtpcS0+cmluZ19sb2NrLCBmbGFncyk7DQorCXIgPSBhbWRn
cHVfZ2Z4X2tpcV9sb2NrKGtpcSwgZmFsc2UpOw0KKwlpZiAocikgew0KKwkJcHJfZXJyKCJmYWls
ZWQgdG8gbG9jayBraXFcbiIpOw0KKwkJZ290byBmYWlsZWRfZXhpdDsNCisJfQ0KKw0KKwlhbWRn
cHVfZ2Z4X2tpcV9jb25zdW1lKGtpcSwgTlVMTCk7DQogCWFtZGdwdV9yaW5nX2FsbG9jKHJpbmcs
IDMyKTsNCiAJYW1kZ3B1X3JpbmdfZW1pdF9yZWdfd3JpdGVfcmVnX3dhaXQocmluZywgcmVnMCwg
cmVnMSwNCiAJCQkJCSAgICByZWYsIG1hc2spOw0KIAlhbWRncHVfZmVuY2VfZW1pdF9wb2xsaW5n
KHJpbmcsICZzZXEpOw0KIAlhbWRncHVfcmluZ19jb21taXQocmluZyk7DQotCXNwaW5fdW5sb2Nr
X2lycXJlc3RvcmUoJmtpcS0+cmluZ19sb2NrLCBmbGFncyk7DQorCWFtZGdwdV9nZnhfa2lxX3Vu
bG9jayhraXEpOw0KIA0KIAlyID0gYW1kZ3B1X2ZlbmNlX3dhaXRfcG9sbGluZyhyaW5nLCBzZXEs
IE1BWF9LSVFfUkVHX1dBSVQpOw0KIA0KQEAgLTgwLDkgKzg2LDEyIEBAIHZvaWQgYW1kZ3B1X3Zp
cnRfa2lxX3JlZ193cml0ZV9yZWdfd2FpdChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwNCiAJ
aWYgKGNudCA+IE1BWF9LSVFfUkVHX1RSWSkNCiAJCWdvdG8gZmFpbGVkX2tpcTsNCiANCisJYW1k
Z3B1X2dmeF9raXFfcmVzdG9yZShraXEsIE5VTEwpOw0KIAlyZXR1cm47DQogDQogZmFpbGVkX2tp
cToNCisJYW1kZ3B1X2dmeF9raXFfcmVzdG9yZShraXEsIE5VTEwpOw0KK2ZhaWxlZF9leGl0Og0K
IAlwcl9lcnIoImZhaWxlZCB0byB3cml0ZSByZWcgJXggd2FpdCByZWcgJXhcbiIsIHJlZzAsIHJl
ZzEpOyAgfQ0KIA0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92
MTBfMC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ2Z4X3YxMF8wLmMNCmluZGV4IDBh
MDNlMmFkNWQ5NS4uNzg1M2RiYzNjOGJkIDEwMDY0NA0KLS0tIGEvZHJpdmVycy9ncHUvZHJtL2Ft
ZC9hbWRncHUvZ2Z4X3YxMF8wLmMNCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dm
eF92MTBfMC5jDQpAQCAtNzU5NCwxMCArNzU5NCwxMCBAQCBzdGF0aWMgdm9pZCBnZnhfdjEwXzBf
cmluZ19lbWl0X2ZyYW1lX2NudGwoc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCBib29sIHN0YXJ0
LA0KIAlhbWRncHVfcmluZ193cml0ZShyaW5nLCB2IHwgRlJBTUVfQ01EKHN0YXJ0ID8gMCA6IDEp
KTsgIH0NCiANCi1zdGF0aWMgdm9pZCBnZnhfdjEwXzBfcmluZ19lbWl0X3JyZWcoc3RydWN0IGFt
ZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCByZWcpDQorc3RhdGljIHZvaWQgZ2Z4X3YxMF8wX3Jp
bmdfZW1pdF9ycmVnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgcmVnLA0KKwkJ
CQkgICAgIHVpbnQzMl90IHJlZ192YWxfb2ZmcykNCiB7DQogCXN0cnVjdCBhbWRncHVfZGV2aWNl
ICphZGV2ID0gcmluZy0+YWRldjsNCi0Jc3RydWN0IGFtZGdwdV9raXEgKmtpcSA9ICZhZGV2LT5n
Zngua2lxOw0KIA0KIAlhbWRncHVfcmluZ193cml0ZShyaW5nLCBQQUNLRVQzKFBBQ0tFVDNfQ09Q
WV9EQVRBLCA0KSk7DQogCWFtZGdwdV9yaW5nX3dyaXRlKHJpbmcsIDAgfAkvKiBzcmM6IHJlZ2lz
dGVyKi8NCkBAIC03NjA2LDkgKzc2MDYsOSBAQCBzdGF0aWMgdm9pZCBnZnhfdjEwXzBfcmluZ19l
bWl0X3JyZWcoc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCByZWcpDQogCWFtZGdw
dV9yaW5nX3dyaXRlKHJpbmcsIHJlZyk7DQogCWFtZGdwdV9yaW5nX3dyaXRlKHJpbmcsIDApOw0K
IAlhbWRncHVfcmluZ193cml0ZShyaW5nLCBsb3dlcl8zMl9iaXRzKGFkZXYtPndiLmdwdV9hZGRy
ICsNCi0JCQkJa2lxLT5yZWdfdmFsX29mZnMgKiA0KSk7DQorCQkJCXJlZ192YWxfb2ZmcyAqIDQp
KTsNCiAJYW1kZ3B1X3Jpbmdfd3JpdGUocmluZywgdXBwZXJfMzJfYml0cyhhZGV2LT53Yi5ncHVf
YWRkciArDQotCQkJCWtpcS0+cmVnX3ZhbF9vZmZzICogNCkpOw0KKwkJCQlyZWdfdmFsX29mZnMg
KiA0KSk7DQogfQ0KIA0KIHN0YXRpYyB2b2lkIGdmeF92MTBfMF9yaW5nX2VtaXRfd3JlZyhzdHJ1
Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IHJlZywgZGlmZiAtLWdpdCBhL2RyaXZlcnMv
Z3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92OF8wLmMgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdw
dS9nZnhfdjhfMC5jDQppbmRleCBmYzZjMmYyYmM3NmMuLmJkYmQ5MmQ0ZmU0NSAxMDA2NDQNCi0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92OF8wLmMNCisrKyBiL2RyaXZlcnMv
Z3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92OF8wLmMNCkBAIC02MzgzLDEwICs2MzgzLDEwIEBAIHN0
YXRpYyB2b2lkIGdmeF92OF8wX3JpbmdfZW1pdF9wYXRjaF9jb25kX2V4ZWMoc3RydWN0IGFtZGdw
dV9yaW5nICpyaW5nLCB1bnNpZ25lDQogCQlyaW5nLT5yaW5nW29mZnNldF0gPSAocmluZy0+cmlu
Z19zaXplID4+IDIpIC0gb2Zmc2V0ICsgY3VyOyAgfQ0KIA0KLXN0YXRpYyB2b2lkIGdmeF92OF8w
X3JpbmdfZW1pdF9ycmVnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgcmVnKQ0K
K3N0YXRpYyB2b2lkIGdmeF92OF8wX3JpbmdfZW1pdF9ycmVnKHN0cnVjdCBhbWRncHVfcmluZyAq
cmluZywgdWludDMyX3QgcmVnLA0KKwkJCQkgICAgdWludDMyX3QgcmVnX3ZhbF9vZmZzKQ0KIHsN
CiAJc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSByaW5nLT5hZGV2Ow0KLQlzdHJ1Y3QgYW1k
Z3B1X2tpcSAqa2lxID0gJmFkZXYtPmdmeC5raXE7DQogDQogCWFtZGdwdV9yaW5nX3dyaXRlKHJp
bmcsIFBBQ0tFVDMoUEFDS0VUM19DT1BZX0RBVEEsIDQpKTsNCiAJYW1kZ3B1X3Jpbmdfd3JpdGUo
cmluZywgMCB8CS8qIHNyYzogcmVnaXN0ZXIqLw0KQEAgLTYzOTUsOSArNjM5NSw5IEBAIHN0YXRp
YyB2b2lkIGdmeF92OF8wX3JpbmdfZW1pdF9ycmVnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywg
dWludDMyX3QgcmVnKQ0KIAlhbWRncHVfcmluZ193cml0ZShyaW5nLCByZWcpOw0KIAlhbWRncHVf
cmluZ193cml0ZShyaW5nLCAwKTsNCiAJYW1kZ3B1X3Jpbmdfd3JpdGUocmluZywgbG93ZXJfMzJf
Yml0cyhhZGV2LT53Yi5ncHVfYWRkciArDQotCQkJCWtpcS0+cmVnX3ZhbF9vZmZzICogNCkpOw0K
KwkJCQlyZWdfdmFsX29mZnMgKiA0KSk7DQogCWFtZGdwdV9yaW5nX3dyaXRlKHJpbmcsIHVwcGVy
XzMyX2JpdHMoYWRldi0+d2IuZ3B1X2FkZHIgKw0KLQkJCQlraXEtPnJlZ192YWxfb2ZmcyAqIDQp
KTsNCisJCQkJcmVnX3ZhbF9vZmZzICogNCkpOw0KIH0NCiANCiBzdGF0aWMgdm9pZCBnZnhfdjhf
MF9yaW5nX2VtaXRfd3JlZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IHJlZywg
ZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92OV8wLmMgYi9kcml2
ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9nZnhfdjlfMC5jDQppbmRleCA4NGZjZjg0MjMxNmQuLmY3
ZGQxMDM2OTg2ZSAxMDA2NDQNCi0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92
OV8wLmMNCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dmeF92OV8wLmMNCkBAIC00
MDQyLDE0ICs0MDQyLDIwIEBAIHN0YXRpYyBpbnQgZ2Z4X3Y5XzBfc29mdF9yZXNldCh2b2lkICpo
YW5kbGUpICBzdGF0aWMgdWludDY0X3QgZ2Z4X3Y5XzBfa2lxX3JlYWRfY2xvY2soc3RydWN0IGFt
ZGdwdV9kZXZpY2UgKmFkZXYpICB7DQogCXNpZ25lZCBsb25nIHIsIGNudCA9IDA7DQotCXVuc2ln
bmVkIGxvbmcgZmxhZ3M7DQotCXVpbnQzMl90IHNlcTsNCisJdWludDMyX3Qgc2VxLCByZWdfdmFs
X29mZnM7DQorCXVpbnQ2NF90IHZhbHVlID0gMDsNCiAJc3RydWN0IGFtZGdwdV9raXEgKmtpcSA9
ICZhZGV2LT5nZngua2lxOw0KIAlzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcgPSAma2lxLT5yaW5n
Ow0KIA0KIAlCVUdfT04oIXJpbmctPmZ1bmNzLT5lbWl0X3JyZWcpOw0KIA0KLQlzcGluX2xvY2tf
aXJxc2F2ZSgma2lxLT5yaW5nX2xvY2ssIGZsYWdzKTsNCisJciA9IGFtZGdwdV9nZnhfa2lxX2xv
Y2soa2lxLCB0cnVlKTsNCisJaWYgKHIpIHsNCisJCXByX2VycigiZmFpbGVkIHRvIGxvY2sga2lx
XG4iKTsNCisJCWdvdG8gZmFpbGVkX2tpcV9leGl0Ow0KKwl9DQorDQorCWFtZGdwdV9nZnhfa2lx
X2NvbnN1bWUoa2lxLCAmcmVnX3ZhbF9vZmZzKTsNCiAJYW1kZ3B1X3JpbmdfYWxsb2MocmluZywg
MzIpOw0KIAlhbWRncHVfcmluZ193cml0ZShyaW5nLCBQQUNLRVQzKFBBQ0tFVDNfQ09QWV9EQVRB
LCA0KSk7DQogCWFtZGdwdV9yaW5nX3dyaXRlKHJpbmcsIDkgfAkvKiBzcmM6IHJlZ2lzdGVyKi8N
CkBAIC00MDU5LDEyICs0MDY1LDEyIEBAIHN0YXRpYyB1aW50NjRfdCBnZnhfdjlfMF9raXFfcmVh
ZF9jbG9jayhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldikNCiAJYW1kZ3B1X3Jpbmdfd3JpdGUo
cmluZywgMCk7DQogCWFtZGdwdV9yaW5nX3dyaXRlKHJpbmcsIDApOw0KIAlhbWRncHVfcmluZ193
cml0ZShyaW5nLCBsb3dlcl8zMl9iaXRzKGFkZXYtPndiLmdwdV9hZGRyICsNCi0JCQkJa2lxLT5y
ZWdfdmFsX29mZnMgKiA0KSk7DQorCQkJCXJlZ192YWxfb2ZmcyAqIDQpKTsNCiAJYW1kZ3B1X3Jp
bmdfd3JpdGUocmluZywgdXBwZXJfMzJfYml0cyhhZGV2LT53Yi5ncHVfYWRkciArDQotCQkJCWtp
cS0+cmVnX3ZhbF9vZmZzICogNCkpOw0KKwkJCQlyZWdfdmFsX29mZnMgKiA0KSk7DQogCWFtZGdw
dV9mZW5jZV9lbWl0X3BvbGxpbmcocmluZywgJnNlcSk7DQogCWFtZGdwdV9yaW5nX2NvbW1pdChy
aW5nKTsNCi0Jc3Bpbl91bmxvY2tfaXJxcmVzdG9yZSgma2lxLT5yaW5nX2xvY2ssIGZsYWdzKTsN
CisJYW1kZ3B1X2dmeF9raXFfdW5sb2NrKGtpcSk7DQogDQogCXIgPSBhbWRncHVfZmVuY2Vfd2Fp
dF9wb2xsaW5nKHJpbmcsIHNlcSwgTUFYX0tJUV9SRUdfV0FJVCk7DQogDQpAQCAtNDA4OCwxMCAr
NDA5NCwxNCBAQCBzdGF0aWMgdWludDY0X3QgZ2Z4X3Y5XzBfa2lxX3JlYWRfY2xvY2soc3RydWN0
IGFtZGdwdV9kZXZpY2UgKmFkZXYpDQogCWlmIChjbnQgPiBNQVhfS0lRX1JFR19UUlkpDQogCQln
b3RvIGZhaWxlZF9raXFfcmVhZDsNCiANCi0JcmV0dXJuICh1aW50NjRfdClhZGV2LT53Yi53Yltr
aXEtPnJlZ192YWxfb2Zmc10gfA0KLQkJKHVpbnQ2NF90KWFkZXYtPndiLndiW2tpcS0+cmVnX3Zh
bF9vZmZzICsgMSBdIDw8IDMyVUxMOw0KKwl2YWx1ZSA9ICh1aW50NjRfdClhZGV2LT53Yi53Ylty
ZWdfdmFsX29mZnNdIHwNCisJCSh1aW50NjRfdClhZGV2LT53Yi53YltyZWdfdmFsX29mZnMgKyAx
IF0gPDwgMzJVTEw7DQogDQorCWFtZGdwdV9nZnhfa2lxX3Jlc3RvcmUoa2lxLCAmcmVnX3ZhbF9v
ZmZzKTsNCisJcmV0dXJuIHZhbHVlOw0KIGZhaWxlZF9raXFfcmVhZDoNCisJYW1kZ3B1X2dmeF9r
aXFfcmVzdG9yZShraXEsICZyZWdfdmFsX29mZnMpOw0KK2ZhaWxlZF9raXFfZXhpdDoNCiAJcHJf
ZXJyKCJmYWlsZWQgdG8gcmVhZCBncHUgY2xvY2tcbiIpOw0KIAlyZXR1cm4gfjA7DQogfQ0KQEAg
LTU0ODIsMTAgKzU0OTIsMTAgQEAgc3RhdGljIHZvaWQgZ2Z4X3Y5XzBfcmluZ19lbWl0X3BhdGNo
X2NvbmRfZXhlYyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVuc2lnbmUNCiAJCXJpbmctPnJp
bmdbb2Zmc2V0XSA9IChyaW5nLT5yaW5nX3NpemU+PjIpIC0gb2Zmc2V0ICsgY3VyOyAgfQ0KIA0K
LXN0YXRpYyB2b2lkIGdmeF92OV8wX3JpbmdfZW1pdF9ycmVnKHN0cnVjdCBhbWRncHVfcmluZyAq
cmluZywgdWludDMyX3QgcmVnKQ0KK3N0YXRpYyB2b2lkIGdmeF92OV8wX3JpbmdfZW1pdF9ycmVn
KHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgcmVnLA0KKwkJCQkgICAgdWludDMy
X3QgcmVnX3ZhbF9vZmZzKQ0KIHsNCiAJc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSByaW5n
LT5hZGV2Ow0KLQlzdHJ1Y3QgYW1kZ3B1X2tpcSAqa2lxID0gJmFkZXYtPmdmeC5raXE7DQogDQog
CWFtZGdwdV9yaW5nX3dyaXRlKHJpbmcsIFBBQ0tFVDMoUEFDS0VUM19DT1BZX0RBVEEsIDQpKTsN
CiAJYW1kZ3B1X3Jpbmdfd3JpdGUocmluZywgMCB8CS8qIHNyYzogcmVnaXN0ZXIqLw0KQEAgLTU0
OTQsOSArNTUwNCw5IEBAIHN0YXRpYyB2b2lkIGdmeF92OV8wX3JpbmdfZW1pdF9ycmVnKHN0cnVj
dCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgcmVnKQ0KIAlhbWRncHVfcmluZ193cml0ZShy
aW5nLCByZWcpOw0KIAlhbWRncHVfcmluZ193cml0ZShyaW5nLCAwKTsNCiAJYW1kZ3B1X3Jpbmdf
d3JpdGUocmluZywgbG93ZXJfMzJfYml0cyhhZGV2LT53Yi5ncHVfYWRkciArDQotCQkJCWtpcS0+
cmVnX3ZhbF9vZmZzICogNCkpOw0KKwkJCQlyZWdfdmFsX29mZnMgKiA0KSk7DQogCWFtZGdwdV9y
aW5nX3dyaXRlKHJpbmcsIHVwcGVyXzMyX2JpdHMoYWRldi0+d2IuZ3B1X2FkZHIgKw0KLQkJCQlr
aXEtPnJlZ192YWxfb2ZmcyAqIDQpKTsNCisJCQkJcmVnX3ZhbF9vZmZzICogNCkpOw0KIH0NCiAN
CiBzdGF0aWMgdm9pZCBnZnhfdjlfMF9yaW5nX2VtaXRfd3JlZyhzdHJ1Y3QgYW1kZ3B1X3Jpbmcg
KnJpbmcsIHVpbnQzMl90IHJlZywgZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1k
Z3B1L2dtY192MTBfMC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvZ21jX3YxMF8wLmMN
CmluZGV4IDMwYjc1ZDc5ZWZkYi4uNmI0ZGMwZWQ0ZmZmIDEwMDY0NA0KLS0tIGEvZHJpdmVycy9n
cHUvZHJtL2FtZC9hbWRncHUvZ21jX3YxMF8wLmMNCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQv
YW1kZ3B1L2dtY192MTBfMC5jDQpAQCAtNDIyLDIwICs0MjIsMjggQEAgc3RhdGljIGludCBnbWNf
djEwXzBfZmx1c2hfZ3B1X3RsYl9wYXNpZChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwNCiAJ
c3RydWN0IGFtZGdwdV9raXEgKmtpcSA9ICZhZGV2LT5nZngua2lxOw0KIA0KIAlpZiAoYW1kZ3B1
X2VtdV9tb2RlID09IDAgJiYgcmluZy0+c2NoZWQucmVhZHkpIHsNCi0JCXNwaW5fbG9jaygmYWRl
di0+Z2Z4LmtpcS5yaW5nX2xvY2spOw0KKwkJciA9IGFtZGdwdV9nZnhfa2lxX2xvY2soa2lxLCBm
YWxzZSk7DQorCQlpZiAocikgew0KKwkJCXByX2VycigiZmFpbGVkIHRvIGxvY2sga2lxXG4iKTsN
CisJCQlyZXR1cm4gLUVUSU1FOw0KKwkJfQ0KKw0KIAkJLyogMiBkd29yZHMgZmx1c2ggKyA4IGR3
b3JkcyBmZW5jZSAqLw0KIAkJYW1kZ3B1X3JpbmdfYWxsb2MocmluZywga2lxLT5wbWYtPmludmFs
aWRhdGVfdGxic19zaXplICsgOCk7DQorCQlhbWRncHVfZ2Z4X2tpcV9jb25zdW1lKGtpcSwgTlVM
TCk7DQogCQlraXEtPnBtZi0+a2lxX2ludmFsaWRhdGVfdGxicyhyaW5nLA0KIAkJCQkJcGFzaWQs
IGZsdXNoX3R5cGUsIGFsbF9odWIpOw0KIAkJYW1kZ3B1X2ZlbmNlX2VtaXRfcG9sbGluZyhyaW5n
LCAmc2VxKTsNCiAJCWFtZGdwdV9yaW5nX2NvbW1pdChyaW5nKTsNCi0JCXNwaW5fdW5sb2NrKCZh
ZGV2LT5nZngua2lxLnJpbmdfbG9jayk7DQorCQlhbWRncHVfZ2Z4X2tpcV91bmxvY2soa2lxKTsN
CiAJCXIgPSBhbWRncHVfZmVuY2Vfd2FpdF9wb2xsaW5nKHJpbmcsIHNlcSwgYWRldi0+dXNlY190
aW1lb3V0KTsNCiAJCWlmIChyIDwgMSkgew0KIAkJCURSTV9FUlJPUigid2FpdCBmb3Iga2lxIGZl
bmNlIGVycm9yOiAlbGQuXG4iLCByKTsNCisJCQlhbWRncHVfZ2Z4X2tpcV9yZXN0b3JlKGtpcSwg
ZmFsc2UpOw0KIAkJCXJldHVybiAtRVRJTUU7DQogCQl9DQogDQorCQlhbWRncHVfZ2Z4X2tpcV9y
ZXN0b3JlKGtpcSwgTlVMTCk7DQogCQlyZXR1cm4gMDsNCiAJfQ0KIA0KZGlmZiAtLWdpdCBhL2Ry
aXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dtY192OV8wLmMgYi9kcml2ZXJzL2dwdS9kcm0vYW1k
L2FtZGdwdS9nbWNfdjlfMC5jDQppbmRleCBmZWNkYmM0NzE5ODMuLjYyMzg3MDJjODBiNCAxMDA2
NDQNCi0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dtY192OV8wLmMNCisrKyBiL2Ry
aXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2dtY192OV8wLmMNCkBAIC02MTMsNyArNjEzLDEzIEBA
IHN0YXRpYyBpbnQgZ21jX3Y5XzBfZmx1c2hfZ3B1X3RsYl9wYXNpZChzdHJ1Y3QgYW1kZ3B1X2Rl
dmljZSAqYWRldiwNCiAJCWlmICh2ZWdhMjBfeGdtaV93YSkNCiAJCQluZHcgKz0ga2lxLT5wbWYt
PmludmFsaWRhdGVfdGxic19zaXplOw0KIA0KLQkJc3Bpbl9sb2NrKCZhZGV2LT5nZngua2lxLnJp
bmdfbG9jayk7DQorCQlyID0gYW1kZ3B1X2dmeF9raXFfbG9jayhraXEsIGZhbHNlKTsNCisJCWlm
IChyKSB7DQorCQkJcHJfZXJyKCJmYWlsZWQgdG8gbG9jayBraXFcbiIpOw0KKwkJCXJldHVybiAt
RVRJTUU7DQorCQl9DQorDQorCQlhbWRncHVfZ2Z4X2tpcV9jb25zdW1lKGtpcSwgTlVMTCk7DQog
CQkvKiAyIGR3b3JkcyBmbHVzaCArIDggZHdvcmRzIGZlbmNlICovDQogCQlhbWRncHVfcmluZ19h
bGxvYyhyaW5nLCBuZHcpOw0KIAkJaWYgKHZlZ2EyMF94Z21pX3dhKQ0KQEAgLTYyMywxMyArNjI5
LDE1IEBAIHN0YXRpYyBpbnQgZ21jX3Y5XzBfZmx1c2hfZ3B1X3RsYl9wYXNpZChzdHJ1Y3QgYW1k
Z3B1X2RldmljZSAqYWRldiwNCiAJCQkJCXBhc2lkLCBmbHVzaF90eXBlLCBhbGxfaHViKTsNCiAJ
CWFtZGdwdV9mZW5jZV9lbWl0X3BvbGxpbmcocmluZywgJnNlcSk7DQogCQlhbWRncHVfcmluZ19j
b21taXQocmluZyk7DQotCQlzcGluX3VubG9jaygmYWRldi0+Z2Z4LmtpcS5yaW5nX2xvY2spOw0K
KwkJYW1kZ3B1X2dmeF9raXFfdW5sb2NrKGtpcSk7DQogCQlyID0gYW1kZ3B1X2ZlbmNlX3dhaXRf
cG9sbGluZyhyaW5nLCBzZXEsIGFkZXYtPnVzZWNfdGltZW91dCk7DQogCQlpZiAociA8IDEpIHsN
CiAJCQlEUk1fRVJST1IoIndhaXQgZm9yIGtpcSBmZW5jZSBlcnJvcjogJWxkLlxuIiwgcik7DQor
CQkJYW1kZ3B1X2dmeF9raXFfcmVzdG9yZShraXEsIE5VTEwpOw0KIAkJCXJldHVybiAtRVRJTUU7
DQogCQl9DQogDQorCQlhbWRncHVfZ2Z4X2tpcV9yZXN0b3JlKGtpcSwgTlVMTCk7DQogCQlyZXR1
cm4gMDsNCiAJfQ0KIA0KLS0NCjIuMTcuMQ0KDQpfX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fXwphbWQtZ2Z4IG1haWxpbmcgbGlzdAphbWQtZ2Z4QGxpc3RzLmZy
ZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9tYWlsbWFuL2xpc3Rp
bmZvL2FtZC1nZngK
