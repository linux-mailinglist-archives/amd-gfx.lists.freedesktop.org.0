Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 3BAF595C13
	for <lists+amd-gfx@lfdr.de>; Tue, 20 Aug 2019 12:16:22 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id BB3926E28B;
	Tue, 20 Aug 2019 10:16:20 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from NAM05-BY2-obe.outbound.protection.outlook.com
 (mail-eopbgr710045.outbound.protection.outlook.com [40.107.71.45])
 by gabe.freedesktop.org (Postfix) with ESMTPS id CBDAC6E28B
 for <amd-gfx@lists.freedesktop.org>; Tue, 20 Aug 2019 10:16:18 +0000 (UTC)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=TIPE3VqWRX7+tZyMk5sIHkEfBkTeqzax1UF3g+6K/9UpcSuPE94cvcDkoAZjtVLo9f9UcdRbCU7rjGsL0xV0MtjzHfLTUNGUCthNyhowDAhoEyIJ8VY2yi7E2FgpLjSZdNRR04sekeYC7YL4KSZqFI7gZC/AGINv4pI/OvmWsWpoZb1R+2PGBQmmm1a+7ok0TDFE+EQ0I35SvMiD1hk+2iiMS8HEVMd6AEXwhyJT7YMzO0hhZGcHa8/M5eKiagXbWdX7JeG/tCp8wzFzggIw3XVD33fOm2cQX9q2A0R7e4fDyP6CW3c3Lyw+3S6HoChs4u4eW3L9dtytLG0c1iQvBg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com; 
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=oHSkRu+GAscFmW6XlCF/Qnr+QjdZvN7BfxCCzmShTg8=;
 b=C3tCP+p2kFJtYbHRuUQoG6WBIq9xuEar2IAuX5vyAWQo/vQwzIDgnuQf/hiJbtoxr9JQ2QJFgYktfljZGuFnQkr4sY9NM1US8XJ+45IKYtf0Y8dduVtBJ6JykQzXvyC0R8r2sY1MpeuJSeC+Lk8MEiazdHPo8knD7mgnZYQmVcEGTBgLPRJjORDX1VIB4nzKlZlWF1E0HSxz7ez5rrbTHeQ8XH1icLs9Kj6QNDxe36wJoHALrptzQ9pOLJOi8oMwq26N74e+6/+S1dBaqA0n9oWEDEIUS/ZN4OxCBJMXZPAB/Uz/AiRN/vMNK31RHnnT0AGRTfDV1Hc3YgbDPTcU1A==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
Received: from MN2PR12MB3344.namprd12.prod.outlook.com (20.178.241.74) by
 MN2PR12MB3055.namprd12.prod.outlook.com (20.178.244.151) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.2178.16; Tue, 20 Aug 2019 10:16:17 +0000
Received: from MN2PR12MB3344.namprd12.prod.outlook.com
 ([fe80::6cae:3314:7799:3077]) by MN2PR12MB3344.namprd12.prod.outlook.com
 ([fe80::6cae:3314:7799:3077%6]) with mapi id 15.20.2178.018; Tue, 20 Aug 2019
 10:16:17 +0000
From: "Quan, Evan" <Evan.Quan@amd.com>
To: "Wang, Kevin(Yang)" <Kevin1.Wang@amd.com>, "amd-gfx@lists.freedesktop.org"
 <amd-gfx@lists.freedesktop.org>
Subject: Re: [PATCH] drm/amd/powerplay: add smu_map_helper function to unified
 map function
Thread-Topic: [PATCH] drm/amd/powerplay: add smu_map_helper function to
 unified map function
Thread-Index: AQHVVyyRwHQvuz8YRU2ddvY739EJr6cD0DBn
Date: Tue, 20 Aug 2019 10:16:17 +0000
Message-ID: <MN2PR12MB334484F5217CE6E9269600C8E4AB0@MN2PR12MB3344.namprd12.prod.outlook.com>
References: <20190820075445.18882-1-kevin1.wang@amd.com>
In-Reply-To: <20190820075445.18882-1-kevin1.wang@amd.com>
Accept-Language: en-US, zh-CN
Content-Language: zh-CN
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
x-originating-ip: [114.87.114.129]
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: 05bb80d1-938b-44f8-ed50-08d725577044
x-ms-office365-filtering-ht: Tenant
x-microsoft-antispam: BCL:0; PCL:0;
 RULEID:(2390118)(7020095)(4652040)(8989299)(4534185)(4627221)(201703031133081)(201702281549075)(8990200)(5600148)(711020)(4605104)(1401327)(4618075)(2017052603328)(7193020);
 SRVR:MN2PR12MB3055; 
x-ms-traffictypediagnostic: MN2PR12MB3055:
x-ms-exchange-purlcount: 1
x-ms-exchange-transport-forked: True
x-microsoft-antispam-prvs: <MN2PR12MB30552D6FAD61B536155EE4E9E4AB0@MN2PR12MB3055.namprd12.prod.outlook.com>
x-ms-oob-tlc-oobclassifiers: OLM:949;
x-forefront-prvs: 013568035E
x-forefront-antispam-report: SFV:NSPM;
 SFS:(10009020)(4636009)(346002)(376002)(136003)(39860400002)(396003)(366004)(199004)(189003)(66066001)(66446008)(64756008)(66556008)(66476007)(66946007)(74316002)(256004)(71190400001)(71200400001)(2906002)(6436002)(2501003)(4326008)(229853002)(86362001)(7736002)(76116006)(91956017)(14454004)(6246003)(966005)(52536014)(478600001)(110136005)(54906003)(26005)(55016002)(102836004)(186003)(446003)(11346002)(5660300002)(476003)(486006)(316002)(6116002)(33656002)(6306002)(54896002)(606006)(8936002)(25786009)(9686003)(3846002)(76176011)(81166006)(81156014)(8676002)(236005)(30864003)(6506007)(7696005)(99286004)(53946003)(53936002)(579004);
 DIR:OUT; SFP:1101; SCL:1; SRVR:MN2PR12MB3055;
 H:MN2PR12MB3344.namprd12.prod.outlook.com; FPR:; SPF:None; LANG:en;
 PTR:InfoNoRecords; A:1; MX:1; 
received-spf: None (protection.outlook.com: amd.com does not designate
 permitted sender hosts)
x-ms-exchange-senderadcheck: 1
x-microsoft-antispam-message-info: Z3XB1MXi3asDNz4gwxnpoPPONABuWGRvgmnP8OyctqJ1s7nj/a9DvNsE40L3r3hm7yVOrRg0PXu97KROVHDlIEWhNA64FjVuz80PYHOg0rF8bhUX9MEkrIh1mGH6MFB4eTKkk3zd2myGveTlLme9+6AKEhXuKbQonkm4OmMpM7mr0KknTuEddEL4h4H3a9mocEJX3EIl5n7Re/eUeHT8P00wUr1o80qdNM2xhUxAs4bzVH++Bl3csmWuNZDSrFv7W39qpXpBMZSpXYrVqcYv0niKDghSaGhQg3gLVnE+ZWm8D7x9TXEk3dUqzuE7HH8r8iV2X0ss5Dt7kT6lDVddn4mnhNGFLEl763L3uc/4k81OxEOofLpbk8nj3IUePxx4PjKam980Yrs/hV+oUg+PSKdG2lKMXdq6d3aETyPZt+A=
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 05bb80d1-938b-44f8-ed50-08d725577044
X-MS-Exchange-CrossTenant-originalarrivaltime: 20 Aug 2019 10:16:17.0883 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: CAYA/Bu3EGJM3guPqXypbYObNqB9MqhXshPXzvqZo5tWMS3ISlDFjzHuf/T/j9+N
X-MS-Exchange-Transport-CrossTenantHeadersStamped: MN2PR12MB3055
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=oHSkRu+GAscFmW6XlCF/Qnr+QjdZvN7BfxCCzmShTg8=;
 b=r034uYcrpegqZc8SgpiSqOTn0UHLbPtGWd/IYGqQxMK2aQMrmZ8eM3ZHhbTe63tmgG9CbE81Djahq5F4hgFEWJm4u/duaCjNFE0B8oYOUdQWgg0G0yw0bdAmgmTSCUscfXwWgMV6VPu6iEFl4afhHvafgNbG2adwudzZNWHAJig=
X-Mailman-Original-Authentication-Results: spf=none (sender IP is )
 smtp.mailfrom=Evan.Quan@amd.com; 
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: "Huang, Ray" <Ray.Huang@amd.com>, "Wang,
 Kevin\(Yang\)" <Kevin1.Wang@amd.com>
Content-Type: multipart/mixed; boundary="===============1353540583=="
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

--===============1353540583==
Content-Language: zh-CN
Content-Type: multipart/alternative;
	boundary="_000_MN2PR12MB334484F5217CE6E9269600C8E4AB0MN2PR12MB3344namp_"

--_000_MN2PR12MB334484F5217CE6E9269600C8E4AB0MN2PR12MB3344namp_
Content-Type: text/plain; charset="gb2312"
Content-Transfer-Encoding: base64

Q2FuIHdlIGhvbGQgb24gdGhlIGNvZGUgb3B0aW1pemF0aW9ucyBvciBjb2RlIHJlZmFjdG9yIHVu
dGlsIGFyY3R1cnVzIGFuZCByZW5pb3Igc3RhYmxpemVkPyBUaGUgY3VycmVudCBjb2RlIGlzIGFs
cmVhZHkgYSBsaXR0bGUgaW4gY2hhb3MuIFdlIHNob3VsZCBub3QgaW50cm9kdWNlIG1vcmUuDQoN
ClJlZ2FyZHMsDQpFdmFuDQoNCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fDQq3orz+
yMs6IGFtZC1nZnggPGFtZC1nZngtYm91bmNlc0BsaXN0cy5mcmVlZGVza3RvcC5vcmc+ILT6se0g
V2FuZywgS2V2aW4oWWFuZykgPEtldmluMS5XYW5nQGFtZC5jb20+DQq3osvNyrG85DogVHVlc2Rh
eSwgQXVndXN0IDIwLCAyMDE5IDM6NTU6MDEgUE0NCsrVvP7IyzogYW1kLWdmeEBsaXN0cy5mcmVl
ZGVza3RvcC5vcmcgPGFtZC1nZnhAbGlzdHMuZnJlZWRlc2t0b3Aub3JnPg0Ks63LzTogSHVhbmcs
IFJheSA8UmF5Lkh1YW5nQGFtZC5jb20+OyBXYW5nLCBLZXZpbihZYW5nKSA8S2V2aW4xLldhbmdA
YW1kLmNvbT4NCtb3zOI6IFtQQVRDSF0gZHJtL2FtZC9wb3dlcnBsYXk6IGFkZCBzbXVfbWFwX2hl
bHBlciBmdW5jdGlvbiB0byB1bmlmaWVkIG1hcCBmdW5jdGlvbg0KDQoxLiBhZGQgc211X21hcCB0
byByZXBsYWNlIG9sZCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5nLg0KKG5leHQgZ2VuZXJhdGlv
biBvZiBzbXUgaXAgYWxzbyBuZWVkIHRoaXMgbG9naWMsIGVnOiBzbXUxMiAxMyAxNC4uLikNCjIu
IHVzZSBzbXVfbWFwX2hlbHBlciBmdW5jdGlvbiB0byB1bmlmaWVkIG1hcCBjb2RlIGxvZ2ljIGlu
IHNtdQ0KDQpTaWduZWQtb2ZmLWJ5OiBLZXZpbiBXYW5nIDxrZXZpbjEud2FuZ0BhbWQuY29tPg0K
LS0tDQogZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvYW1kZ3B1X3NtdS5jICAgIHwgIDE5
ICsrKysNCiBkcml2ZXJzL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9hcmN0dXJ1c19wcHQuYyAgfCAx
MDIgKysrKy0tLS0tLS0tLS0tLS0tDQogLi4uL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9pbmMvYW1k
Z3B1X3NtdS5oICAgIHwgICA3ICsrDQogZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvaW5j
L3NtdV92MTFfMC5oIHwgIDE1ICstLQ0KIGRyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25h
dmkxMF9wcHQuYyAgICB8ICA5NyArKysrLS0tLS0tLS0tLS0tLQ0KIGRyaXZlcnMvZ3B1L2RybS9h
bWQvcG93ZXJwbGF5L3ZlZ2EyMF9wcHQuYyAgICB8ICA5NiArKysrLS0tLS0tLS0tLS0tLQ0KIDYg
ZmlsZXMgY2hhbmdlZCwgODYgaW5zZXJ0aW9ucygrKSwgMjUwIGRlbGV0aW9ucygtKQ0KDQpkaWZm
IC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvYW1kZ3B1X3NtdS5jIGIvZHJp
dmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvYW1kZ3B1X3NtdS5jDQppbmRleCA0ZGY3ZmI2ZWFm
M2MuLjllMmE0NWZmMjNjNCAxMDA2NDQNCi0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJw
bGF5L2FtZGdwdV9zbXUuYw0KKysrIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvYW1k
Z3B1X3NtdS5jDQpAQCAtNTYsNiArNTYsMjUgQEAgY29uc3QgY2hhciAqc211X2dldF9mZWF0dXJl
X25hbWUoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIGVudW0gc211X2ZlYXR1cmVfbWFzaw0KICAg
ICAgICAgcmV0dXJuIF9fc211X2ZlYXR1cmVfbmFtZXNbZmVhdHVyZV07DQogfQ0KDQoraW50IHNt
dV9tYXBfaGVscGVyKHN0cnVjdCBzbXVfY29udGV4dCAqc211LCBzdHJ1Y3Qgc211X21hcCAqbWFw
X3NyYywNCisgICAgICAgICAgICAgICAgICB1aW50MzJfdCBtYXhfaW5kZXgsIHVpbnQzMl90IGlu
ZGV4KQ0KK3sNCisgICAgICAgc3RydWN0IHNtdV9tYXAgKm1hcCA9IE5VTEw7DQorDQorICAgICAg
IGlmICghbWFwX3NyYykNCisgICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCisNCisgICAg
ICAgaWYgKGluZGV4ID49IG1heF9pbmRleCkNCisgICAgICAgICAgICAgICByZXR1cm4gLUVJTlZB
TDsNCisNCisgICAgICAgbWFwID0gJm1hcF9zcmNbaW5kZXhdOw0KKyAgICAgICBpZiAoIW1hcC0+
dmFsaWQpDQorICAgICAgICAgICAgICAgcmV0dXJuIC1FSU5WQUw7DQorDQorICAgICAgIHJldHVy
biBtYXAtPnZhbHVlOw0KK30NCisNCisNCiBzaXplX3Qgc211X3N5c19nZXRfcHBfZmVhdHVyZV9t
YXNrKHN0cnVjdCBzbXVfY29udGV4dCAqc211LCBjaGFyICpidWYpDQogew0KICAgICAgICAgc2l6
ZV90IHNpemUgPSAwOw0KZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5
L2FyY3R1cnVzX3BwdC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvYXJjdHVydXNf
cHB0LmMNCmluZGV4IDA0YTI2MDcyY2Y0MC4uMzQxNmRjYjVmNDBmIDEwMDY0NA0KLS0tIGEvZHJp
dmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvYXJjdHVydXNfcHB0LmMNCisrKyBiL2RyaXZlcnMv
Z3B1L2RybS9hbWQvcG93ZXJwbGF5L2FyY3R1cnVzX3BwdC5jDQpAQCAtNDIsOSArNDIsOSBAQA0K
ICNkZWZpbmUgQ1RGX09GRlNFVF9IQk0gICAgICAgICAgICAgICAgICA1DQoNCiAjZGVmaW5lIE1T
R19NQVAobXNnLCBpbmRleCkgXA0KLSAgICAgICBbU01VX01TR18jI21zZ10gPSB7MSwgKGluZGV4
KX0NCisgICAgICAgW1NNVV9NU0dfIyNtc2ddID0ge3RydWUsIChpbmRleCl9DQogI2RlZmluZSBB
UkNUVVJVU19GRUFfTUFQKHNtdV9mZWF0dXJlLCBhcmN0dXJ1c19mZWF0dXJlKSBcDQotICAgICAg
IFtzbXVfZmVhdHVyZV0gPSB7MSwgKGFyY3R1cnVzX2ZlYXR1cmUpfQ0KKyAgICAgICBbc211X2Zl
YXR1cmVdID0ge3RydWUsIChhcmN0dXJ1c19mZWF0dXJlKX0NCg0KICNkZWZpbmUgU01VX0ZFQVRV
UkVTX0xPV19NQVNLICAgICAgICAweDAwMDAwMDAwRkZGRkZGRkYNCiAjZGVmaW5lIFNNVV9GRUFU
VVJFU19MT1dfU0hJRlQgICAgICAgMA0KQEAgLTYzLDcgKzYzLDcgQEANCiAvKiBwb3NzaWJsZSBm
cmVxdWVuY3kgZHJpZnQgKDFNaHopICovDQogI2RlZmluZSBFUFNJTE9OICAgICAgICAgICAgICAg
ICAgICAgICAgIDENCg0KLXN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBh
cmN0dXJ1c19tZXNzYWdlX21hcFtTTVVfTVNHX01BWF9DT1VOVF0gPSB7DQorc3RhdGljIHN0cnVj
dCBzbXVfbWFwIGFyY3R1cnVzX21lc3NhZ2VfbWFwW1NNVV9NU0dfTUFYX0NPVU5UXSA9IHsNCiAg
ICAgICAgIE1TR19NQVAoVGVzdE1lc3NhZ2UsICAgICAgICAgICAgICAgICAgICAgICAgIFBQU01D
X01TR19UZXN0TWVzc2FnZSksDQogICAgICAgICBNU0dfTUFQKEdldFNtdVZlcnNpb24sICAgICAg
ICAgICAgICAgICAgICAgICBQUFNNQ19NU0dfR2V0U211VmVyc2lvbiksDQogICAgICAgICBNU0df
TUFQKEdldERyaXZlcklmVmVyc2lvbiwgICAgICAgICAgICAgICAgICBQUFNNQ19NU0dfR2V0RHJp
dmVySWZWZXJzaW9uKSwNCkBAIC0xMjMsNyArMTIzLDcgQEAgc3RhdGljIHN0cnVjdCBzbXVfMTFf
MF9jbW4yYWlzY19tYXBwaW5nIGFyY3R1cnVzX21lc3NhZ2VfbWFwW1NNVV9NU0dfTUFYX0NPVU5U
XQ0KICAgICAgICAgTVNHX01BUChTZXRNZW1vcnlDaGFubmVsRW5hYmxlLCAgICAgICAgICAgICAg
UFBTTUNfTVNHX1NldE1lbW9yeUNoYW5uZWxFbmFibGUpLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0
IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgYXJjdHVydXNfY2xrX21hcFtTTVVfQ0xLX0NPVU5U
XSA9IHsNCitzdGF0aWMgc3RydWN0IHNtdV9tYXAgYXJjdHVydXNfY2xrX21hcFtTTVVfQ0xLX0NP
VU5UXSA9IHsNCiAgICAgICAgIENMS19NQVAoR0ZYQ0xLLCBQUENMS19HRlhDTEspLA0KICAgICAg
ICAgQ0xLX01BUChTQ0xLLCAgIFBQQ0xLX0dGWENMSyksDQogICAgICAgICBDTEtfTUFQKFNPQ0NM
SywgUFBDTEtfU09DQ0xLKSwNCkBAIC0xMzQsNyArMTM0LDcgQEAgc3RhdGljIHN0cnVjdCBzbXVf
MTFfMF9jbW4yYWlzY19tYXBwaW5nIGFyY3R1cnVzX2Nsa19tYXBbU01VX0NMS19DT1VOVF0gPSB7
DQogICAgICAgICBDTEtfTUFQKFZDTEssIFBQQ0xLX1ZDTEspLA0KIH07DQoNCi1zdGF0aWMgc3Ry
dWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgYXJjdHVydXNfZmVhdHVyZV9tYXNrX21hcFtT
TVVfRkVBVFVSRV9DT1VOVF0gPSB7DQorc3RhdGljIHN0cnVjdCBzbXVfbWFwIGFyY3R1cnVzX2Zl
YXR1cmVfbWFza19tYXBbU01VX0ZFQVRVUkVfQ09VTlRdID0gew0KICAgICAgICAgRkVBX01BUChE
UE1fUFJFRkVUQ0hFUiksDQogICAgICAgICBGRUFfTUFQKERQTV9HRlhDTEspLA0KICAgICAgICAg
RkVBX01BUChEUE1fVUNMSyksDQpAQCAtMTYxLDcgKzE2MSw3IEBAIHN0YXRpYyBzdHJ1Y3Qgc211
XzExXzBfY21uMmFpc2NfbWFwcGluZyBhcmN0dXJ1c19mZWF0dXJlX21hc2tfbWFwW1NNVV9GRUFU
VVJFX0NPDQogICAgICAgICBGRUFfTUFQKFRFTVBfREVQRU5ERU5UX1ZNSU4pLA0KIH07DQoNCi1z
dGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgYXJjdHVydXNfdGFibGVfbWFw
W1NNVV9UQUJMRV9DT1VOVF0gPSB7DQorc3RhdGljIHN0cnVjdCBzbXVfbWFwIGFyY3R1cnVzX3Rh
YmxlX21hcFtTTVVfVEFCTEVfQ09VTlRdID0gew0KICAgICAgICAgVEFCX01BUChQUFRBQkxFKSwN
CiAgICAgICAgIFRBQl9NQVAoQVZGUyksDQogICAgICAgICBUQUJfTUFQKEFWRlNfUFNNX0RFQlVH
KSwNCkBAIC0xNzIsMTIgKzE3MiwxMiBAQCBzdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNj
X21hcHBpbmcgYXJjdHVydXNfdGFibGVfbWFwW1NNVV9UQUJMRV9DT1VOVF0gPSB7DQogICAgICAg
ICBUQUJfTUFQKE9WRVJEUklWRSksDQogfTsNCg0KLXN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21u
MmFpc2NfbWFwcGluZyBhcmN0dXJ1c19wd3Jfc3JjX21hcFtTTVVfUE9XRVJfU09VUkNFX0NPVU5U
XSA9IHsNCitzdGF0aWMgc3RydWN0IHNtdV9tYXAgYXJjdHVydXNfcHdyX3NyY19tYXBbU01VX1BP
V0VSX1NPVVJDRV9DT1VOVF0gPSB7DQogICAgICAgICBQV1JfTUFQKEFDKSwNCiAgICAgICAgIFBX
Ul9NQVAoREMpLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBp
bmcgYXJjdHVydXNfd29ya2xvYWRfbWFwW1BQX1NNQ19QT1dFUl9QUk9GSUxFX0NPVU5UXSA9IHsN
CitzdGF0aWMgc3RydWN0IHNtdV9tYXAgYXJjdHVydXNfd29ya2xvYWRfbWFwW1BQX1NNQ19QT1dF
Ul9QUk9GSUxFX0NPVU5UXSA9IHsNCiAgICAgICAgIFdPUktMT0FEX01BUChQUF9TTUNfUE9XRVJf
UFJPRklMRV9CT09UVVBfREVGQVVMVCwgICAgICAgV09SS0xPQURfUFBMSUJfREVGQVVMVF9CSVQp
LA0KICAgICAgICAgV09SS0xPQURfTUFQKFBQX1NNQ19QT1dFUl9QUk9GSUxFX1BPV0VSU0FWSU5H
LCAgICAgICAgICBXT1JLTE9BRF9QUExJQl9QT1dFUl9TQVZJTkdfQklUKSwNCiAgICAgICAgIFdP
UktMT0FEX01BUChQUF9TTUNfUE9XRVJfUFJPRklMRV9WSURFTywgICAgICAgICAgICAgICAgV09S
S0xPQURfUFBMSUJfVklERU9fQklUKSwNCkBAIC0xODUsOTggKzE4NSwzNCBAQCBzdGF0aWMgc3Ry
dWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgYXJjdHVydXNfd29ya2xvYWRfbWFwW1BQX1NN
Q19QT1dFUl9QUk9GSQ0KICAgICAgICAgV09SS0xPQURfTUFQKFBQX1NNQ19QT1dFUl9QUk9GSUxF
X0NVU1RPTSwgICAgICAgICAgICAgICBXT1JLTE9BRF9QUExJQl9DVVNUT01fQklUKSwNCiB9Ow0K
DQotc3RhdGljIGludCBhcmN0dXJ1c19nZXRfc211X21zZ19pbmRleChzdHJ1Y3Qgc211X2NvbnRl
eHQgKnNtYywgdWludDMyX3QgaW5kZXgpDQorc3RhdGljIGludCBhcmN0dXJ1c19nZXRfc211X21z
Z19pbmRleChzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSwgdWludDMyX3QgaW5kZXgpDQogew0KLSAg
ICAgICBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBtYXBwaW5nOw0KLQ0KLSAgICAg
ICBpZiAoaW5kZXggPj0gU01VX01TR19NQVhfQ09VTlQpDQotICAgICAgICAgICAgICAgcmV0dXJu
IC1FSU5WQUw7DQotDQotICAgICAgIG1hcHBpbmcgPSBhcmN0dXJ1c19tZXNzYWdlX21hcFtpbmRl
eF07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGluZykpDQotICAgICAgICAgICAg
ICAgcmV0dXJuIC1FSU5WQUw7DQotDQotICAgICAgIHJldHVybiBtYXBwaW5nLm1hcF90bzsNCisg
ICAgICAgcmV0dXJuIHNtdV9tYXBfaGVscGVyKHNtdSwgYXJjdHVydXNfbWVzc2FnZV9tYXAsIFNN
VV9NU0dfTUFYX0NPVU5ULCBpbmRleCk7DQogfQ0KDQotc3RhdGljIGludCBhcmN0dXJ1c19nZXRf
c211X2Nsa19pbmRleChzdHJ1Y3Qgc211X2NvbnRleHQgKnNtYywgdWludDMyX3QgaW5kZXgpDQor
c3RhdGljIGludCBhcmN0dXJ1c19nZXRfc211X2Nsa19pbmRleChzdHJ1Y3Qgc211X2NvbnRleHQg
KnNtdSwgdWludDMyX3QgaW5kZXgpDQogew0KLSAgICAgICBzdHJ1Y3Qgc211XzExXzBfY21uMmFp
c2NfbWFwcGluZyBtYXBwaW5nOw0KLQ0KLSAgICAgICBpZiAoaW5kZXggPj0gU01VX0NMS19DT1VO
VCkNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGluZyA9
IGFyY3R1cnVzX2Nsa19tYXBbaW5kZXhdOw0KLSAgICAgICBpZiAoIShtYXBwaW5nLnZhbGlkX21h
cHBpbmcpKSB7DQotICAgICAgICAgICAgICAgcHJfd2FybigiVW5zdXBwb3J0ZWQgU01VIGNsazog
JWRcbiIsIGluZGV4KTsNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0gICAgICAg
fQ0KLQ0KLSAgICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87DQorICAgICAgIHJldHVybiBzbXVf
bWFwX2hlbHBlcihzbXUsIGFyY3R1cnVzX2Nsa19tYXAsIFNNVV9DTEtfQ09VTlQsIGluZGV4KTsN
CiB9DQoNCi1zdGF0aWMgaW50IGFyY3R1cnVzX2dldF9zbXVfZmVhdHVyZV9pbmRleChzdHJ1Y3Qg
c211X2NvbnRleHQgKnNtYywgdWludDMyX3QgaW5kZXgpDQorc3RhdGljIGludCBhcmN0dXJ1c19n
ZXRfc211X2ZlYXR1cmVfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIHVpbnQzMl90IGlu
ZGV4KQ0KIHsNCi0gICAgICAgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGlu
ZzsNCi0NCi0gICAgICAgaWYgKGluZGV4ID49IFNNVV9GRUFUVVJFX0NPVU5UKQ0KLSAgICAgICAg
ICAgICAgIHJldHVybiAtRUlOVkFMOw0KLQ0KLSAgICAgICBtYXBwaW5nID0gYXJjdHVydXNfZmVh
dHVyZV9tYXNrX21hcFtpbmRleF07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGlu
ZykpIHsNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0gICAgICAgfQ0KLQ0KLSAg
ICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87DQorICAgICAgIHJldHVybiBzbXVfbWFwX2hlbHBl
cihzbXUsIGFyY3R1cnVzX2ZlYXR1cmVfbWFza19tYXAsIFNNVV9GRUFUVVJFX0NPVU5ULCBpbmRl
eCk7DQogfQ0KDQotc3RhdGljIGludCBhcmN0dXJ1c19nZXRfc211X3RhYmxlX2luZGV4KHN0cnVj
dCBzbXVfY29udGV4dCAqc21jLCB1aW50MzJfdCBpbmRleCkNCitzdGF0aWMgaW50IGFyY3R1cnVz
X2dldF9zbXVfdGFibGVfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIHVpbnQzMl90IGlu
ZGV4KQ0KIHsNCi0gICAgICAgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGlu
ZzsNCi0NCi0gICAgICAgaWYgKGluZGV4ID49IFNNVV9UQUJMRV9DT1VOVCkNCi0gICAgICAgICAg
ICAgICByZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGluZyA9IGFyY3R1cnVzX3RhYmxl
X21hcFtpbmRleF07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGluZykpIHsNCi0g
ICAgICAgICAgICAgICBwcl93YXJuKCJVbnN1cHBvcnRlZCBTTVUgdGFibGU6ICVkXG4iLCBpbmRl
eCk7DQotICAgICAgICAgICAgICAgcmV0dXJuIC1FSU5WQUw7DQotICAgICAgIH0NCi0NCi0gICAg
ICAgcmV0dXJuIG1hcHBpbmcubWFwX3RvOw0KKyAgICAgICByZXR1cm4gc211X21hcF9oZWxwZXIo
c211LCBhcmN0dXJ1c190YWJsZV9tYXAsIFNNVV9UQUJMRV9DT1VOVCwgaW5kZXgpOw0KIH0NCg0K
LXN0YXRpYyBpbnQgYXJjdHVydXNfZ2V0X3B3cl9zcmNfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0
ICpzbWMsIHVpbnQzMl90IGluZGV4KQ0KK3N0YXRpYyBpbnQgYXJjdHVydXNfZ2V0X3B3cl9zcmNf
aW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIHVpbnQzMl90IGluZGV4KQ0KIHsNCi0gICAg
ICAgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGluZzsNCi0NCi0gICAgICAg
aWYgKGluZGV4ID49IFNNVV9QT1dFUl9TT1VSQ0VfQ09VTlQpDQotICAgICAgICAgICAgICAgcmV0
dXJuIC1FSU5WQUw7DQotDQotICAgICAgIG1hcHBpbmcgPSBhcmN0dXJ1c19wd3Jfc3JjX21hcFtp
bmRleF07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGluZykpIHsNCi0gICAgICAg
ICAgICAgICBwcl93YXJuKCJVbnN1cHBvcnRlZCBTTVUgcG93ZXIgc291cmNlOiAlZFxuIiwgaW5k
ZXgpOw0KLSAgICAgICAgICAgICAgIHJldHVybiAtRUlOVkFMOw0KLSAgICAgICB9DQotDQotICAg
ICAgIHJldHVybiBtYXBwaW5nLm1hcF90bzsNCisgICAgICAgcmV0dXJuIHNtdV9tYXBfaGVscGVy
KHNtdSwgYXJjdHVydXNfcHdyX3NyY19tYXAsIFNNVV9QT1dFUl9TT1VSQ0VfQ09VTlQsIGluZGV4
KTsNCiB9DQoNCi0NCiBzdGF0aWMgaW50IGFyY3R1cnVzX2dldF93b3JrbG9hZF90eXBlKHN0cnVj
dCBzbXVfY29udGV4dCAqc211LCBlbnVtIFBQX1NNQ19QT1dFUl9QUk9GSUxFIHByb2ZpbGUpDQog
ew0KLSAgICAgICBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBtYXBwaW5nOw0KLQ0K
LSAgICAgICBpZiAocHJvZmlsZSA+IFBQX1NNQ19QT1dFUl9QUk9GSUxFX0NVU1RPTSkNCi0gICAg
ICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGluZyA9IGFyY3R1cnVz
X3dvcmtsb2FkX21hcFtwcm9maWxlXTsNCi0gICAgICAgaWYgKCEobWFwcGluZy52YWxpZF9tYXBw
aW5nKSkgew0KLSAgICAgICAgICAgICAgIHByX3dhcm4oIlVuc3VwcG9ydGVkIFNNVSBwb3dlciBz
b3VyY2U6ICVkXG4iLCBwcm9maWxlKTsNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsN
Ci0gICAgICAgfQ0KLQ0KLSAgICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87DQorICAgICAgIHJl
dHVybiBzbXVfbWFwX2hlbHBlcihzbXUsIGFyY3R1cnVzX3dvcmtsb2FkX21hcCwgUFBfU01DX1BP
V0VSX1BST0ZJTEVfQ09VTlQsICh1aW50MzJfdClwcm9maWxlKTsNCiB9DQoNCiBzdGF0aWMgaW50
IGFyY3R1cnVzX3RhYmxlc19pbml0KHN0cnVjdCBzbXVfY29udGV4dCAqc211LCBzdHJ1Y3Qgc211
X3RhYmxlICp0YWJsZXMpDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBs
YXkvaW5jL2FtZGdwdV9zbXUuaCBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L2luYy9h
bWRncHVfc211LmgNCmluZGV4IGZjNTlkOTY4NmU2MS4uNjQwNGFkNTI0OWQ0IDEwMDY0NA0KLS0t
IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvaW5jL2FtZGdwdV9zbXUuaA0KKysrIGIv
ZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvaW5jL2FtZGdwdV9zbXUuaA0KQEAgLTIwNiw2
ICsyMDYsMTEgQEAgc3RydWN0IHNtdV9jbG9ja19pbmZvIHsNCiAgICAgICAgIHVpbnQzMl90IG1h
eF9idXNfYmFuZHdpZHRoOw0KIH07DQoNCitzdHJ1Y3Qgc211X21hcCB7DQorICAgICAgIGJvb2wg
dmFsaWQ7DQorICAgICAgIGludCB2YWx1ZTsNCit9Ow0KKw0KIHN0cnVjdCBzbXVfYmlvc19ib290
X3VwX3ZhbHVlcw0KIHsNCiAgICAgICAgIHVpbnQzMl90ICAgICAgICAgICAgICAgICAgICAgICAg
cmV2aXNpb247DQpAQCAtODA5LDUgKzgxNCw3IEBAIGNvbnN0IGNoYXIgKnNtdV9nZXRfbWVzc2Fn
ZV9uYW1lKHN0cnVjdCBzbXVfY29udGV4dCAqc211LCBlbnVtIHNtdV9tZXNzYWdlX3R5cGUNCiBj
b25zdCBjaGFyICpzbXVfZ2V0X2ZlYXR1cmVfbmFtZShzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSwg
ZW51bSBzbXVfZmVhdHVyZV9tYXNrIGZlYXR1cmUpOw0KIHNpemVfdCBzbXVfc3lzX2dldF9wcF9m
ZWF0dXJlX21hc2soc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIGNoYXIgKmJ1Zik7DQogaW50IHNt
dV9zeXNfc2V0X3BwX2ZlYXR1cmVfbWFzayhzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSwgdWludDY0
X3QgbmV3X21hc2spOw0KK2ludCBzbXVfbWFwX2hlbHBlcihzdHJ1Y3Qgc211X2NvbnRleHQgKnNt
dSwgc3RydWN0IHNtdV9tYXAgKm1hcF9zcmMsDQorICAgICAgICAgICAgICAgICAgdWludDMyX3Qg
bWF4X2luZGV4LCB1aW50MzJfdCBpbmRleCk7DQoNCiAjZW5kaWYNCmRpZmYgLS1naXQgYS9kcml2
ZXJzL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9pbmMvc211X3YxMV8wLmggYi9kcml2ZXJzL2dwdS9k
cm0vYW1kL3Bvd2VycGxheS9pbmMvc211X3YxMV8wLmgNCmluZGV4IGFjYmI4M2QxNzliZS4uZWY1
OTg1MGIzZmVmIDEwMDY0NA0KLS0tIGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvaW5j
L3NtdV92MTFfMC5oDQorKysgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9pbmMvc211
X3YxMV8wLmgNCkBAIC00OSwyNCArNDksMTkgQEANCiAjZGVmaW5lIFNNVTExX1RPT0xfU0laRSAg
ICAgICAgICAgICAgICAgMHgxOTAwMA0KDQogI2RlZmluZSBDTEtfTUFQKGNsaywgaW5kZXgpIFwN
Ci0gICAgICAgW1NNVV8jI2Nsa10gPSB7MSwgKGluZGV4KX0NCisgICAgICAgW1NNVV8jI2Nsa10g
PSB7dHJ1ZSwgKGluZGV4KX0NCg0KICNkZWZpbmUgRkVBX01BUChmZWEpIFwNCi0gICAgICAgW1NN
VV9GRUFUVVJFXyMjZmVhIyNfQklUXSA9IHsxLCBGRUFUVVJFXyMjZmVhIyNfQklUfQ0KKyAgICAg
ICBbU01VX0ZFQVRVUkVfIyNmZWEjI19CSVRdID0ge3RydWUsIEZFQVRVUkVfIyNmZWEjI19CSVR9
DQoNCiAjZGVmaW5lIFRBQl9NQVAodGFiKSBcDQotICAgICAgIFtTTVVfVEFCTEVfIyN0YWJdID0g
ezEsIFRBQkxFXyMjdGFifQ0KKyAgICAgICBbU01VX1RBQkxFXyMjdGFiXSA9IHt0cnVlLCBUQUJM
RV8jI3RhYn0NCg0KICNkZWZpbmUgUFdSX01BUCh0YWIpIFwNCi0gICAgICAgW1NNVV9QT1dFUl9T
T1VSQ0VfIyN0YWJdID0gezEsIFBPV0VSX1NPVVJDRV8jI3RhYn0NCisgICAgICAgW1NNVV9QT1dF
Ul9TT1VSQ0VfIyN0YWJdID0ge3RydWUsIFBPV0VSX1NPVVJDRV8jI3RhYn0NCg0KICNkZWZpbmUg
V09SS0xPQURfTUFQKHByb2ZpbGUsIHdvcmtsb2FkKSBcDQotICAgICAgIFtwcm9maWxlXSA9IHsx
LCAod29ya2xvYWQpfQ0KLQ0KLXN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5nIHsNCi0g
ICAgICAgaW50ICAgICB2YWxpZF9tYXBwaW5nOw0KLSAgICAgICBpbnQgICAgIG1hcF90bzsNCi19
Ow0KKyAgICAgICBbcHJvZmlsZV0gPSB7dHJ1ZSwgKHdvcmtsb2FkKX0NCg0KIHN0cnVjdCBzbXVf
MTFfMF9tYXhfc3VzdGFpbmFibGVfY2xvY2tzIHsNCiAgICAgICAgIHVpbnQzMl90IGRpc3BsYXlf
Y2xvY2s7DQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvbmF2aTEw
X3BwdC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvbmF2aTEwX3BwdC5jDQppbmRl
eCA5MjAxNTZlOWZiOWQuLjk4MzhiZWVjZWMyZSAxMDA2NDQNCi0tLSBhL2RyaXZlcnMvZ3B1L2Ry
bS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuYw0KKysrIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9w
b3dlcnBsYXkvbmF2aTEwX3BwdC5jDQpAQCAtNDksOSArNDksOSBAQA0KICAgICAgICAgRkVBVFVS
RV9NQVNLKEZFQVRVUkVfRFBNX0RDRUZDTEtfQklUKSkNCg0KICNkZWZpbmUgTVNHX01BUChtc2cs
IGluZGV4KSBcDQotICAgICAgIFtTTVVfTVNHXyMjbXNnXSA9IHsxLCAoaW5kZXgpfQ0KKyAgICAg
ICBbU01VX01TR18jI21zZ10gPSB7dHJ1ZSwgKGluZGV4KX0NCg0KLXN0YXRpYyBzdHJ1Y3Qgc211
XzExXzBfY21uMmFpc2NfbWFwcGluZyBuYXZpMTBfbWVzc2FnZV9tYXBbU01VX01TR19NQVhfQ09V
TlRdID0gew0KK3N0YXRpYyBzdHJ1Y3Qgc211X21hcCBuYXZpMTBfbWVzc2FnZV9tYXBbU01VX01T
R19NQVhfQ09VTlRdID0gew0KICAgICAgICAgTVNHX01BUChUZXN0TWVzc2FnZSwgICAgICAgICAg
ICAgICAgICAgIFBQU01DX01TR19UZXN0TWVzc2FnZSksDQogICAgICAgICBNU0dfTUFQKEdldFNt
dVZlcnNpb24sICAgICAgICAgICAgICAgICAgUFBTTUNfTVNHX0dldFNtdVZlcnNpb24pLA0KICAg
ICAgICAgTVNHX01BUChHZXREcml2ZXJJZlZlcnNpb24sICAgICAgICAgICAgIFBQU01DX01TR19H
ZXREcml2ZXJJZlZlcnNpb24pLA0KQEAgLTExOCw3ICsxMTgsNyBAQCBzdGF0aWMgc3RydWN0IHNt
dV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbmF2aTEwX21lc3NhZ2VfbWFwW1NNVV9NU0dfTUFYX0NP
VU5UXSA9DQogICAgICAgICBNU0dfTUFQKEFybUQzLCAgICAgICAgICAgICAgICAgIFBQU01DX01T
R19Bcm1EMyksDQogfTsNCg0KLXN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGlu
ZyBuYXZpMTBfY2xrX21hcFtTTVVfQ0xLX0NPVU5UXSA9IHsNCitzdGF0aWMgc3RydWN0IHNtdV9t
YXAgbmF2aTEwX2Nsa19tYXBbU01VX0NMS19DT1VOVF0gPSB7DQogICAgICAgICBDTEtfTUFQKEdG
WENMSywgUFBDTEtfR0ZYQ0xLKSwNCiAgICAgICAgIENMS19NQVAoU0NMSywgICBQUENMS19HRlhD
TEspLA0KICAgICAgICAgQ0xLX01BUChTT0NDTEssIFBQQ0xLX1NPQ0NMSyksDQpAQCAtMTMzLDcg
KzEzMyw3IEBAIHN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBuYXZpMTBf
Y2xrX21hcFtTTVVfQ0xLX0NPVU5UXSA9IHsNCiAgICAgICAgIENMS19NQVAoUEhZQ0xLLCBQUENM
S19QSFlDTEspLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBp
bmcgbmF2aTEwX2ZlYXR1cmVfbWFza19tYXBbU01VX0ZFQVRVUkVfQ09VTlRdID0gew0KK3N0YXRp
YyBzdHJ1Y3Qgc211X21hcCBuYXZpMTBfZmVhdHVyZV9tYXNrX21hcFtTTVVfRkVBVFVSRV9DT1VO
VF0gPSB7DQogICAgICAgICBGRUFfTUFQKERQTV9QUkVGRVRDSEVSKSwNCiAgICAgICAgIEZFQV9N
QVAoRFBNX0dGWENMSyksDQogICAgICAgICBGRUFfTUFQKERQTV9HRlhfUEFDRSksDQpAQCAtMTc4
LDcgKzE3OCw3IEBAIHN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBuYXZp
MTBfZmVhdHVyZV9tYXNrX21hcFtTTVVfRkVBVFVSRV9DT1VODQogICAgICAgICBGRUFfTUFQKEFU
SFVCX1BHKSwNCiB9Ow0KDQotc3RhdGljIHN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5n
IG5hdmkxMF90YWJsZV9tYXBbU01VX1RBQkxFX0NPVU5UXSA9IHsNCitzdGF0aWMgc3RydWN0IHNt
dV9tYXAgbmF2aTEwX3RhYmxlX21hcFtTTVVfVEFCTEVfQ09VTlRdID0gew0KICAgICAgICAgVEFC
X01BUChQUFRBQkxFKSwNCiAgICAgICAgIFRBQl9NQVAoV0FURVJNQVJLUyksDQogICAgICAgICBU
QUJfTUFQKEFWRlMpLA0KQEAgLTE5MywxMiArMTkzLDEyIEBAIHN0YXRpYyBzdHJ1Y3Qgc211XzEx
XzBfY21uMmFpc2NfbWFwcGluZyBuYXZpMTBfdGFibGVfbWFwW1NNVV9UQUJMRV9DT1VOVF0gPSB7
DQogICAgICAgICBUQUJfTUFQKFBBQ0UpLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8w
X2NtbjJhaXNjX21hcHBpbmcgbmF2aTEwX3B3cl9zcmNfbWFwW1NNVV9QT1dFUl9TT1VSQ0VfQ09V
TlRdID0gew0KK3N0YXRpYyBzdHJ1Y3Qgc211X21hcCBuYXZpMTBfcHdyX3NyY19tYXBbU01VX1BP
V0VSX1NPVVJDRV9DT1VOVF0gPSB7DQogICAgICAgICBQV1JfTUFQKEFDKSwNCiAgICAgICAgIFBX
Ul9NQVAoREMpLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBp
bmcgbmF2aTEwX3dvcmtsb2FkX21hcFtQUF9TTUNfUE9XRVJfUFJPRklMRV9DT1VOVF0gPSB7DQor
c3RhdGljIHN0cnVjdCBzbXVfbWFwIG5hdmkxMF93b3JrbG9hZF9tYXBbUFBfU01DX1BPV0VSX1BS
T0ZJTEVfQ09VTlRdID0gew0KICAgICAgICAgV09SS0xPQURfTUFQKFBQX1NNQ19QT1dFUl9QUk9G
SUxFX0JPT1RVUF9ERUZBVUxULCAgICAgICBXT1JLTE9BRF9QUExJQl9ERUZBVUxUX0JJVCksDQog
ICAgICAgICBXT1JLTE9BRF9NQVAoUFBfU01DX1BPV0VSX1BST0ZJTEVfRlVMTFNDUkVFTjNELCAg
ICAgICAgIFdPUktMT0FEX1BQTElCX0ZVTExfU0NSRUVOXzNEX0JJVCksDQogICAgICAgICBXT1JL
TE9BRF9NQVAoUFBfU01DX1BPV0VSX1BST0ZJTEVfUE9XRVJTQVZJTkcsICAgICAgICAgIFdPUktM
T0FEX1BQTElCX1BPV0VSX1NBVklOR19CSVQpLA0KQEAgLTIwOCw5NSArMjA4LDM0IEBAIHN0YXRp
YyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBuYXZpMTBfd29ya2xvYWRfbWFwW1BQ
X1NNQ19QT1dFUl9QUk9GSUxFDQogICAgICAgICBXT1JLTE9BRF9NQVAoUFBfU01DX1BPV0VSX1BS
T0ZJTEVfQ1VTVE9NLCAgICAgICAgICAgICAgIFdPUktMT0FEX1BQTElCX0NVU1RPTV9CSVQpLA0K
IH07DQoNCi1zdGF0aWMgaW50IG5hdmkxMF9nZXRfc211X21zZ19pbmRleChzdHJ1Y3Qgc211X2Nv
bnRleHQgKnNtYywgdWludDMyX3QgaW5kZXgpDQorc3RhdGljIGludCBuYXZpMTBfZ2V0X3NtdV9t
c2dfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIHVpbnQzMl90IGluZGV4KQ0KIHsNCi0g
ICAgICAgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGluZzsNCi0NCi0gICAg
ICAgaWYgKGluZGV4ID4gU01VX01TR19NQVhfQ09VTlQpDQotICAgICAgICAgICAgICAgcmV0dXJu
IC1FSU5WQUw7DQotDQotICAgICAgIG1hcHBpbmcgPSBuYXZpMTBfbWVzc2FnZV9tYXBbaW5kZXhd
Ow0KLSAgICAgICBpZiAoIShtYXBwaW5nLnZhbGlkX21hcHBpbmcpKSB7DQotICAgICAgICAgICAg
ICAgcmV0dXJuIC1FSU5WQUw7DQotICAgICAgIH0NCi0NCi0gICAgICAgcmV0dXJuIG1hcHBpbmcu
bWFwX3RvOw0KKyAgICAgICByZXR1cm4gc211X21hcF9oZWxwZXIoc211LCBuYXZpMTBfbWVzc2Fn
ZV9tYXAsIFNNVV9NU0dfTUFYX0NPVU5ULCBpbmRleCk7DQogfQ0KDQotc3RhdGljIGludCBuYXZp
MTBfZ2V0X3NtdV9jbGtfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbWMsIHVpbnQzMl90IGlu
ZGV4KQ0KK3N0YXRpYyBpbnQgbmF2aTEwX2dldF9zbXVfY2xrX2luZGV4KHN0cnVjdCBzbXVfY29u
dGV4dCAqc211LCB1aW50MzJfdCBpbmRleCkNCiB7DQotICAgICAgIHN0cnVjdCBzbXVfMTFfMF9j
bW4yYWlzY19tYXBwaW5nIG1hcHBpbmc7DQotDQotICAgICAgIGlmIChpbmRleCA+PSBTTVVfQ0xL
X0NPVU5UKQ0KLSAgICAgICAgICAgICAgIHJldHVybiAtRUlOVkFMOw0KLQ0KLSAgICAgICBtYXBw
aW5nID0gbmF2aTEwX2Nsa19tYXBbaW5kZXhdOw0KLSAgICAgICBpZiAoIShtYXBwaW5nLnZhbGlk
X21hcHBpbmcpKSB7DQotICAgICAgICAgICAgICAgcmV0dXJuIC1FSU5WQUw7DQotICAgICAgIH0N
Ci0NCi0gICAgICAgcmV0dXJuIG1hcHBpbmcubWFwX3RvOw0KKyAgICAgICByZXR1cm4gc211X21h
cF9oZWxwZXIoc211LCBuYXZpMTBfY2xrX21hcCwgU01VX0NMS19DT1VOVCwgaW5kZXgpOw0KIH0N
Cg0KLXN0YXRpYyBpbnQgbmF2aTEwX2dldF9zbXVfZmVhdHVyZV9pbmRleChzdHJ1Y3Qgc211X2Nv
bnRleHQgKnNtYywgdWludDMyX3QgaW5kZXgpDQorc3RhdGljIGludCBuYXZpMTBfZ2V0X3NtdV9m
ZWF0dXJlX2luZGV4KHN0cnVjdCBzbXVfY29udGV4dCAqc211LCB1aW50MzJfdCBpbmRleCkNCiB7
DQotICAgICAgIHN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5nIG1hcHBpbmc7DQotDQot
ICAgICAgIGlmIChpbmRleCA+PSBTTVVfRkVBVFVSRV9DT1VOVCkNCi0gICAgICAgICAgICAgICBy
ZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGluZyA9IG5hdmkxMF9mZWF0dXJlX21hc2tf
bWFwW2luZGV4XTsNCi0gICAgICAgaWYgKCEobWFwcGluZy52YWxpZF9tYXBwaW5nKSkgew0KLSAg
ICAgICAgICAgICAgIHJldHVybiAtRUlOVkFMOw0KLSAgICAgICB9DQotDQotICAgICAgIHJldHVy
biBtYXBwaW5nLm1hcF90bzsNCisgICAgICAgcmV0dXJuIHNtdV9tYXBfaGVscGVyKHNtdSwgbmF2
aTEwX2ZlYXR1cmVfbWFza19tYXAsIFNNVV9GRUFUVVJFX0NPVU5ULCBpbmRleCk7DQogfQ0KDQot
c3RhdGljIGludCBuYXZpMTBfZ2V0X3NtdV90YWJsZV9pbmRleChzdHJ1Y3Qgc211X2NvbnRleHQg
KnNtYywgdWludDMyX3QgaW5kZXgpDQorc3RhdGljIGludCBuYXZpMTBfZ2V0X3NtdV90YWJsZV9p
bmRleChzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSwgdWludDMyX3QgaW5kZXgpDQogew0KLSAgICAg
ICBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBtYXBwaW5nOw0KLQ0KLSAgICAgICBp
ZiAoaW5kZXggPj0gU01VX1RBQkxFX0NPVU5UKQ0KLSAgICAgICAgICAgICAgIHJldHVybiAtRUlO
VkFMOw0KLQ0KLSAgICAgICBtYXBwaW5nID0gbmF2aTEwX3RhYmxlX21hcFtpbmRleF07DQotICAg
ICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGluZykpIHsNCi0gICAgICAgICAgICAgICByZXR1
cm4gLUVJTlZBTDsNCi0gICAgICAgfQ0KLQ0KLSAgICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87
DQorICAgICAgIHJldHVybiBzbXVfbWFwX2hlbHBlcihzbXUsIG5hdmkxMF90YWJsZV9tYXAsIFNN
VV9UQUJMRV9DT1VOVCwgaW5kZXgpOw0KIH0NCg0KLXN0YXRpYyBpbnQgbmF2aTEwX2dldF9wd3Jf
c3JjX2luZGV4KHN0cnVjdCBzbXVfY29udGV4dCAqc21jLCB1aW50MzJfdCBpbmRleCkNCitzdGF0
aWMgaW50IG5hdmkxMF9nZXRfcHdyX3NyY19pbmRleChzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSwg
dWludDMyX3QgaW5kZXgpDQogew0KLSAgICAgICBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFw
cGluZyBtYXBwaW5nOw0KLQ0KLSAgICAgICBpZiAoaW5kZXggPj0gU01VX1BPV0VSX1NPVVJDRV9D
T1VOVCkNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGlu
ZyA9IG5hdmkxMF9wd3Jfc3JjX21hcFtpbmRleF07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFs
aWRfbWFwcGluZykpIHsNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0gICAgICAg
fQ0KLQ0KLSAgICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87DQorICAgICAgIHJldHVybiBzbXVf
bWFwX2hlbHBlcihzbXUsIG5hdmkxMF9wd3Jfc3JjX21hcCwgU01VX1BPV0VSX1NPVVJDRV9DT1VO
VCwgaW5kZXgpOw0KIH0NCg0KLQ0KIHN0YXRpYyBpbnQgbmF2aTEwX2dldF93b3JrbG9hZF90eXBl
KHN0cnVjdCBzbXVfY29udGV4dCAqc211LCBlbnVtIFBQX1NNQ19QT1dFUl9QUk9GSUxFIHByb2Zp
bGUpDQogew0KLSAgICAgICBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyBtYXBwaW5n
Ow0KLQ0KLSAgICAgICBpZiAocHJvZmlsZSA+IFBQX1NNQ19QT1dFUl9QUk9GSUxFX0NVU1RPTSkN
Ci0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGluZyA9IG5h
dmkxMF93b3JrbG9hZF9tYXBbcHJvZmlsZV07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFsaWRf
bWFwcGluZykpIHsNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0gICAgICAgfQ0K
LQ0KLSAgICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87DQorICAgICAgIHJldHVybiBzbXVfbWFw
X2hlbHBlcihzbXUsIG5hdmkxMF93b3JrbG9hZF9tYXAsIFBQX1NNQ19QT1dFUl9QUk9GSUxFX0NP
VU5ULCAodWludDMyX3QpcHJvZmlsZSk7DQogfQ0KDQogc3RhdGljIGJvb2wgaXNfYXNpY19zZWN1
cmUoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUpDQpkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJt
L2FtZC9wb3dlcnBsYXkvdmVnYTIwX3BwdC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBs
YXkvdmVnYTIwX3BwdC5jDQppbmRleCBhY2YwNzUzOTNjMTMuLjYxNjJiZTI1YjZkMiAxMDA2NDQN
Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L3ZlZ2EyMF9wcHQuYw0KKysrIGIv
ZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvdmVnYTIwX3BwdC5jDQpAQCAtNDcsNyArNDcs
NyBAQA0KICNkZWZpbmUgQ1RGX09GRlNFVF9IQk0gICAgICAgICAgICAgICAgICA1DQoNCiAjZGVm
aW5lIE1TR19NQVAobXNnKSBcDQotICAgICAgIFtTTVVfTVNHXyMjbXNnXSA9IHsxLCBQUFNNQ19N
U0dfIyNtc2d9DQorICAgICAgIFtTTVVfTVNHXyMjbXNnXSA9IHt0cnVlLCBQUFNNQ19NU0dfIyNt
c2d9DQoNCiAjZGVmaW5lIFNNQ19EUE1fRkVBVFVSRSAoRkVBVFVSRV9EUE1fUFJFRkVUQ0hFUl9N
QVNLIHwgXA0KICAgICAgICAgICAgICAgICAgICAgICAgICBGRUFUVVJFX0RQTV9HRlhDTEtfTUFT
SyB8IFwNCkBAIC01OSw3ICs1OSw3IEBADQogICAgICAgICAgICAgICAgICAgICAgICAgIEZFQVRV
UkVfRFBNX0xJTktfTUFTSyB8IFwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgRkVBVFVSRV9E
UE1fRENFRkNMS19NQVNLKQ0KDQotc3RhdGljIHN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBw
aW5nIHZlZ2EyMF9tZXNzYWdlX21hcFtTTVVfTVNHX01BWF9DT1VOVF0gPSB7DQorc3RhdGljIHN0
cnVjdCBzbXVfbWFwIHZlZ2EyMF9tZXNzYWdlX21hcFtTTVVfTVNHX01BWF9DT1VOVF0gPSB7DQog
ICAgICAgICBNU0dfTUFQKFRlc3RNZXNzYWdlKSwNCiAgICAgICAgIE1TR19NQVAoR2V0U211VmVy
c2lvbiksDQogICAgICAgICBNU0dfTUFQKEdldERyaXZlcklmVmVyc2lvbiksDQpAQCAtMTQ1LDcg
KzE0NSw3IEBAIHN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyB2ZWdhMjBf
bWVzc2FnZV9tYXBbU01VX01TR19NQVhfQ09VTlRdID0NCiAgICAgICAgIE1TR19NQVAoR2V0QVZG
U1ZvbHRhZ2VCeURwbSksDQogfTsNCg0KLXN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2Nf
bWFwcGluZyB2ZWdhMjBfY2xrX21hcFtTTVVfQ0xLX0NPVU5UXSA9IHsNCitzdGF0aWMgc3RydWN0
IHNtdV9tYXAgdmVnYTIwX2Nsa19tYXBbU01VX0NMS19DT1VOVF0gPSB7DQogICAgICAgICBDTEtf
TUFQKEdGWENMSywgUFBDTEtfR0ZYQ0xLKSwNCiAgICAgICAgIENMS19NQVAoVkNMSywgUFBDTEtf
VkNMSyksDQogICAgICAgICBDTEtfTUFQKERDTEssIFBQQ0xLX0RDTEspLA0KQEAgLTE1OSw3ICsx
NTksNyBAQCBzdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgdmVnYTIwX2Ns
a19tYXBbU01VX0NMS19DT1VOVF0gPSB7DQogICAgICAgICBDTEtfTUFQKEZDTEssIFBQQ0xLX0ZD
TEspLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgdmVn
YTIwX2ZlYXR1cmVfbWFza19tYXBbU01VX0ZFQVRVUkVfQ09VTlRdID0gew0KK3N0YXRpYyBzdHJ1
Y3Qgc211X21hcCB2ZWdhMjBfZmVhdHVyZV9tYXNrX21hcFtTTVVfRkVBVFVSRV9DT1VOVF0gPSB7
DQogICAgICAgICBGRUFfTUFQKERQTV9QUkVGRVRDSEVSKSwNCiAgICAgICAgIEZFQV9NQVAoRFBN
X0dGWENMSyksDQogICAgICAgICBGRUFfTUFQKERQTV9VQ0xLKSwNCkBAIC0xOTUsNyArMTk1LDcg
QEAgc3RhdGljIHN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5nIHZlZ2EyMF9mZWF0dXJl
X21hc2tfbWFwW1NNVV9GRUFUVVJFX0NPVU4NCiAgICAgICAgIEZFQV9NQVAoWEdNSSksDQogfTsN
Cg0KLXN0YXRpYyBzdHJ1Y3Qgc211XzExXzBfY21uMmFpc2NfbWFwcGluZyB2ZWdhMjBfdGFibGVf
bWFwW1NNVV9UQUJMRV9DT1VOVF0gPSB7DQorc3RhdGljIHN0cnVjdCBzbXVfbWFwIHZlZ2EyMF90
YWJsZV9tYXBbU01VX1RBQkxFX0NPVU5UXSA9IHsNCiAgICAgICAgIFRBQl9NQVAoUFBUQUJMRSks
DQogICAgICAgICBUQUJfTUFQKFdBVEVSTUFSS1MpLA0KICAgICAgICAgVEFCX01BUChBVkZTKSwN
CkBAIC0yMDgsMTIgKzIwOCwxMiBAQCBzdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21h
cHBpbmcgdmVnYTIwX3RhYmxlX21hcFtTTVVfVEFCTEVfQ09VTlRdID0gew0KICAgICAgICAgVEFC
X01BUChPVkVSRFJJVkUpLA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNj
X21hcHBpbmcgdmVnYTIwX3B3cl9zcmNfbWFwW1NNVV9QT1dFUl9TT1VSQ0VfQ09VTlRdID0gew0K
K3N0YXRpYyBzdHJ1Y3Qgc211X21hcCB2ZWdhMjBfcHdyX3NyY19tYXBbU01VX1BPV0VSX1NPVVJD
RV9DT1VOVF0gPSB7DQogICAgICAgICBQV1JfTUFQKEFDKSwNCiAgICAgICAgIFBXUl9NQVAoREMp
LA0KIH07DQoNCi1zdGF0aWMgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgdmVnYTIw
X3dvcmtsb2FkX21hcFtQUF9TTUNfUE9XRVJfUFJPRklMRV9DT1VOVF0gPSB7DQorc3RhdGljIHN0
cnVjdCBzbXVfbWFwIHZlZ2EyMF93b3JrbG9hZF9tYXBbUFBfU01DX1BPV0VSX1BST0ZJTEVfQ09V
TlRdID0gew0KICAgICAgICAgV09SS0xPQURfTUFQKFBQX1NNQ19QT1dFUl9QUk9GSUxFX0JPT1RV
UF9ERUZBVUxULCAgICAgICBXT1JLTE9BRF9ERUZBVUxUX0JJVCksDQogICAgICAgICBXT1JLTE9B
RF9NQVAoUFBfU01DX1BPV0VSX1BST0ZJTEVfRlVMTFNDUkVFTjNELCAgICAgICAgIFdPUktMT0FE
X1BQTElCX0ZVTExfU0NSRUVOXzNEX0JJVCksDQogICAgICAgICBXT1JLTE9BRF9NQVAoUFBfU01D
X1BPV0VSX1BST0ZJTEVfUE9XRVJTQVZJTkcsICAgICAgICAgIFdPUktMT0FEX1BQTElCX1BPV0VS
X1NBVklOR19CSVQpLA0KQEAgLTIyMyw5NCArMjIzLDM0IEBAIHN0YXRpYyBzdHJ1Y3Qgc211XzEx
XzBfY21uMmFpc2NfbWFwcGluZyB2ZWdhMjBfd29ya2xvYWRfbWFwW1BQX1NNQ19QT1dFUl9QUk9G
SUxFDQogICAgICAgICBXT1JLTE9BRF9NQVAoUFBfU01DX1BPV0VSX1BST0ZJTEVfQ1VTVE9NLCAg
ICAgICAgICAgICAgIFdPUktMT0FEX1BQTElCX0NVU1RPTV9CSVQpLA0KIH07DQoNCi1zdGF0aWMg
aW50IHZlZ2EyMF9nZXRfc211X3RhYmxlX2luZGV4KHN0cnVjdCBzbXVfY29udGV4dCAqc21jLCB1
aW50MzJfdCBpbmRleCkNCitzdGF0aWMgaW50IHZlZ2EyMF9nZXRfc211X3RhYmxlX2luZGV4KHN0
cnVjdCBzbXVfY29udGV4dCAqc211LCB1aW50MzJfdCBpbmRleCkNCiB7DQotICAgICAgIHN0cnVj
dCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5nIG1hcHBpbmc7DQotDQotICAgICAgIGlmIChpbmRl
eCA+PSBTTVVfVEFCTEVfQ09VTlQpDQotICAgICAgICAgICAgICAgcmV0dXJuIC1FSU5WQUw7DQot
DQotICAgICAgIG1hcHBpbmcgPSB2ZWdhMjBfdGFibGVfbWFwW2luZGV4XTsNCi0gICAgICAgaWYg
KCEobWFwcGluZy52YWxpZF9tYXBwaW5nKSkgew0KLSAgICAgICAgICAgICAgIHJldHVybiAtRUlO
VkFMOw0KLSAgICAgICB9DQotDQotICAgICAgIHJldHVybiBtYXBwaW5nLm1hcF90bzsNCisgICAg
ICAgcmV0dXJuIHNtdV9tYXBfaGVscGVyKHNtdSwgdmVnYTIwX3RhYmxlX21hcCwgU01VX1RBQkxF
X0NPVU5ULCBpbmRleCk7DQogfQ0KDQotc3RhdGljIGludCB2ZWdhMjBfZ2V0X3B3cl9zcmNfaW5k
ZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbWMsIHVpbnQzMl90IGluZGV4KQ0KK3N0YXRpYyBpbnQg
dmVnYTIwX2dldF9wd3Jfc3JjX2luZGV4KHN0cnVjdCBzbXVfY29udGV4dCAqc211LCB1aW50MzJf
dCBpbmRleCkNCiB7DQotICAgICAgIHN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5nIG1h
cHBpbmc7DQotDQotICAgICAgIGlmIChpbmRleCA+PSBTTVVfUE9XRVJfU09VUkNFX0NPVU5UKQ0K
LSAgICAgICAgICAgICAgIHJldHVybiAtRUlOVkFMOw0KLQ0KLSAgICAgICBtYXBwaW5nID0gdmVn
YTIwX3B3cl9zcmNfbWFwW2luZGV4XTsNCi0gICAgICAgaWYgKCEobWFwcGluZy52YWxpZF9tYXBw
aW5nKSkgew0KLSAgICAgICAgICAgICAgIHJldHVybiAtRUlOVkFMOw0KLSAgICAgICB9DQotDQot
ICAgICAgIHJldHVybiBtYXBwaW5nLm1hcF90bzsNCisgICAgICAgcmV0dXJuIHNtdV9tYXBfaGVs
cGVyKHNtdSwgdmVnYTIwX3B3cl9zcmNfbWFwLCBTTVVfUE9XRVJfU09VUkNFX0NPVU5ULCBpbmRl
eCk7DQogfQ0KDQotc3RhdGljIGludCB2ZWdhMjBfZ2V0X3NtdV9mZWF0dXJlX2luZGV4KHN0cnVj
dCBzbXVfY29udGV4dCAqc21jLCB1aW50MzJfdCBpbmRleCkNCitzdGF0aWMgaW50IHZlZ2EyMF9n
ZXRfc211X2ZlYXR1cmVfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIHVpbnQzMl90IGlu
ZGV4KQ0KIHsNCi0gICAgICAgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGlu
ZzsNCi0NCi0gICAgICAgaWYgKGluZGV4ID49IFNNVV9GRUFUVVJFX0NPVU5UKQ0KLSAgICAgICAg
ICAgICAgIHJldHVybiAtRUlOVkFMOw0KLQ0KLSAgICAgICBtYXBwaW5nID0gdmVnYTIwX2ZlYXR1
cmVfbWFza19tYXBbaW5kZXhdOw0KLSAgICAgICBpZiAoIShtYXBwaW5nLnZhbGlkX21hcHBpbmcp
KSB7DQotICAgICAgICAgICAgICAgcmV0dXJuIC1FSU5WQUw7DQotICAgICAgIH0NCi0NCi0gICAg
ICAgcmV0dXJuIG1hcHBpbmcubWFwX3RvOw0KKyAgICAgICByZXR1cm4gc211X21hcF9oZWxwZXIo
c211LCB2ZWdhMjBfZmVhdHVyZV9tYXNrX21hcCwgU01VX0ZFQVRVUkVfQ09VTlQsIGluZGV4KTsN
CiB9DQoNCi1zdGF0aWMgaW50IHZlZ2EyMF9nZXRfc211X2Nsa19pbmRleChzdHJ1Y3Qgc211X2Nv
bnRleHQgKnNtYywgdWludDMyX3QgaW5kZXgpDQorc3RhdGljIGludCB2ZWdhMjBfZ2V0X3NtdV9j
bGtfaW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIHVpbnQzMl90IGluZGV4KQ0KIHsNCi0g
ICAgICAgc3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGluZzsNCi0NCi0gICAg
ICAgaWYgKGluZGV4ID49IFNNVV9DTEtfQ09VTlQpDQotICAgICAgICAgICAgICAgcmV0dXJuIC1F
SU5WQUw7DQotDQotICAgICAgIG1hcHBpbmcgPSB2ZWdhMjBfY2xrX21hcFtpbmRleF07DQotICAg
ICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGluZykpIHsNCi0gICAgICAgICAgICAgICByZXR1
cm4gLUVJTlZBTDsNCi0gICAgICAgfQ0KLQ0KLSAgICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87
DQorICAgICAgIHJldHVybiBzbXVfbWFwX2hlbHBlcihzbXUsIHZlZ2EyMF9jbGtfbWFwLCBTTVVf
Q0xLX0NPVU5ULCBpbmRleCk7DQogfQ0KDQotc3RhdGljIGludCB2ZWdhMjBfZ2V0X3NtdV9tc2df
aW5kZXgoc3RydWN0IHNtdV9jb250ZXh0ICpzbWMsIHVpbnQzMl90IGluZGV4KQ0KK3N0YXRpYyBp
bnQgdmVnYTIwX2dldF9zbXVfbXNnX2luZGV4KHN0cnVjdCBzbXVfY29udGV4dCAqc211LCB1aW50
MzJfdCBpbmRleCkNCiB7DQotICAgICAgIHN0cnVjdCBzbXVfMTFfMF9jbW4yYWlzY19tYXBwaW5n
IG1hcHBpbmc7DQotDQotICAgICAgIGlmIChpbmRleCA+PSBTTVVfTVNHX01BWF9DT1VOVCkNCi0g
ICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0NCi0gICAgICAgbWFwcGluZyA9IHZlZ2Ey
MF9tZXNzYWdlX21hcFtpbmRleF07DQotICAgICAgIGlmICghKG1hcHBpbmcudmFsaWRfbWFwcGlu
ZykpIHsNCi0gICAgICAgICAgICAgICByZXR1cm4gLUVJTlZBTDsNCi0gICAgICAgfQ0KLQ0KLSAg
ICAgICByZXR1cm4gbWFwcGluZy5tYXBfdG87DQorICAgICAgIHJldHVybiBzbXVfbWFwX2hlbHBl
cihzbXUsIHZlZ2EyMF9tZXNzYWdlX21hcCwgU01VX01TR19NQVhfQ09VTlQsIGluZGV4KTsNCiB9
DQoNCiBzdGF0aWMgaW50IHZlZ2EyMF9nZXRfd29ya2xvYWRfdHlwZShzdHJ1Y3Qgc211X2NvbnRl
eHQgKnNtdSwgZW51bSBQUF9TTUNfUE9XRVJfUFJPRklMRSBwcm9maWxlKQ0KIHsNCi0gICAgICAg
c3RydWN0IHNtdV8xMV8wX2NtbjJhaXNjX21hcHBpbmcgbWFwcGluZzsNCi0NCi0gICAgICAgaWYg
KHByb2ZpbGUgPiBQUF9TTUNfUE9XRVJfUFJPRklMRV9DVVNUT00pDQotICAgICAgICAgICAgICAg
cmV0dXJuIC1FSU5WQUw7DQotDQotICAgICAgIG1hcHBpbmcgPSB2ZWdhMjBfd29ya2xvYWRfbWFw
W3Byb2ZpbGVdOw0KLSAgICAgICBpZiAoIShtYXBwaW5nLnZhbGlkX21hcHBpbmcpKSB7DQotICAg
ICAgICAgICAgICAgcmV0dXJuIC1FSU5WQUw7DQotICAgICAgIH0NCi0NCi0gICAgICAgcmV0dXJu
IG1hcHBpbmcubWFwX3RvOw0KKyAgICAgICByZXR1cm4gc211X21hcF9oZWxwZXIoc211LCB2ZWdh
MjBfd29ya2xvYWRfbWFwLCBQUF9TTUNfUE9XRVJfUFJPRklMRV9DT1VOVCwgKHVpbnQzMl90KXBy
b2ZpbGUpOw0KIH0NCg0KIHN0YXRpYyBpbnQgdmVnYTIwX3RhYmxlc19pbml0KHN0cnVjdCBzbXVf
Y29udGV4dCAqc211LCBzdHJ1Y3Qgc211X3RhYmxlICp0YWJsZXMpDQotLQ0KMi4yMi4wDQoNCl9f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fDQphbWQtZ2Z4IG1h
aWxpbmcgbGlzdA0KYW1kLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcNCmh0dHBzOi8vbGlzdHMu
ZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8vYW1kLWdmeA0K

--_000_MN2PR12MB334484F5217CE6E9269600C8E4AB0MN2PR12MB3344namp_
Content-Type: text/html; charset="gb2312"
Content-Transfer-Encoding: quoted-printable

<html>
<head>
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dgb2312">
<meta name=3D"Generator" content=3D"Microsoft Exchange Server">
<!-- converted from text --><style><!-- .EmailQuote { margin-left: 1pt; pad=
ding-left: 4pt; border-left: #800000 2px solid; } --></style>
</head>
<body>
<div>
<div>
<div>
<div>Can we hold on the code optimizations or code refactor until arcturus =
and renior stablized? The current code is already a little in chaos. We sho=
uld not introduce more.</div>
<div><br>
</div>
<div style=3D"direction:ltr">Regards,</div>
<div style=3D"direction:ltr">Evan</div>
</div>
<div><br>
</div>
<div class=3D"x_ms-outlook-ios-signature"></div>
</div>
<hr tabindex=3D"-1" style=3D"display:inline-block; width:98%">
<div id=3D"x_divRplyFwdMsg" dir=3D"ltr"><font face=3D"Calibri, sans-serif" =
color=3D"#000000" style=3D"font-size:11pt"><b>=B7=A2=BC=FE=C8=CB:</b> amd-g=
fx &lt;amd-gfx-bounces@lists.freedesktop.org&gt; =B4=FA=B1=ED Wang, Kevin(Y=
ang) &lt;Kevin1.Wang@amd.com&gt;<br>
<b>=B7=A2=CB=CD=CA=B1=BC=E4:</b> Tuesday, August 20, 2019 3:55:01 PM<br>
<b>=CA=D5=BC=FE=C8=CB:</b> amd-gfx@lists.freedesktop.org &lt;amd-gfx@lists.=
freedesktop.org&gt;<br>
<b>=B3=AD=CB=CD:</b> Huang, Ray &lt;Ray.Huang@amd.com&gt;; Wang, Kevin(Yang=
) &lt;Kevin1.Wang@amd.com&gt;<br>
<b>=D6=F7=CC=E2:</b> [PATCH] drm/amd/powerplay: add smu_map_helper function=
 to unified map function</font>
<div>&nbsp;</div>
</div>
</div>
<font size=3D"2"><span style=3D"font-size:11pt;">
<div class=3D"PlainText">1. add smu_map to replace old smu_11_0_cmn2aisc_ma=
pping.<br>
(next generation of smu ip also need this logic, eg: smu12 13 14...)<br>
2. use smu_map_helper function to unified map code logic in smu<br>
<br>
Signed-off-by: Kevin Wang &lt;kevin1.wang@amd.com&gt;<br>
---<br>
&nbsp;drivers/gpu/drm/amd/powerplay/amdgpu_smu.c&nbsp;&nbsp;&nbsp; |&nbsp; =
19 &#43;&#43;&#43;&#43;<br>
&nbsp;drivers/gpu/drm/amd/powerplay/arcturus_ppt.c&nbsp; | 102 &#43;&#43;&#=
43;&#43;--------------<br>
&nbsp;.../gpu/drm/amd/powerplay/inc/amdgpu_smu.h&nbsp;&nbsp;&nbsp; |&nbsp;&=
nbsp; 7 &#43;&#43;<br>
&nbsp;drivers/gpu/drm/amd/powerplay/inc/smu_v11_0.h |&nbsp; 15 &#43;--<br>
&nbsp;drivers/gpu/drm/amd/powerplay/navi10_ppt.c&nbsp;&nbsp;&nbsp; |&nbsp; =
97 &#43;&#43;&#43;&#43;-------------<br>
&nbsp;drivers/gpu/drm/amd/powerplay/vega20_ppt.c&nbsp;&nbsp;&nbsp; |&nbsp; =
96 &#43;&#43;&#43;&#43;-------------<br>
&nbsp;6 files changed, 86 insertions(&#43;), 250 deletions(-)<br>
<br>
diff --git a/drivers/gpu/drm/amd/powerplay/amdgpu_smu.c b/drivers/gpu/drm/a=
md/powerplay/amdgpu_smu.c<br>
index 4df7fb6eaf3c..9e2a45ff23c4 100644<br>
--- a/drivers/gpu/drm/amd/powerplay/amdgpu_smu.c<br>
&#43;&#43;&#43; b/drivers/gpu/drm/amd/powerplay/amdgpu_smu.c<br>
@@ -56,6 &#43;56,25 @@ const char *smu_get_feature_name(struct smu_context =
*smu, enum smu_feature_mask<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return __smu_feature_names=
[feature];<br>
&nbsp;}<br>
&nbsp;<br>
&#43;int smu_map_helper(struct smu_context *smu, struct smu_map *map_src,<b=
r>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t max_index, uint32_t index)<br>
&#43;{<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_map *map =3D NULL;<br>
&#43;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!map_src)<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp; return -EINVAL;<br>
&#43;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D max_index)<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp; return -EINVAL;<br>
&#43;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; map =3D &amp;map_src[index];<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!map-&gt;valid)<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp; return -EINVAL;<br>
&#43;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return map-&gt;value;<br>
&#43;}<br>
&#43;<br>
&#43;<br>
&nbsp;size_t smu_sys_get_pp_feature_mask(struct smu_context *smu, char *buf=
)<br>
&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; size_t size =3D 0;<br>
diff --git a/drivers/gpu/drm/amd/powerplay/arcturus_ppt.c b/drivers/gpu/drm=
/amd/powerplay/arcturus_ppt.c<br>
index 04a26072cf40..3416dcb5f40f 100644<br>
--- a/drivers/gpu/drm/amd/powerplay/arcturus_ppt.c<br>
&#43;&#43;&#43; b/drivers/gpu/drm/amd/powerplay/arcturus_ppt.c<br>
@@ -42,9 &#43;42,9 @@<br>
&nbsp;#define CTF_OFFSET_HBM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5<br>
&nbsp;<br>
&nbsp;#define MSG_MAP(msg, index) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_MSG_##msg] =3D {1, (index)}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_MSG_##msg] =3D {true, (index=
)}<br>
&nbsp;#define ARCTURUS_FEA_MAP(smu_feature, arcturus_feature) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [smu_feature] =3D {1, (arcturus_featu=
re)}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [smu_feature] =3D {true, (arcturu=
s_feature)}<br>
&nbsp;<br>
&nbsp;#define SMU_FEATURES_LOW_MASK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p; 0x00000000FFFFFFFF<br>
&nbsp;#define SMU_FEATURES_LOW_SHIFT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<=
br>
@@ -63,7 &#43;63,7 @@<br>
&nbsp;/* possible frequency drift (1Mhz) */<br>
&nbsp;#define EPSILON&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; 1<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping arcturus_message_map[SMU_MSG_MAX_C=
OUNT] =3D {<br>
&#43;static struct smu_map arcturus_message_map[SMU_MSG_MAX_COUNT] =3D {<br=
>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(TestMessage,&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PPSMC_MSG_T=
estMessage),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetSmuVersion,&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PPSMC_MSG_GetSmuVersi=
on),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetDriverIfVersion=
,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp; PPSMC_MSG_GetDriverIfVersion),<br>
@@ -123,7 &#43;123,7 @@ static struct smu_11_0_cmn2aisc_mapping arcturus_me=
ssage_map[SMU_MSG_MAX_COUNT]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(SetMemoryChannelEn=
able,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp; PPSMC_MSG_SetMemoryChannelEnable),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping arcturus_clk_map[SMU_CLK_COUNT] =
=3D {<br>
&#43;static struct smu_map arcturus_clk_map[SMU_CLK_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(GFXCLK, PPCLK_GFXC=
LK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(SCLK,&nbsp;&nbsp; =
PPCLK_GFXCLK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(SOCCLK, PPCLK_SOCC=
LK),<br>
@@ -134,7 &#43;134,7 @@ static struct smu_11_0_cmn2aisc_mapping arcturus_cl=
k_map[SMU_CLK_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(VCLK, PPCLK_VCLK),=
<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping arcturus_feature_mask_map[SMU_FEAT=
URE_COUNT] =3D {<br>
&#43;static struct smu_map arcturus_feature_mask_map[SMU_FEATURE_COUNT] =3D=
 {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_PREFETCHER),<b=
r>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_GFXCLK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_UCLK),<br>
@@ -161,7 &#43;161,7 @@ static struct smu_11_0_cmn2aisc_mapping arcturus_fe=
ature_mask_map[SMU_FEATURE_CO<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(TEMP_DEPENDENT_VMI=
N),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping arcturus_table_map[SMU_TABLE_COUNT=
] =3D {<br>
&#43;static struct smu_map arcturus_table_map[SMU_TABLE_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(PPTABLE),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(AVFS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(AVFS_PSM_DEBUG),<b=
r>
@@ -172,12 &#43;172,12 @@ static struct smu_11_0_cmn2aisc_mapping arcturus_=
table_map[SMU_TABLE_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(OVERDRIVE),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping arcturus_pwr_src_map[SMU_POWER_SOU=
RCE_COUNT] =3D {<br>
&#43;static struct smu_map arcturus_pwr_src_map[SMU_POWER_SOURCE_COUNT] =3D=
 {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PWR_MAP(AC),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PWR_MAP(DC),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping arcturus_workload_map[PP_SMC_POWER=
_PROFILE_COUNT] =3D {<br>
&#43;static struct smu_map arcturus_workload_map[PP_SMC_POWER_PROFILE_COUNT=
] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_BOOTUP_DEFAULT,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_PPLIB_=
DEFAULT_BIT),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_POWERSAVING,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
WORKLOAD_PPLIB_POWER_SAVING_BIT),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_VIDEO,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_PPLIB_VIDEO_BIT),<br>
@@ -185,98 &#43;185,34 @@ static struct smu_11_0_cmn2aisc_mapping arcturus_=
workload_map[PP_SMC_POWER_PROFI<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_CUSTOM,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_PPLIB_CUSTOM_BIT),<br>
&nbsp;};<br>
&nbsp;<br>
-static int arcturus_get_smu_msg_index(struct smu_context *smc, uint32_t in=
dex)<br>
&#43;static int arcturus_get_smu_msg_index(struct smu_context *smu, uint32_=
t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_MSG_MAX_COUNT)<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D arcturus_message_map[inde=
x];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping))<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, arctur=
us_message_map, SMU_MSG_MAX_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int arcturus_get_smu_clk_index(struct smu_context *smc, uint32_t in=
dex)<br>
&#43;static int arcturus_get_smu_clk_index(struct smu_context *smu, uint32_=
t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_CLK_COUNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D arcturus_clk_map[index];<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; pr_warn(&quot;Unsupported SMU clk: %d\n&quot;, index);<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, arctur=
us_clk_map, SMU_CLK_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int arcturus_get_smu_feature_index(struct smu_context *smc, uint32_=
t index)<br>
&#43;static int arcturus_get_smu_feature_index(struct smu_context *smu, uin=
t32_t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_FEATURE_COUNT)<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D arcturus_feature_mask_map=
[index];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, arctur=
us_feature_mask_map, SMU_FEATURE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int arcturus_get_smu_table_index(struct smu_context *smc, uint32_t =
index)<br>
&#43;static int arcturus_get_smu_table_index(struct smu_context *smu, uint3=
2_t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_TABLE_COUNT)<br=
>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D arcturus_table_map[index]=
;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; pr_warn(&quot;Unsupported SMU table: %d\n&quot;, index);<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, arctur=
us_table_map, SMU_TABLE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int arcturus_get_pwr_src_index(struct smu_context *smc, uint32_t in=
dex)<br>
&#43;static int arcturus_get_pwr_src_index(struct smu_context *smu, uint32_=
t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_POWER_SOURCE_CO=
UNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D arcturus_pwr_src_map[inde=
x];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; pr_warn(&quot;Unsupported SMU power source: %d\n&quot;, index);<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, arctur=
us_pwr_src_map, SMU_POWER_SOURCE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-<br>
&nbsp;static int arcturus_get_workload_type(struct smu_context *smu, enum P=
P_SMC_POWER_PROFILE profile)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (profile &gt; PP_SMC_POWER_PROFILE=
_CUSTOM)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D arcturus_workload_map[pro=
file];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; pr_warn(&quot;Unsupported SMU power source: %d\n&quot;, profile)=
;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, arctur=
us_workload_map, PP_SMC_POWER_PROFILE_COUNT, (uint32_t)profile);<br>
&nbsp;}<br>
&nbsp;<br>
&nbsp;static int arcturus_tables_init(struct smu_context *smu, struct smu_t=
able *tables)<br>
diff --git a/drivers/gpu/drm/amd/powerplay/inc/amdgpu_smu.h b/drivers/gpu/d=
rm/amd/powerplay/inc/amdgpu_smu.h<br>
index fc59d9686e61..6404ad5249d4 100644<br>
--- a/drivers/gpu/drm/amd/powerplay/inc/amdgpu_smu.h<br>
&#43;&#43;&#43; b/drivers/gpu/drm/amd/powerplay/inc/amdgpu_smu.h<br>
@@ -206,6 &#43;206,11 @@ struct smu_clock_info {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t max_bus_bandwidth=
;<br>
&nbsp;};<br>
&nbsp;<br>
&#43;struct smu_map {<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool valid;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int value;<br>
&#43;};<br>
&#43;<br>
&nbsp;struct smu_bios_boot_up_values<br>
&nbsp;{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; revision;<br>
@@ -809,5 &#43;814,7 @@ const char *smu_get_message_name(struct smu_context=
 *smu, enum smu_message_type<br>
&nbsp;const char *smu_get_feature_name(struct smu_context *smu, enum smu_fe=
ature_mask feature);<br>
&nbsp;size_t smu_sys_get_pp_feature_mask(struct smu_context *smu, char *buf=
);<br>
&nbsp;int smu_sys_set_pp_feature_mask(struct smu_context *smu, uint64_t new=
_mask);<br>
&#43;int smu_map_helper(struct smu_context *smu, struct smu_map *map_src,<b=
r>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t max_index, uint32_t index);<br>
&nbsp;<br>
&nbsp;#endif<br>
diff --git a/drivers/gpu/drm/amd/powerplay/inc/smu_v11_0.h b/drivers/gpu/dr=
m/amd/powerplay/inc/smu_v11_0.h<br>
index acbb83d179be..ef59850b3fef 100644<br>
--- a/drivers/gpu/drm/amd/powerplay/inc/smu_v11_0.h<br>
&#43;&#43;&#43; b/drivers/gpu/drm/amd/powerplay/inc/smu_v11_0.h<br>
@@ -49,24 &#43;49,19 @@<br>
&nbsp;#define SMU11_TOOL_SIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0x19000<br>
&nbsp;<br>
&nbsp;#define CLK_MAP(clk, index) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_##clk] =3D {1, (index)}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_##clk] =3D {true, (index)}<b=
r>
&nbsp;<br>
&nbsp;#define FEA_MAP(fea) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_FEATURE_##fea##_BIT] =3D {1, FEA=
TURE_##fea##_BIT}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_FEATURE_##fea##_BIT] =3D {tr=
ue, FEATURE_##fea##_BIT}<br>
&nbsp;<br>
&nbsp;#define TAB_MAP(tab) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_TABLE_##tab] =3D {1, TABLE_##tab=
}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_TABLE_##tab] =3D {true, TABL=
E_##tab}<br>
&nbsp;<br>
&nbsp;#define PWR_MAP(tab) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_POWER_SOURCE_##tab] =3D {1, POWE=
R_SOURCE_##tab}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_POWER_SOURCE_##tab] =3D {tru=
e, POWER_SOURCE_##tab}<br>
&nbsp;<br>
&nbsp;#define WORKLOAD_MAP(profile, workload) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [profile] =3D {1, (workload)}<br>
-<br>
-struct smu_11_0_cmn2aisc_mapping {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp; valid_map=
ping;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp; map_to;<b=
r>
-};<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [profile] =3D {true, (workload)}<=
br>
&nbsp;<br>
&nbsp;struct smu_11_0_max_sustainable_clocks {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t display_clock;<br=
>
diff --git a/drivers/gpu/drm/amd/powerplay/navi10_ppt.c b/drivers/gpu/drm/a=
md/powerplay/navi10_ppt.c<br>
index 920156e9fb9d..9838beecec2e 100644<br>
--- a/drivers/gpu/drm/amd/powerplay/navi10_ppt.c<br>
&#43;&#43;&#43; b/drivers/gpu/drm/amd/powerplay/navi10_ppt.c<br>
@@ -49,9 &#43;49,9 @@<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEATURE_MASK(FEATURE_DPM_D=
CEFCLK_BIT))<br>
&nbsp;<br>
&nbsp;#define MSG_MAP(msg, index) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_MSG_##msg] =3D {1, (index)}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_MSG_##msg] =3D {true, (index=
)}<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping navi10_message_map[SMU_MSG_MAX_COU=
NT] =3D {<br>
&#43;static struct smu_map navi10_message_map[SMU_MSG_MAX_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(TestMessage,&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PPSMC_MSG_TestMessage),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetSmuVersion,&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp; PPSMC_MSG_GetSmuVersion),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetDriverIfVersion=
,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; P=
PSMC_MSG_GetDriverIfVersion),<br>
@@ -118,7 &#43;118,7 @@ static struct smu_11_0_cmn2aisc_mapping navi10_mess=
age_map[SMU_MSG_MAX_COUNT] =3D<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(ArmD3,&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; PPSMC_MSG_ArmD3),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping navi10_clk_map[SMU_CLK_COUNT] =3D =
{<br>
&#43;static struct smu_map navi10_clk_map[SMU_CLK_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(GFXCLK, PPCLK_GFXC=
LK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(SCLK,&nbsp;&nbsp; =
PPCLK_GFXCLK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(SOCCLK, PPCLK_SOCC=
LK),<br>
@@ -133,7 &#43;133,7 @@ static struct smu_11_0_cmn2aisc_mapping navi10_clk_=
map[SMU_CLK_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(PHYCLK, PPCLK_PHYC=
LK),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping navi10_feature_mask_map[SMU_FEATUR=
E_COUNT] =3D {<br>
&#43;static struct smu_map navi10_feature_mask_map[SMU_FEATURE_COUNT] =3D {=
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_PREFETCHER),<b=
r>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_GFXCLK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_GFX_PACE),<br>
@@ -178,7 &#43;178,7 @@ static struct smu_11_0_cmn2aisc_mapping navi10_feat=
ure_mask_map[SMU_FEATURE_COUN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(ATHUB_PG),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping navi10_table_map[SMU_TABLE_COUNT] =
=3D {<br>
&#43;static struct smu_map navi10_table_map[SMU_TABLE_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(PPTABLE),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(WATERMARKS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(AVFS),<br>
@@ -193,12 &#43;193,12 @@ static struct smu_11_0_cmn2aisc_mapping navi10_ta=
ble_map[SMU_TABLE_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(PACE),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping navi10_pwr_src_map[SMU_POWER_SOURC=
E_COUNT] =3D {<br>
&#43;static struct smu_map navi10_pwr_src_map[SMU_POWER_SOURCE_COUNT] =3D {=
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PWR_MAP(AC),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PWR_MAP(DC),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping navi10_workload_map[PP_SMC_POWER_P=
ROFILE_COUNT] =3D {<br>
&#43;static struct smu_map navi10_workload_map[PP_SMC_POWER_PROFILE_COUNT] =
=3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_BOOTUP_DEFAULT,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_PPLIB_=
DEFAULT_BIT),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_FULLSCREEN3D,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKL=
OAD_PPLIB_FULL_SCREEN_3D_BIT),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_POWERSAVING,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
WORKLOAD_PPLIB_POWER_SAVING_BIT),<br>
@@ -208,95 &#43;208,34 @@ static struct smu_11_0_cmn2aisc_mapping navi10_wo=
rkload_map[PP_SMC_POWER_PROFILE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_CUSTOM,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_PPLIB_CUSTOM_BIT),<br>
&nbsp;};<br>
&nbsp;<br>
-static int navi10_get_smu_msg_index(struct smu_context *smc, uint32_t inde=
x)<br>
&#43;static int navi10_get_smu_msg_index(struct smu_context *smu, uint32_t =
index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt; SMU_MSG_MAX_COUNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D navi10_message_map[index]=
;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, navi10=
_message_map, SMU_MSG_MAX_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int navi10_get_smu_clk_index(struct smu_context *smc, uint32_t inde=
x)<br>
&#43;static int navi10_get_smu_clk_index(struct smu_context *smu, uint32_t =
index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_CLK_COUNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D navi10_clk_map[index];<br=
>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, navi10=
_clk_map, SMU_CLK_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int navi10_get_smu_feature_index(struct smu_context *smc, uint32_t =
index)<br>
&#43;static int navi10_get_smu_feature_index(struct smu_context *smu, uint3=
2_t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_FEATURE_COUNT)<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D navi10_feature_mask_map[i=
ndex];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, navi10=
_feature_mask_map, SMU_FEATURE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int navi10_get_smu_table_index(struct smu_context *smc, uint32_t in=
dex)<br>
&#43;static int navi10_get_smu_table_index(struct smu_context *smu, uint32_=
t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_TABLE_COUNT)<br=
>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D navi10_table_map[index];<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, navi10=
_table_map, SMU_TABLE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int navi10_get_pwr_src_index(struct smu_context *smc, uint32_t inde=
x)<br>
&#43;static int navi10_get_pwr_src_index(struct smu_context *smu, uint32_t =
index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_POWER_SOURCE_CO=
UNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D navi10_pwr_src_map[index]=
;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, navi10=
_pwr_src_map, SMU_POWER_SOURCE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-<br>
&nbsp;static int navi10_get_workload_type(struct smu_context *smu, enum PP_=
SMC_POWER_PROFILE profile)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (profile &gt; PP_SMC_POWER_PROFILE=
_CUSTOM)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D navi10_workload_map[profi=
le];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, navi10=
_workload_map, PP_SMC_POWER_PROFILE_COUNT, (uint32_t)profile);<br>
&nbsp;}<br>
&nbsp;<br>
&nbsp;static bool is_asic_secure(struct smu_context *smu)<br>
diff --git a/drivers/gpu/drm/amd/powerplay/vega20_ppt.c b/drivers/gpu/drm/a=
md/powerplay/vega20_ppt.c<br>
index acf075393c13..6162be25b6d2 100644<br>
--- a/drivers/gpu/drm/amd/powerplay/vega20_ppt.c<br>
&#43;&#43;&#43; b/drivers/gpu/drm/amd/powerplay/vega20_ppt.c<br>
@@ -47,7 &#43;47,7 @@<br>
&nbsp;#define CTF_OFFSET_HBM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5<br>
&nbsp;<br>
&nbsp;#define MSG_MAP(msg) \<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_MSG_##msg] =3D {1, PPSMC_MSG_##m=
sg}<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [SMU_MSG_##msg] =3D {true, PPSMC_=
MSG_##msg}<br>
&nbsp;<br>
&nbsp;#define SMC_DPM_FEATURE (FEATURE_DPM_PREFETCHER_MASK | \<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
 FEATURE_DPM_GFXCLK_MASK | \<br>
@@ -59,7 &#43;59,7 @@<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
 FEATURE_DPM_LINK_MASK | \<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
 FEATURE_DPM_DCEFCLK_MASK)<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping vega20_message_map[SMU_MSG_MAX_COU=
NT] =3D {<br>
&#43;static struct smu_map vega20_message_map[SMU_MSG_MAX_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(TestMessage),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetSmuVersion),<br=
>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetDriverIfVersion=
),<br>
@@ -145,7 &#43;145,7 @@ static struct smu_11_0_cmn2aisc_mapping vega20_mess=
age_map[SMU_MSG_MAX_COUNT] =3D<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MSG_MAP(GetAVFSVoltageByDp=
m),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping vega20_clk_map[SMU_CLK_COUNT] =3D =
{<br>
&#43;static struct smu_map vega20_clk_map[SMU_CLK_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(GFXCLK, PPCLK_GFXC=
LK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(VCLK, PPCLK_VCLK),=
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(DCLK, PPCLK_DCLK),=
<br>
@@ -159,7 &#43;159,7 @@ static struct smu_11_0_cmn2aisc_mapping vega20_clk_=
map[SMU_CLK_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CLK_MAP(FCLK, PPCLK_FCLK),=
<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping vega20_feature_mask_map[SMU_FEATUR=
E_COUNT] =3D {<br>
&#43;static struct smu_map vega20_feature_mask_map[SMU_FEATURE_COUNT] =3D {=
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_PREFETCHER),<b=
r>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_GFXCLK),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(DPM_UCLK),<br>
@@ -195,7 &#43;195,7 @@ static struct smu_11_0_cmn2aisc_mapping vega20_feat=
ure_mask_map[SMU_FEATURE_COUN<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FEA_MAP(XGMI),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping vega20_table_map[SMU_TABLE_COUNT] =
=3D {<br>
&#43;static struct smu_map vega20_table_map[SMU_TABLE_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(PPTABLE),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(WATERMARKS),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(AVFS),<br>
@@ -208,12 &#43;208,12 @@ static struct smu_11_0_cmn2aisc_mapping vega20_ta=
ble_map[SMU_TABLE_COUNT] =3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TAB_MAP(OVERDRIVE),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping vega20_pwr_src_map[SMU_POWER_SOURC=
E_COUNT] =3D {<br>
&#43;static struct smu_map vega20_pwr_src_map[SMU_POWER_SOURCE_COUNT] =3D {=
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PWR_MAP(AC),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PWR_MAP(DC),<br>
&nbsp;};<br>
&nbsp;<br>
-static struct smu_11_0_cmn2aisc_mapping vega20_workload_map[PP_SMC_POWER_P=
ROFILE_COUNT] =3D {<br>
&#43;static struct smu_map vega20_workload_map[PP_SMC_POWER_PROFILE_COUNT] =
=3D {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_BOOTUP_DEFAULT,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_DEFAUL=
T_BIT),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_FULLSCREEN3D,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKL=
OAD_PPLIB_FULL_SCREEN_3D_BIT),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_POWERSAVING,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
WORKLOAD_PPLIB_POWER_SAVING_BIT),<br>
@@ -223,94 &#43;223,34 @@ static struct smu_11_0_cmn2aisc_mapping vega20_wo=
rkload_map[PP_SMC_POWER_PROFILE<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_MAP(PP_SMC_POWER_=
PROFILE_CUSTOM,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp; WORKLOAD_PPLIB_CUSTOM_BIT),<br>
&nbsp;};<br>
&nbsp;<br>
-static int vega20_get_smu_table_index(struct smu_context *smc, uint32_t in=
dex)<br>
&#43;static int vega20_get_smu_table_index(struct smu_context *smu, uint32_=
t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_TABLE_COUNT)<br=
>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D vega20_table_map[index];<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, vega20=
_table_map, SMU_TABLE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int vega20_get_pwr_src_index(struct smu_context *smc, uint32_t inde=
x)<br>
&#43;static int vega20_get_pwr_src_index(struct smu_context *smu, uint32_t =
index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_POWER_SOURCE_CO=
UNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D vega20_pwr_src_map[index]=
;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, vega20=
_pwr_src_map, SMU_POWER_SOURCE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int vega20_get_smu_feature_index(struct smu_context *smc, uint32_t =
index)<br>
&#43;static int vega20_get_smu_feature_index(struct smu_context *smu, uint3=
2_t index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_FEATURE_COUNT)<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D vega20_feature_mask_map[i=
ndex];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, vega20=
_feature_mask_map, SMU_FEATURE_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int vega20_get_smu_clk_index(struct smu_context *smc, uint32_t inde=
x)<br>
&#43;static int vega20_get_smu_clk_index(struct smu_context *smu, uint32_t =
index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_CLK_COUNT)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D vega20_clk_map[index];<br=
>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, vega20=
_clk_map, SMU_CLK_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
-static int vega20_get_smu_msg_index(struct smu_context *smc, uint32_t inde=
x)<br>
&#43;static int vega20_get_smu_msg_index(struct smu_context *smu, uint32_t =
index)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (index &gt;=3D SMU_MSG_MAX_COUNT)<=
br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D vega20_message_map[index]=
;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, vega20=
_message_map, SMU_MSG_MAX_COUNT, index);<br>
&nbsp;}<br>
&nbsp;<br>
&nbsp;static int vega20_get_workload_type(struct smu_context *smu, enum PP_=
SMC_POWER_PROFILE profile)<br>
&nbsp;{<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct smu_11_0_cmn2aisc_mapping mapp=
ing;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (profile &gt; PP_SMC_POWER_PROFILE=
_CUSTOM)<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mapping =3D vega20_workload_map[profi=
le];<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(mapping.valid_mapping)) {<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp; return -EINVAL;<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
-<br>
-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return mapping.map_to;<br>
&#43;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return smu_map_helper(smu, vega20=
_workload_map, PP_SMC_POWER_PROFILE_COUNT, (uint32_t)profile);<br>
&nbsp;}<br>
&nbsp;<br>
&nbsp;static int vega20_tables_init(struct smu_context *smu, struct smu_tab=
le *tables)<br>
-- <br>
2.22.0<br>
<br>
_______________________________________________<br>
amd-gfx mailing list<br>
amd-gfx@lists.freedesktop.org<br>
<a href=3D"https://lists.freedesktop.org/mailman/listinfo/amd-gfx">https://=
lists.freedesktop.org/mailman/listinfo/amd-gfx</a></div>
</span></font>
</body>
</html>

--_000_MN2PR12MB334484F5217CE6E9269600C8E4AB0MN2PR12MB3344namp_--

--===============1353540583==
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: base64
Content-Disposition: inline

X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KYW1kLWdmeCBt
YWlsaW5nIGxpc3QKYW1kLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5m
cmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9hbWQtZ2Z4

--===============1353540583==--
