Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 00204F374F
	for <lists+amd-gfx@lfdr.de>; Thu,  7 Nov 2019 19:34:36 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 795946F787;
	Thu,  7 Nov 2019 18:34:35 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from mail-io1-xd33.google.com (mail-io1-xd33.google.com
 [IPv6:2607:f8b0:4864:20::d33])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 086A26F787
 for <amd-gfx@lists.freedesktop.org>; Thu,  7 Nov 2019 18:34:34 +0000 (UTC)
Received: by mail-io1-xd33.google.com with SMTP id q83so3435943iod.1
 for <amd-gfx@lists.freedesktop.org>; Thu, 07 Nov 2019 10:34:33 -0800 (PST)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:cc:subject:date:message-id:in-reply-to
 :references:mime-version:content-transfer-encoding;
 bh=87r3q2Lo7qck0G/N04MSD2Z1DjFJAKRpUUICDvcRCPU=;
 b=d7WbvvOr3N5XLnUOYfyHksHTP+dK0fVLDOeu9Ix7JKChYHyznQTQyhi8ju4OIkxivA
 +AXwWonX7nOfeBCiU95pEgo5lk0UYE1QEKB6TckpysYsDrtH9brWEVIQPMaQIBDcc+5h
 1kCMh8l/kpomGMCUDPDE0bJiYVUIEU8Z7o6bwh4TyW/F9gdDhaFErJIAowVXXA64/U+V
 YaZ29MhfRstfo4jjdFyIzWTYGYeKC+2i0CAKWghJkWxaMNuzjgqBrNuGmHE2eCYXXHnS
 /kNqlDBGrsv/ZydSlYdRL283AveQjeIowEn7g5Y+5viFryTXxyDqBfaDpYh1Lvh2wV8N
 86hA==
X-Gm-Message-State: APjAAAWc9z8KA8iIhBMNG1vTCqx4mRee2BxFTkzfdc3md1ugM4toO8WK
 2qHVV+v+f0XwjClLFXVVw4eovjjYwzg=
X-Google-Smtp-Source: APXvYqybjBvAlIDwfx/9ii8XSnAz3eVdKEf6iXLxBg1Y2qNAOWyAyWi+bR2UF5OATUPPMlOdWy47Dg==
X-Received: by 2002:a02:c809:: with SMTP id p9mr5630343jao.87.1573151672903;
 Thu, 07 Nov 2019 10:34:32 -0800 (PST)
Received: from localhost.localdomain ([2602:47:da84:5600:6d4:c4ff:fe4a:ea6b])
 by smtp.gmail.com with ESMTPSA id
 r25sm420100ilb.16.2019.11.07.10.34.32
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Thu, 07 Nov 2019 10:34:32 -0800 (PST)
From: Matt Coffin <mcoffin13@gmail.com>
To: amd-gfx@lists.freedesktop.org
Subject: [PATCH 1/3] drm/amdgpu/navi10: implement sclk/mclk OD via
 pp_od_clk_voltage
Date: Thu,  7 Nov 2019 11:34:22 -0700
Message-Id: <8573e9199daf592f6e6e5a807b69b37bb80f156a.1573151434.git.mcoffin13@gmail.com>
X-Mailer: git-send-email 2.23.0
In-Reply-To: <cover.1573151434.git.mcoffin13@gmail.com>
References: <cover.1573151434.git.mcoffin13@gmail.com>
MIME-Version: 1.0
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=gmail.com; s=20161025;
 h=from:to:cc:subject:date:message-id:in-reply-to:references
 :mime-version:content-transfer-encoding;
 bh=87r3q2Lo7qck0G/N04MSD2Z1DjFJAKRpUUICDvcRCPU=;
 b=PBXB/4hkkEYHwAOIdUawy5rDc58P/JOXwyOD4X3oUpS4Cafkrji7rLVSIDYjgc4Jzd
 ehvZWC+WuRBg70VsdjHtVvhr6n3YLGTXK0XI0Ru6Tnq+58y6kMNGCViU1waXE07e/Cr+
 LqkN1CgRzefLcLYncemyGh6fWQIGJbpAcoM+n9xbUVmgNRhUIu83GdXrD1hOU8bTuzyT
 qzaugWFpQGbyuzqnYQwqwSKdMEHVNTteS6DsdUBES95PQ+JYzDAl9GuIm0O3tVTU2QAA
 IGfI/AC4BoJYlie93WS6FQHUEyde+Nwc61pJ9PupRuiXPI+XWdOHNnhZXpFyGg6W0Y9I
 N+PA==
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: Matt Coffin <mcoffin13@gmail.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

W1doeV0KQmVmb3JlIHRoaXMgcGF0Y2gsIHRoZXJlIHdhcyBubyB3YXkgdG8gdXNlIHBwX29kX2Ns
a192b2x0YWdlIG9uIG5hdmkKCltIb3ddClNpbWlsYXIgdG8gdGhlIHZlZ2EyMCBpbXBsZW1lbnRh
dGlvbiwgYnV0IHVzaW5nIHRoZSBjb21tb24gc21jX3YxMV8wCmhlYWRlcnMsIGltcGxlbWVudGVk
IHRoZSBwcF9vZF9jbGtfdm9sdGFnZSBBUEkgZm9yIG5hdmkxMCdzIHBwdGFibGUKaW1wbGVtZW50
YXRpb24KLS0tCiBkcml2ZXJzL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9pbmMvc211X3YxMV8wLmgg
fCAgIDEgKwogZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvbmF2aTEwX3BwdC5jICAgIHwg
MTg1ICsrKysrKysrKysrKysrKysrKwogZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvc211
X3YxMV8wLmMgICAgIHwgIDI3ICsrKwogMyBmaWxlcyBjaGFuZ2VkLCAyMTMgaW5zZXJ0aW9ucygr
KQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L2luYy9zbXVfdjEx
XzAuaCBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L2luYy9zbXVfdjExXzAuaAppbmRl
eCA1YmRhODUzOTQ0N2EuLjEzM2E1M2RhNjc4NSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJt
L2FtZC9wb3dlcnBsYXkvaW5jL3NtdV92MTFfMC5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQv
cG93ZXJwbGF5L2luYy9zbXVfdjExXzAuaApAQCAtMTMwLDYgKzEzMCw3IEBAIGVudW0gc211X3Yx
MV8wX2JhY29fc2VxIHsKIAlCQUNPX1NFUV9DT1VOVCwKIH07CiAKK2ludCBzbXVfdjExXzBfc2V0
X2RlZmF1bHRfb2Rfc2V0dGluZ3Moc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIGJvb2wgaW5pdGlh
bGl6ZSwgc2l6ZV90IG92ZXJkcml2ZV90YWJsZV9zaXplKTsKIHZvaWQgc211X3YxMV8wX3NldF9z
bXVfZnVuY3Moc3RydWN0IHNtdV9jb250ZXh0ICpzbXUpOwogCiAjZW5kaWYKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuYyBiL2RyaXZlcnMvZ3B1
L2RybS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuYwppbmRleCAwYjQ2MTQwNGFmNmIuLjZkMGU1
MTFhZDA5MyAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvbmF2aTEw
X3BwdC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuYwpA
QCAtMTU5MSw2ICsxNTkxLDE4OSBAQCBzdGF0aWMgaW50IG5hdmkxMF9nZXRfcG93ZXJfbGltaXQo
c3RydWN0IHNtdV9jb250ZXh0ICpzbXUsCiAJcmV0dXJuIDA7CiB9CiAKK3N0YXRpYyBpbmxpbmUg
dm9pZCBuYXZpMTBfZHVtcF9vZF90YWJsZShPdmVyRHJpdmVUYWJsZV90ICpvZF90YWJsZSkgewor
CXByX2RlYnVnKCJPRDogR2Z4Y2xrOiAoJWQsICVkKVxuIiwgb2RfdGFibGUtPkdmeGNsa0ZtaW4s
IG9kX3RhYmxlLT5HZnhjbGtGbWF4KTsKKwlwcl9kZWJ1ZygiT0Q6IEdmeDE6ICglZCwgJWQpXG4i
LCBvZF90YWJsZS0+R2Z4Y2xrRnJlcTEsIG9kX3RhYmxlLT5HZnhjbGtWb2x0MSk7CisJcHJfZGVi
dWcoIk9EOiBHZngyOiAoJWQsICVkKVxuIiwgb2RfdGFibGUtPkdmeGNsa0ZyZXEyLCBvZF90YWJs
ZS0+R2Z4Y2xrVm9sdDIpOworCXByX2RlYnVnKCJPRDogR2Z4MzogKCVkLCAlZClcbiIsIG9kX3Rh
YmxlLT5HZnhjbGtGcmVxMywgb2RfdGFibGUtPkdmeGNsa1ZvbHQzKTsKKwlwcl9kZWJ1ZygiT0Q6
IFVjbGtGbWF4OiAlZFxuIiwgb2RfdGFibGUtPlVjbGtGbWF4KTsKKwlwcl9kZWJ1ZygiT0Q6IE92
ZXJEcml2ZVBjdDogJWRcbiIsIG9kX3RhYmxlLT5PdmVyRHJpdmVQY3QpOworfQorCitzdGF0aWMg
aW5saW5lIGJvb2wgbmF2aTEwX29kX2ZlYXR1cmVfaXNfc3VwcG9ydGVkKHN0cnVjdCBzbXVfMTFf
MF9vdmVyZHJpdmVfdGFibGUgKm9kX3RhYmxlLCBlbnVtIFNNVV8xMV8wX09ERkVBVFVSRV9JRCBm
ZWF0dXJlKQoreworCXJldHVybiBvZF90YWJsZS0+Y2FwW2ZlYXR1cmVdOworfQorCitzdGF0aWMg
aW50IG5hdmkxMF9vZF9zZXR0aW5nX2NoZWNrX3JhbmdlKHN0cnVjdCBzbXVfMTFfMF9vdmVyZHJp
dmVfdGFibGUgKm9kX3RhYmxlLCBlbnVtIFNNVV8xMV8wX09EU0VUVElOR19JRCBzZXR0aW5nLCB1
aW50MzJfdCB2YWx1ZSkKK3sKKwlpZiAodmFsdWUgPCBvZF90YWJsZS0+bWluW3NldHRpbmddKSB7
CisJCXByX3dhcm4oIk9EIHNldHRpbmcgKCVkLCAlZCkgaXMgbGVzcyB0aGFuIHRoZSBtaW5pbXVt
IGFsbG93ZWQgKCVkKVxuIiwgc2V0dGluZywgdmFsdWUsIG9kX3RhYmxlLT5taW5bc2V0dGluZ10p
OworCQlyZXR1cm4gLUVJTlZBTDsKKwl9CisJaWYgKHZhbHVlID4gb2RfdGFibGUtPm1heFtzZXR0
aW5nXSkgeworCQlwcl93YXJuKCJPRCBzZXR0aW5nICglZCwgJWQpIGlzIGdyZWF0ZXIgdGhhbiB0
aGUgbWF4aW11bSBhbGxvd2VkICglZClcbiIsIHNldHRpbmcsIHZhbHVlLCBvZF90YWJsZS0+bWF4
W3NldHRpbmddKTsKKwkJcmV0dXJuIC1FSU5WQUw7CisJfQorCXJldHVybiAwOworfQorCitzdGF0
aWMgaW50IG5hdmkxMF9zZXR1cF9vZF9saW1pdHMoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUpIHsK
KwlzdHJ1Y3Qgc211XzExXzBfb3ZlcmRyaXZlX3RhYmxlICpvdmVyZHJpdmVfdGFibGUgPSBOVUxM
OworCXN0cnVjdCBzbXVfMTFfMF9wb3dlcnBsYXlfdGFibGUgKnBvd2VycGxheV90YWJsZSA9IE5V
TEw7CisKKwlpZiAoIXNtdS0+c211X3RhYmxlLnBvd2VyX3BsYXlfdGFibGUpIHsKKwkJcHJfZXJy
KCJwb3dlcnBsYXkgdGFibGUgdW5pbml0aWFsaXplZCFcbiIpOworCQlyZXR1cm4gLUVOT0VOVDsK
Kwl9CisJcG93ZXJwbGF5X3RhYmxlID0gKHN0cnVjdCBzbXVfMTFfMF9wb3dlcnBsYXlfdGFibGUg
KilzbXUtPnNtdV90YWJsZS5wb3dlcl9wbGF5X3RhYmxlOworCW92ZXJkcml2ZV90YWJsZSA9ICZw
b3dlcnBsYXlfdGFibGUtPm92ZXJkcml2ZV90YWJsZTsKKwlpZiAoIXNtdS0+b2Rfc2V0dGluZ3Mp
IHsKKwkJc211LT5vZF9zZXR0aW5ncyA9IGttZW1kdXAob3ZlcmRyaXZlX3RhYmxlLCBzaXplb2Yo
c3RydWN0IHNtdV8xMV8wX292ZXJkcml2ZV90YWJsZSksIEdGUF9LRVJORUwpOworCX0gZWxzZSB7
CisJCW1lbWNweShzbXUtPm9kX3NldHRpbmdzLCBvdmVyZHJpdmVfdGFibGUsIHNpemVvZihzdHJ1
Y3Qgc211XzExXzBfb3ZlcmRyaXZlX3RhYmxlKSk7CisJfQorCXJldHVybiAwOworfQorCitzdGF0
aWMgaW50IG5hdmkxMF9zZXRfZGVmYXVsdF9vZF9zZXR0aW5ncyhzdHJ1Y3Qgc211X2NvbnRleHQg
KnNtdSwgYm9vbCBpbml0aWFsaXplKSB7CisJT3ZlckRyaXZlVGFibGVfdCAqb2RfdGFibGU7CisJ
aW50IHJldCA9IDA7CisKKwlyZXQgPSBzbXVfdjExXzBfc2V0X2RlZmF1bHRfb2Rfc2V0dGluZ3Mo
c211LCBpbml0aWFsaXplLCBzaXplb2YoT3ZlckRyaXZlVGFibGVfdCkpOworCWlmIChyZXQpCisJ
CXJldHVybiByZXQ7CisKKwlpZiAoaW5pdGlhbGl6ZSkgeworCQlyZXQgPSBuYXZpMTBfc2V0dXBf
b2RfbGltaXRzKHNtdSk7CisJCWlmIChyZXQpIHsKKwkJCXByX2VycigiRmFpbGVkIHRvIHJldHJp
ZXZlIGJvYXJkIE9EIGxpbWl0c1xuIik7CisJCQlyZXR1cm4gcmV0OworCQl9CisKKwl9CisKKwlv
ZF90YWJsZSA9IChPdmVyRHJpdmVUYWJsZV90ICopc211LT5zbXVfdGFibGUub3ZlcmRyaXZlX3Rh
YmxlOworCWlmIChvZF90YWJsZSkgeworCQluYXZpMTBfZHVtcF9vZF90YWJsZShvZF90YWJsZSk7
CisJfQorCisJcmV0dXJuIHJldDsKK30KKworc3RhdGljIGludCBuYXZpMTBfb2RfZWRpdF9kcG1f
dGFibGUoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIGVudW0gUFBfT0RfRFBNX1RBQkxFX0NPTU1B
TkQgdHlwZSwgbG9uZyBpbnB1dFtdLCB1aW50MzJfdCBzaXplKSB7CisJaW50IGk7CisJaW50IHJl
dCA9IDA7CisJc3RydWN0IHNtdV90YWJsZV9jb250ZXh0ICp0YWJsZV9jb250ZXh0ID0gJnNtdS0+
c211X3RhYmxlOworCU92ZXJEcml2ZVRhYmxlX3QgKm9kX3RhYmxlOworCXN0cnVjdCBzbXVfMTFf
MF9vdmVyZHJpdmVfdGFibGUgKm9kX3NldHRpbmdzOworCW9kX3RhYmxlID0gKE92ZXJEcml2ZVRh
YmxlX3QgKil0YWJsZV9jb250ZXh0LT5vdmVyZHJpdmVfdGFibGU7CisKKwlpZiAoIXNtdS0+b2Rf
ZW5hYmxlZCkgeworCQlwcl93YXJuKCJPdmVyRHJpdmUgaXMgbm90IGVuYWJsZWQhXG4iKTsKKwkJ
cmV0dXJuIC1FSU5WQUw7CisJfQorCisJaWYgKCFzbXUtPm9kX3NldHRpbmdzKSB7CisJCXByX2Vy
cigiT0QgYm9hcmQgbGltaXRzIGFyZSBub3Qgc2V0IVxuIik7CisJCXJldHVybiAtRU5PRU5UOwor
CX0KKworCW9kX3NldHRpbmdzID0gc211LT5vZF9zZXR0aW5nczsKKworCXN3aXRjaCAodHlwZSkg
eworCWNhc2UgUFBfT0RfRURJVF9TQ0xLX1ZERENfVEFCTEU6CisJCWlmICghbmF2aTEwX29kX2Zl
YXR1cmVfaXNfc3VwcG9ydGVkKG9kX3NldHRpbmdzLCBTTVVfMTFfMF9PREZFQVRVUkVfR0ZYQ0xL
X0xJTUlUUykpIHsKKwkJCXByX3dhcm4oIkdGWENMS19MSU1JVFMgbm90IHN1cHBvcnRlZCFcbiIp
OworCQkJcmV0dXJuIC1FTk9UU1VQUDsKKwkJfQorCQlpZiAoIXRhYmxlX2NvbnRleHQtPm92ZXJk
cml2ZV90YWJsZSkgeworCQkJcHJfZXJyKCJPdmVyZHJpdmUgaXMgbm90IGluaXRpYWxpemVkXG4i
KTsKKwkJCXJldHVybiAtRUlOVkFMOworCQl9CisJCWlmIChpbnB1dFswXSA+IGlucHV0WzFdKSB7
CisJCQlwcl9pbmZvKCJHZnhjbGtGbWluIG11c3QgYmUgbGVzcyB0aGFuIEdmeGNsa0ZtYXhcbiIp
OworCQkJcmV0dXJuIC1FSU5WQUw7CisJCX0KKwkJZm9yIChpID0gMDsgaSA8IHNpemU7IGkgKz0g
MikgeworCQkJaWYgKGkgKyAyID4gc2l6ZSkgeworCQkJCXByX2luZm8oImludmFsaWQgbnVtYmVy
IG9mIGlucHV0IHBhcmFtZXRlcnMgJWRcbiIsIHNpemUpOworCQkJCXJldHVybiAtRUlOVkFMOwor
CQkJfQorCQkJc3dpdGNoIChpbnB1dFtpXSkgeworCQkJY2FzZSAwOgorCQkJCWZyZXFfc2V0dGlu
ZyA9IFNNVV8xMV8wX09EU0VUVElOR19HRlhDTEtGTUlOOworCQkJCWZyZXFfcHRyID0gJm9kX3Rh
YmxlLT5HZnhjbGtGbWluOworCQkJCWlmIChpbnB1dFtpICsgMV0gPiBvZF90YWJsZS0+R2Z4Y2xr
Rm1heCkgeworCQkJCQlwcl9pbmZvKCJHZnhjbGtGbWluICglbGQpIG11c3QgYmUgPD0gR2Z4Y2xr
Rm1heCAoJXUpIVxuIiwKKwkJCQkJCWlucHV0W2kgKyAxXSwKKwkJCQkJCW9kX3RhYmxlLT5HZnhj
bGtGbWluKTsKKwkJCQkJcmV0dXJuIC1FSU5WQUw7CisJCQkJfQorCQkJCWJyZWFrOworCQkJY2Fz
ZSAxOgorCQkJCWZyZXFfc2V0dGluZyA9IFNNVV8xMV8wX09EU0VUVElOR19HRlhDTEtGTUFYOwor
CQkJCWZyZXFfcHRyID0gJm9kX3RhYmxlLT5HZnhjbGtGbWF4OworCQkJCWlmIChpbnB1dFtpICsg
MV0gPCBvZF90YWJsZS0+R2Z4Y2xrRm1pbikgeworCQkJCQlwcl9pbmZvKCJHZnhjbGtGbWF4ICgl
bGQpIG11c3QgYmUgPj0gR2Z4Y2xrRm1pbiAoJXUpIVxuIiwKKwkJCQkJCWlucHV0W2kgKyAxXSwK
KwkJCQkJCW9kX3RhYmxlLT5HZnhjbGtGbWF4KTsKKwkJCQkJcmV0dXJuIC1FSU5WQUw7CisJCQkJ
fQorCQkJCWJyZWFrOworCQkJZGVmYXVsdDoKKwkJCQlwcl9pbmZvKCJJbnZhbGlkIFNDTEtfVkRE
Q19UQUJMRSBpbmRleDogJWxkXG4iLCBpbnB1dFtpXSk7CisJCQkJcHJfaW5mbygiU3VwcG9ydGVk
IGluZGljZXM6IFswOm1pbiwxOm1heF1cbiIpOworCQkJCXJldHVybiAtRUlOVkFMOworCQkJfQor
CQkJcmV0ID0gbmF2aTEwX29kX3NldHRpbmdfY2hlY2tfcmFuZ2Uob2Rfc2V0dGluZ3MsIGZyZXFf
c2V0dGluZywgaW5wdXRbaSArIDFdKTsKKwkJCWlmIChyZXQpCisJCQkJcmV0dXJuIHJldDsKKwkJ
CSpmcmVxX3B0ciA9IGlucHV0W2kgKyAxXTsKKwkJfQorCQlicmVhazsKKwljYXNlIFBQX09EX0VE
SVRfTUNMS19WRERDX1RBQkxFOgorCQlpZiAoIW5hdmkxMF9vZF9mZWF0dXJlX2lzX3N1cHBvcnRl
ZChvZF9zZXR0aW5ncywgU01VXzExXzBfT0RGRUFUVVJFX1VDTEtfTUFYKSkgeworCQkJcHJfd2Fy
bigiVUNMS19NQVggbm90IHN1cHBvcnRlZCFcbiIpOworCQkJcmV0dXJuIC1FTk9UU1VQUDsKKwkJ
fQorCQlpZiAoc2l6ZSA8IDIpIHsKKwkJCXByX2luZm8oImludmFsaWQgbnVtYmVyIG9mIHBhcmFt
ZXRlcnM6ICVkXG4iLCBzaXplKTsKKwkJCXJldHVybiAtRUlOVkFMOworCQl9CisJCWlmIChpbnB1
dFswXSAhPSAxKSB7CisJCQlwcl9pbmZvKCJJbnZhbGlkIE1DTEtfVkREQ19UQUJMRSBpbmRleDog
JWxkXG4iLCBpbnB1dFswXSk7CisJCQlwcl9pbmZvKCJTdXBwb3J0ZWQgaW5kaWNlczogWzE6bWF4
XVxuIik7CisJCQlyZXR1cm4gLUVJTlZBTDsKKwkJfQorCQlyZXQgPSBuYXZpMTBfb2Rfc2V0dGlu
Z19jaGVja19yYW5nZShvZF9zZXR0aW5ncywgU01VXzExXzBfT0RTRVRUSU5HX1VDTEtGTUFYLCBp
bnB1dFsxXSk7CisJCWlmIChyZXQpCisJCQlyZXR1cm4gcmV0OworCQlvZF90YWJsZS0+VWNsa0Zt
YXggPSBpbnB1dFsxXTsKKwkJYnJlYWs7CisJY2FzZSBQUF9PRF9DT01NSVRfRFBNX1RBQkxFOgor
CQluYXZpMTBfZHVtcF9vZF90YWJsZShvZF90YWJsZSk7CisJCXJldCA9IHNtdV91cGRhdGVfdGFi
bGUoc211LCBTTVVfVEFCTEVfT1ZFUkRSSVZFLCAwLCAodm9pZCAqKW9kX3RhYmxlLCB0cnVlKTsK
KwkJaWYgKHJldCkgeworCQkJcHJfZXJyKCJGYWlsZWQgdG8gaW1wb3J0IG92ZXJkcml2ZSB0YWJs
ZSFcbiIpOworCQkJcmV0dXJuIHJldDsKKwkJfQorCQltdXRleF9sb2NrKCYoc211LT5tdXRleCkp
OworCQlyZXQgPSBzbXVfaGFuZGxlX3Rhc2soc211LCBzbXUtPnNtdV9kcG0uZHBtX2xldmVsLCBB
TURfUFBfVEFTS19SRUFESlVTVF9QT1dFUl9TVEFURSk7CisJCW11dGV4X3VubG9jaygmKHNtdS0+
bXV0ZXgpKTsKKwkJaWYgKHJldCkgeworCQkJcmV0dXJuIHJldDsKKwkJfQorCQlicmVhazsKKwlj
YXNlIFBQX09EX0VESVRfVkREQ19DVVJWRToKKwkJLy8gVE9ETzogaW1wbGVtZW50CisJCXJldHVy
biAtRU5PU1lTOworCWRlZmF1bHQ6CisJCXJldHVybiAtRU5PU1lTOworCX0KKwlyZXR1cm4gcmV0
OworfQorCiBzdGF0aWMgY29uc3Qgc3RydWN0IHBwdGFibGVfZnVuY3MgbmF2aTEwX3BwdF9mdW5j
cyA9IHsKIAkudGFibGVzX2luaXQgPSBuYXZpMTBfdGFibGVzX2luaXQsCiAJLmFsbG9jX2RwbV9j
b250ZXh0ID0gbmF2aTEwX2FsbG9jYXRlX2RwbV9jb250ZXh0LApAQCAtMTYyOSw2ICsxODEyLDgg
QEAgc3RhdGljIGNvbnN0IHN0cnVjdCBwcHRhYmxlX2Z1bmNzIG5hdmkxMF9wcHRfZnVuY3MgPSB7
CiAJLmdldF90aGVybWFsX3RlbXBlcmF0dXJlX3JhbmdlID0gbmF2aTEwX2dldF90aGVybWFsX3Rl
bXBlcmF0dXJlX3JhbmdlLAogCS5kaXNwbGF5X2Rpc2FibGVfbWVtb3J5X2Nsb2NrX3N3aXRjaCA9
IG5hdmkxMF9kaXNwbGF5X2Rpc2FibGVfbWVtb3J5X2Nsb2NrX3N3aXRjaCwKIAkuZ2V0X3Bvd2Vy
X2xpbWl0ID0gbmF2aTEwX2dldF9wb3dlcl9saW1pdCwKKwkuc2V0X2RlZmF1bHRfb2Rfc2V0dGlu
Z3MgPSBuYXZpMTBfc2V0X2RlZmF1bHRfb2Rfc2V0dGluZ3MsCisJLm9kX2VkaXRfZHBtX3RhYmxl
ID0gbmF2aTEwX29kX2VkaXRfZHBtX3RhYmxlLAogfTsKIAogdm9pZCBuYXZpMTBfc2V0X3BwdF9m
dW5jcyhzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSkKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2Ry
bS9hbWQvcG93ZXJwbGF5L3NtdV92MTFfMC5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBs
YXkvc211X3YxMV8wLmMKaW5kZXggYzUyNTdhZTMxODhhLi4wMjlmMDg5NjE0NmEgMTAwNjQ0Ci0t
LSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L3NtdV92MTFfMC5jCisrKyBiL2RyaXZl
cnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L3NtdV92MTFfMC5jCkBAIC0xODI4LDMgKzE4MjgsMzAg
QEAgdm9pZCBzbXVfdjExXzBfc2V0X3NtdV9mdW5jcyhzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSkK
IAkJcHJfd2FybigiVW5rbm93biBhc2ljIGZvciBzbXUxMVxuIik7CiAJfQogfQorCitpbnQgc211
X3YxMV8wX3NldF9kZWZhdWx0X29kX3NldHRpbmdzKHN0cnVjdCBzbXVfY29udGV4dCAqc211LCBi
b29sIGluaXRpYWxpemUsIHNpemVfdCBvdmVyZHJpdmVfdGFibGVfc2l6ZSkKK3sKKwlzdHJ1Y3Qg
c211X3RhYmxlX2NvbnRleHQgKnRhYmxlX2NvbnRleHQgPSAmc211LT5zbXVfdGFibGU7CisJaW50
IHJldCA9IDA7CisKKwlpZiAoaW5pdGlhbGl6ZSkgeworCQlpZiAodGFibGVfY29udGV4dC0+b3Zl
cmRyaXZlX3RhYmxlKSB7CisJCQlyZXR1cm4gLUVJTlZBTDsKKwkJfQorCQl0YWJsZV9jb250ZXh0
LT5vdmVyZHJpdmVfdGFibGUgPSBremFsbG9jKG92ZXJkcml2ZV90YWJsZV9zaXplLCBHRlBfS0VS
TkVMKTsKKwkJaWYgKCF0YWJsZV9jb250ZXh0LT5vdmVyZHJpdmVfdGFibGUpIHsKKwkJCXJldHVy
biAtRU5PTUVNOworCQl9CisJCXJldCA9IHNtdV91cGRhdGVfdGFibGUoc211LCBTTVVfVEFCTEVf
T1ZFUkRSSVZFLCAwLCB0YWJsZV9jb250ZXh0LT5vdmVyZHJpdmVfdGFibGUsIGZhbHNlKTsKKwkJ
aWYgKHJldCkgeworCQkJcHJfZXJyKCJGYWlsZWQgdG8gZXhwb3J0IG92ZXJkcml2ZSB0YWJsZSFc
biIpOworCQkJcmV0dXJuIHJldDsKKwkJfQorCX0KKwlyZXQgPSBzbXVfdXBkYXRlX3RhYmxlKHNt
dSwgU01VX1RBQkxFX09WRVJEUklWRSwgMCwgdGFibGVfY29udGV4dC0+b3ZlcmRyaXZlX3RhYmxl
LCB0cnVlKTsKKwlpZiAocmV0KSB7CisJCXByX2VycigiRmFpbGVkIHRvIGltcG9ydCBvdmVyZHJp
dmUgdGFibGUhXG4iKTsKKwkJcmV0dXJuIHJldDsKKwl9CisJcmV0dXJuIHJldDsKK30KLS0gCjIu
MjMuMAoKCkZyb20gN2JjMDdlMGIwNTMzODFjZTc0MDlkODI1MWJlMTgzODBmYjZiM2M0MyBNb24g
U2VwIDE3IDAwOjAwOjAwIDIwMDEKTWVzc2FnZS1JZDogPDdiYzA3ZTBiMDUzMzgxY2U3NDA5ZDgy
NTFiZTE4MzgwZmI2YjNjNDMuMTU3MzE1MTQzNC5naXQubWNvZmZpbjEzQGdtYWlsLmNvbT4KSW4t
UmVwbHktVG86IDxjb3Zlci4xNTczMTUxNDM0LmdpdC5tY29mZmluMTNAZ21haWwuY29tPgpSZWZl
cmVuY2VzOiA8Y292ZXIuMTU3MzE1MTQzNC5naXQubWNvZmZpbjEzQGdtYWlsLmNvbT4KRnJvbTog
TWF0dCBDb2ZmaW4gPG1jb2ZmaW4xM0BnbWFpbC5jb20+CkRhdGU6IFR1ZSwgNSBOb3YgMjAxOSAx
MjozOToyNyAtMDcwMApTdWJqZWN0OiBbUEFUQ0ggMi8zXSBkcm0vYW1kZ3B1L25hdmkxMDogaW1w
bGVtZW50IEdGWENMS19DVVJWRSBvdmVyZHJpdmUKVG86IGFtZC1nZnhAbGlzdHMuZnJlZWRlc2t0
b3Aub3JnCgpbV2h5XQpCZWZvcmUgdGhpcyBwYXRjaCwgdGhlcmUgd2FzIG5vIHdheSB0byBzZXQg
dGhlIGdmeGNsayB2b2x0YWdlIGN1cnZlIGluCnRoZSBvdmVyZHJpdmUgc2V0dGluZ3MgZm9yIG5h
dmkxMCB0aHJvdWdoIHBwX29kX2Nsa192b2x0YWdlCgpbSG93XQpBZGQgdGhlIHJlcXVpcmVkIGlt
cGxlbWVudGF0aW9uIHRvIG5hdmkxMCdzIHBwdCBkcG0gdGFibGUgZWRpdGluZwppbXBsZW1lbnRh
dGlvbiwgc2ltaWxhciB0byB0aGUgdmVnYTIwIGltcGxlbWVudGF0aW9uIGFuZCBpbnRlcmZhY2Uu
Ci0tLQogZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvbmF2aTEwX3BwdC5jIHwgNTUgKysr
KysrKysrKysrKysrKysrKysrLQogZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBsYXkvbmF2aTEw
X3BwdC5oIHwgIDIgKwogMiBmaWxlcyBjaGFuZ2VkLCA1NSBpbnNlcnRpb25zKCspLCAyIGRlbGV0
aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkx
MF9wcHQuYyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuYwppbmRl
eCA2ZDBlNTExYWQwOTMuLmU3MTczMjhmOTNjZSAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJt
L2FtZC9wb3dlcnBsYXkvbmF2aTEwX3BwdC5jCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93
ZXJwbGF5L25hdmkxMF9wcHQuYwpAQCAtMTY2Nyw2ICsxNjY3LDggQEAgc3RhdGljIGludCBuYXZp
MTBfb2RfZWRpdF9kcG1fdGFibGUoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIGVudW0gUFBfT0Rf
RFBNX1RBQkwKIAlzdHJ1Y3Qgc211X3RhYmxlX2NvbnRleHQgKnRhYmxlX2NvbnRleHQgPSAmc211
LT5zbXVfdGFibGU7CiAJT3ZlckRyaXZlVGFibGVfdCAqb2RfdGFibGU7CiAJc3RydWN0IHNtdV8x
MV8wX292ZXJkcml2ZV90YWJsZSAqb2Rfc2V0dGluZ3M7CisJZW51bSBTTVVfMTFfMF9PRFNFVFRJ
TkdfSUQgZnJlcV9zZXR0aW5nLCB2b2x0YWdlX3NldHRpbmc7CisJdWludDE2X3QgKmZyZXFfcHRy
LCAqdm9sdGFnZV9wdHI7CiAJb2RfdGFibGUgPSAoT3ZlckRyaXZlVGFibGVfdCAqKXRhYmxlX2Nv
bnRleHQtPm92ZXJkcml2ZV90YWJsZTsKIAogCWlmICghc211LT5vZF9lbmFibGVkKSB7CkBAIC0x
NzY2LDggKzE3NjgsNTcgQEAgc3RhdGljIGludCBuYXZpMTBfb2RfZWRpdF9kcG1fdGFibGUoc3Ry
dWN0IHNtdV9jb250ZXh0ICpzbXUsIGVudW0gUFBfT0RfRFBNX1RBQkwKIAkJfQogCQlicmVhazsK
IAljYXNlIFBQX09EX0VESVRfVkREQ19DVVJWRToKLQkJLy8gVE9ETzogaW1wbGVtZW50Ci0JCXJl
dHVybiAtRU5PU1lTOworCQlpZiAoIW5hdmkxMF9vZF9mZWF0dXJlX2lzX3N1cHBvcnRlZChvZF9z
ZXR0aW5ncywgU01VXzExXzBfT0RGRUFUVVJFX0dGWENMS19DVVJWRSkpIHsKKwkJCXByX3dhcm4o
IkdGWENMS19DVVJWRSBub3Qgc3VwcG9ydGVkIVxuIik7CisJCQlyZXR1cm4gLUVOT1RTVVBQOwor
CQl9CisJCWlmIChzaXplIDwgMykgeworCQkJcHJfaW5mbygiaW52YWxpZCBudW1iZXIgb2YgcGFy
YW1ldGVyczogJWRcbiIsIHNpemUpOworCQkJcmV0dXJuIC1FSU5WQUw7CisJCX0KKwkJaWYgKCFv
ZF90YWJsZSkgeworCQkJcHJfaW5mbygiT3ZlcmRyaXZlIGlzIG5vdCBpbml0aWFsaXplZFxuIik7
CisJCQlyZXR1cm4gLUVJTlZBTDsKKwkJfQorCisJCXN3aXRjaCAoaW5wdXRbMF0pIHsKKwkJY2Fz
ZSAwOgorCQkJZnJlcV9zZXR0aW5nID0gU01VXzExXzBfT0RTRVRUSU5HX1ZEREdGWENVUlZFRlJF
UV9QMTsKKwkJCXZvbHRhZ2Vfc2V0dGluZyA9IFNNVV8xMV8wX09EU0VUVElOR19WRERHRlhDVVJW
RVZPTFRBR0VfUDE7CisJCQlmcmVxX3B0ciA9ICZvZF90YWJsZS0+R2Z4Y2xrRnJlcTE7CisJCQl2
b2x0YWdlX3B0ciA9ICZvZF90YWJsZS0+R2Z4Y2xrVm9sdDE7CisJCQlicmVhazsKKwkJY2FzZSAx
OgorCQkJZnJlcV9zZXR0aW5nID0gU01VXzExXzBfT0RTRVRUSU5HX1ZEREdGWENVUlZFRlJFUV9Q
MjsKKwkJCXZvbHRhZ2Vfc2V0dGluZyA9IFNNVV8xMV8wX09EU0VUVElOR19WRERHRlhDVVJWRVZP
TFRBR0VfUDI7CisJCQlmcmVxX3B0ciA9ICZvZF90YWJsZS0+R2Z4Y2xrRnJlcTI7CisJCQl2b2x0
YWdlX3B0ciA9ICZvZF90YWJsZS0+R2Z4Y2xrVm9sdDI7CisJCQlicmVhazsKKwkJY2FzZSAyOgor
CQkJZnJlcV9zZXR0aW5nID0gU01VXzExXzBfT0RTRVRUSU5HX1ZEREdGWENVUlZFRlJFUV9QMzsK
KwkJCXZvbHRhZ2Vfc2V0dGluZyA9IFNNVV8xMV8wX09EU0VUVElOR19WRERHRlhDVVJWRVZPTFRB
R0VfUDM7CisJCQlmcmVxX3B0ciA9ICZvZF90YWJsZS0+R2Z4Y2xrRnJlcTM7CisJCQl2b2x0YWdl
X3B0ciA9ICZvZF90YWJsZS0+R2Z4Y2xrVm9sdDM7CisJCQlicmVhazsKKwkJZGVmYXVsdDoKKwkJ
CXByX2luZm8oIkludmFsaWQgVkREQ19DVVJWRSBpbmRleDogJWxkXG4iLCBpbnB1dFswXSk7CisJ
CQlwcl9pbmZvKCJTdXBwb3J0ZWQgaW5kaWNlczogWzAsIDEsIDJdXG4iKTsKKwkJCXJldHVybiAt
RUlOVkFMOworCQl9CisJCXJldCA9IG5hdmkxMF9vZF9zZXR0aW5nX2NoZWNrX3JhbmdlKG9kX3Nl
dHRpbmdzLCBmcmVxX3NldHRpbmcsIGlucHV0WzFdKTsKKwkJaWYgKHJldCkKKwkJCXJldHVybiBy
ZXQ7CisJCS8vIEFsbG93IHNldHRpbmcgemVybyB0byBkaXNhYmxlIHRoZSBPdmVyRHJpdmUgVkRE
QyBjdXJ2ZQorCQlpZiAoaW5wdXRbMl0gIT0gMCkgeworCQkJcmV0ID0gbmF2aTEwX29kX3NldHRp
bmdfY2hlY2tfcmFuZ2Uob2Rfc2V0dGluZ3MsIHZvbHRhZ2Vfc2V0dGluZywgaW5wdXRbMl0pOwor
CQkJaWYgKHJldCkKKwkJCQlyZXR1cm4gcmV0OworCQl9CisJCSpmcmVxX3B0ciA9IGlucHV0WzFd
OworCQkqdm9sdGFnZV9wdHIgPSAoKHVpbnQxNl90KWlucHV0WzJdKSAqIE5BVkkxMF9WT0xUQUdF
X1NDQUxFOworCQlwcl9kZWJ1ZygiT0Q6IHNldCBjdXJ2ZSAlbGQ6ICglZCwgJWQpXG4iLCBpbnB1
dFswXSwgKmZyZXFfcHRyLCAqdm9sdGFnZV9wdHIpOworCQluYXZpMTBfZHVtcF9vZF90YWJsZShv
ZF90YWJsZSk7CisJCWJyZWFrOwogCWRlZmF1bHQ6CiAJCXJldHVybiAtRU5PU1lTOwogCX0KZGlm
ZiAtLWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuaCBiL2Ry
aXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkxMF9wcHQuaAppbmRleCA2MjBmZjE3YzJm
ZWYuLjQ4NGQyYzU4ZmMwNiAxMDA2NDQKLS0tIGEvZHJpdmVycy9ncHUvZHJtL2FtZC9wb3dlcnBs
YXkvbmF2aTEwX3BwdC5oCisrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkx
MF9wcHQuaApAQCAtMjcsNiArMjcsOCBAQAogI2RlZmluZSBOQVZJMTBfUEVBS19TQ0xLX1hUICAJ
CSgxNzU1KQogI2RlZmluZSBOQVZJMTBfUEVBS19TQ0xLX1hMICAJCSgxNjI1KQogCisjZGVmaW5l
IE5BVkkxMF9WT0xUQUdFX1NDQUxFICg0KQorCiBleHRlcm4gdm9pZCBuYXZpMTBfc2V0X3BwdF9m
dW5jcyhzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSk7CiAKICNlbmRpZgotLSAKMi4yMy4wCgoKRnJv
bSBlMDkxYzQwODVlY2M2NjllYTkwN2ZlNWQ4NTE1ZjE0NTg2ODYzZjliIE1vbiBTZXAgMTcgMDA6
MDA6MDAgMjAwMQpNZXNzYWdlLUlkOiA8ZTA5MWM0MDg1ZWNjNjY5ZWE5MDdmZTVkODUxNWYxNDU4
Njg2M2Y5Yi4xNTczMTUxNDM0LmdpdC5tY29mZmluMTNAZ21haWwuY29tPgpJbi1SZXBseS1Ubzog
PGNvdmVyLjE1NzMxNTE0MzQuZ2l0Lm1jb2ZmaW4xM0BnbWFpbC5jb20+ClJlZmVyZW5jZXM6IDxj
b3Zlci4xNTczMTUxNDM0LmdpdC5tY29mZmluMTNAZ21haWwuY29tPgpGcm9tOiBNYXR0IENvZmZp
biA8bWNvZmZpbjEzQGdtYWlsLmNvbT4KRGF0ZTogV2VkLCA2IE5vdiAyMDE5IDEyOjA1OjI4IC0w
NzAwClN1YmplY3Q6IFtQQVRDSCAzLzNdIGRybS9hbWRncHUvbmF2aTEwOiBJbXBsZW1lbnQgb2Qg
Y2xrIHByaW50aW5nClRvOiBhbWQtZ2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwoKW1doeV0KQmVm
b3JlIHRoaXMgcGF0Y2gsIG5hdmkxMCBvdmVyZHJpdmUgc2V0dGluZ3MgY291bGQgbm90IGJlIHBy
aW50ZWQgdmlhCnBwX29kX2Nsa192b2x0YWdlCgpbSG93XQpJbXBsZW1lbnQgcHJpbnRpbmcgZm9y
IHRoZSBvdmVyZHJpdmUgc2V0dGluZ3MgZm9yIHRoZSBmb2xsb3dpbmcgY2xvY2tzCmluIG5hdmkx
MCdzIHBwdCBwcmludF9jbGtfbGV2ZWxzIGltcGxlbWVudGF0aW9uOgoKKiBTTVVfT0RfU0NMSwoq
IFNNVV9PRF9NQ0xLCiogU01VX09EX1ZERENfQ1VSVkUKLS0tCiBkcml2ZXJzL2dwdS9kcm0vYW1k
L3Bvd2VycGxheS9uYXZpMTBfcHB0LmMgfCA1NiArKysrKysrKysrKysrKysrKysrKy0tCiAxIGZp
bGUgY2hhbmdlZCwgNTEgaW5zZXJ0aW9ucygrKSwgNSBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQg
YS9kcml2ZXJzL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9uYXZpMTBfcHB0LmMgYi9kcml2ZXJzL2dw
dS9kcm0vYW1kL3Bvd2VycGxheS9uYXZpMTBfcHB0LmMKaW5kZXggZTcxNzMyOGY5M2NlLi41MDZh
ZjU5ZmY0NWYgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvcG93ZXJwbGF5L25hdmkx
MF9wcHQuYworKysgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL3Bvd2VycGxheS9uYXZpMTBfcHB0LmMK
QEAgLTY3NywxMyArNjc3LDI1IEBAIHN0YXRpYyBib29sIG5hdmkxMF9pc19zdXBwb3J0X2ZpbmVf
Z3JhaW5lZF9kcG0oc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsIGVudW0gc211CiAJcmV0dXJuIGRw
bV9kZXNjLT5TbmFwVG9EaXNjcmV0ZSA9PSAwID8gdHJ1ZSA6IGZhbHNlOwogfQogCitzdGF0aWMg
aW5saW5lIGJvb2wgbmF2aTEwX29kX2ZlYXR1cmVfaXNfc3VwcG9ydGVkKHN0cnVjdCBzbXVfMTFf
MF9vdmVyZHJpdmVfdGFibGUgKm9kX3RhYmxlLCBlbnVtIFNNVV8xMV8wX09ERkVBVFVSRV9JRCBm
ZWF0dXJlKQoreworCXJldHVybiBvZF90YWJsZS0+Y2FwW2ZlYXR1cmVdOworfQorCisKIHN0YXRp
YyBpbnQgbmF2aTEwX3ByaW50X2Nsa19sZXZlbHMoc3RydWN0IHNtdV9jb250ZXh0ICpzbXUsCiAJ
CQllbnVtIHNtdV9jbGtfdHlwZSBjbGtfdHlwZSwgY2hhciAqYnVmKQogeworCU92ZXJEcml2ZVRh
YmxlX3QgKm9kX3RhYmxlOworCXN0cnVjdCBzbXVfMTFfMF9vdmVyZHJpdmVfdGFibGUgKm9kX3Nl
dHRpbmdzOworCXVpbnQxNl90ICpjdXJ2ZV9zZXR0aW5nczsKIAlpbnQgaSwgc2l6ZSA9IDAsIHJl
dCA9IDA7CiAJdWludDMyX3QgY3VyX3ZhbHVlID0gMCwgdmFsdWUgPSAwLCBjb3VudCA9IDA7CiAJ
dWludDMyX3QgZnJlcV92YWx1ZXNbM10gPSB7MH07CiAJdWludDMyX3QgbWFya19pbmRleCA9IDA7
CisJc3RydWN0IHNtdV90YWJsZV9jb250ZXh0ICp0YWJsZV9jb250ZXh0ID0gJnNtdS0+c211X3Rh
YmxlOworCW9kX3RhYmxlID0gKE92ZXJEcml2ZVRhYmxlX3QgKil0YWJsZV9jb250ZXh0LT5vdmVy
ZHJpdmVfdGFibGU7CisJb2Rfc2V0dGluZ3MgPSBzbXUtPm9kX3NldHRpbmdzOwogCiAJc3dpdGNo
IChjbGtfdHlwZSkgewogCWNhc2UgU01VX0dGWENMSzoKQEAgLTczNCw2ICs3NDYsNDUgQEAgc3Rh
dGljIGludCBuYXZpMTBfcHJpbnRfY2xrX2xldmVscyhzdHJ1Y3Qgc211X2NvbnRleHQgKnNtdSwK
IAogCQl9CiAJCWJyZWFrOworCWNhc2UgU01VX09EX1NDTEs6CisJCWlmICghc211LT5vZF9lbmFi
bGVkIHx8ICFvZF90YWJsZSB8fCAhb2Rfc2V0dGluZ3MpCisJCQlicmVhazsKKwkJaWYgKCFuYXZp
MTBfb2RfZmVhdHVyZV9pc19zdXBwb3J0ZWQob2Rfc2V0dGluZ3MsIFNNVV8xMV8wX09ERkVBVFVS
RV9HRlhDTEtfTElNSVRTKSkKKwkJCWJyZWFrOworCQlzaXplICs9IHNwcmludGYoYnVmICsgc2l6
ZSwgIk9EX1NDTEs6XG4iKTsKKwkJc2l6ZSArPSBzcHJpbnRmKGJ1ZiArIHNpemUsICIwOiAldU1o
elxuMTogJXVNaHpcbiIsIG9kX3RhYmxlLT5HZnhjbGtGbWluLCBvZF90YWJsZS0+R2Z4Y2xrRm1h
eCk7CisJCWJyZWFrOworCWNhc2UgU01VX09EX01DTEs6CisJCWlmICghc211LT5vZF9lbmFibGVk
IHx8ICFvZF90YWJsZSB8fCAhb2Rfc2V0dGluZ3MpCisJCQlicmVhazsKKwkJaWYgKCFuYXZpMTBf
b2RfZmVhdHVyZV9pc19zdXBwb3J0ZWQob2Rfc2V0dGluZ3MsIFNNVV8xMV8wX09ERkVBVFVSRV9V
Q0xLX01BWCkpCisJCQlicmVhazsKKwkJc2l6ZSArPSBzcHJpbnRmKGJ1ZiArIHNpemUsICJPRF9N
Q0xLOlxuIik7CisJCXNpemUgKz0gc3ByaW50ZihidWYgKyBzaXplLCAiMDogJXVNSHpcbiIsIG9k
X3RhYmxlLT5VY2xrRm1heCk7CisJCWJyZWFrOworCWNhc2UgU01VX09EX1ZERENfQ1VSVkU6CisJ
CWlmICghc211LT5vZF9lbmFibGVkIHx8ICFvZF90YWJsZSB8fCAhb2Rfc2V0dGluZ3MpCisJCQli
cmVhazsKKwkJaWYgKCFuYXZpMTBfb2RfZmVhdHVyZV9pc19zdXBwb3J0ZWQob2Rfc2V0dGluZ3Ms
IFNNVV8xMV8wX09ERkVBVFVSRV9HRlhDTEtfQ1VSVkUpKQorCQkJYnJlYWs7CisJCXNpemUgKz0g
c3ByaW50ZihidWYgKyBzaXplLCAiT0RfVkREQ19DVVJWRTpcbiIpOworCQlmb3IgKGkgPSAwOyBp
IDwgMzsgaSsrKSB7CisJCQlzd2l0Y2ggKGkpIHsKKwkJCWNhc2UgMDoKKwkJCQljdXJ2ZV9zZXR0
aW5ncyA9ICZvZF90YWJsZS0+R2Z4Y2xrRnJlcTE7CisJCQkJYnJlYWs7CisJCQljYXNlIDE6CisJ
CQkJY3VydmVfc2V0dGluZ3MgPSAmb2RfdGFibGUtPkdmeGNsa0ZyZXEyOworCQkJCWJyZWFrOwor
CQkJY2FzZSAyOgorCQkJCWN1cnZlX3NldHRpbmdzID0gJm9kX3RhYmxlLT5HZnhjbGtGcmVxMzsK
KwkJCQlicmVhazsKKwkJCWRlZmF1bHQ6CisJCQkJYnJlYWs7CisJCQl9CisJCQlzaXplICs9IHNw
cmludGYoYnVmICsgc2l6ZSwgIiVkOiAldU1IeiBAICV1bVZcbiIsIGksIGN1cnZlX3NldHRpbmdz
WzBdLCBjdXJ2ZV9zZXR0aW5nc1sxXSAvIE5BVkkxMF9WT0xUQUdFX1NDQUxFKTsKKwkJfQorCQli
cmVhazsKIAlkZWZhdWx0OgogCQlicmVhazsKIAl9CkBAIC0xNjAwLDExICsxNjUxLDYgQEAgc3Rh
dGljIGlubGluZSB2b2lkIG5hdmkxMF9kdW1wX29kX3RhYmxlKE92ZXJEcml2ZVRhYmxlX3QgKm9k
X3RhYmxlKSB7CiAJcHJfZGVidWcoIk9EOiBPdmVyRHJpdmVQY3Q6ICVkXG4iLCBvZF90YWJsZS0+
T3ZlckRyaXZlUGN0KTsKIH0KIAotc3RhdGljIGlubGluZSBib29sIG5hdmkxMF9vZF9mZWF0dXJl
X2lzX3N1cHBvcnRlZChzdHJ1Y3Qgc211XzExXzBfb3ZlcmRyaXZlX3RhYmxlICpvZF90YWJsZSwg
ZW51bSBTTVVfMTFfMF9PREZFQVRVUkVfSUQgZmVhdHVyZSkKLXsKLQlyZXR1cm4gb2RfdGFibGUt
PmNhcFtmZWF0dXJlXTsKLX0KLQogc3RhdGljIGludCBuYXZpMTBfb2Rfc2V0dGluZ19jaGVja19y
YW5nZShzdHJ1Y3Qgc211XzExXzBfb3ZlcmRyaXZlX3RhYmxlICpvZF90YWJsZSwgZW51bSBTTVVf
MTFfMF9PRFNFVFRJTkdfSUQgc2V0dGluZywgdWludDMyX3QgdmFsdWUpCiB7CiAJaWYgKHZhbHVl
IDwgb2RfdGFibGUtPm1pbltzZXR0aW5nXSkgewotLSAKMi4yMy4wCgpfX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwphbWQtZ2Z4IG1haWxpbmcgbGlzdAphbWQt
Z2Z4QGxpc3RzLmZyZWVkZXNrdG9wLm9yZwpodHRwczovL2xpc3RzLmZyZWVkZXNrdG9wLm9yZy9t
YWlsbWFuL2xpc3RpbmZvL2FtZC1nZng=
