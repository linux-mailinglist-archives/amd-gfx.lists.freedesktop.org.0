Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 56F6C2D876D
	for <lists+amd-gfx@lfdr.de>; Sat, 12 Dec 2020 16:47:27 +0100 (CET)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id E2A9F6E88A;
	Sat, 12 Dec 2020 15:47:25 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from NAM11-DM6-obe.outbound.protection.outlook.com
 (mail-dm6nam11on2078.outbound.protection.outlook.com [40.107.223.78])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 6D67B6E88A
 for <amd-gfx@lists.freedesktop.org>; Sat, 12 Dec 2020 15:47:24 +0000 (UTC)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=grNRV0dvhex2WeD2QDWATWqY+G8baI4CDZPBoaKabqY5EZsKVvVrzCND8LAxSX67WSKib5dAy5XI0SRZ5Tl24TVbTlLK5Z0REAbR9OjIszz6nh3GNbuQVMOHdhydHkN25OQtNnl3WV7pH3BvVIWJuGOfsJPIfWBwQkadFiPQINYiRuNYQn7axcv+59XOrR6GKu22+SN5J+lRSsw+jObd8xiwsy1NEL29CDXtTePNXRejrGUKuarQhFJ+drz25nVpNwdpMIQ0sOr2nQzlTWV2UufS9nWl+RUky7wyHWkvNXLJFq93hMTH9biFYuPqtua1xkoR7ymgqTwTckDjdCWSzg==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com; 
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=bP/j45oxuHAG1YcsPoifFe6YEG5vxJcAsx017JN40b8=;
 b=Jj9O1vA3+OScZe/lAGTgolcW6sud2gaBMZjQ3f1aXgYVNJS+V5L/IbHe3yQnWsWC5Zw2KpDt4M7Lmwa5YcqYCdTkf/MfNJfAEcgZrwbJmbWZ6Vu1WPRC/N7uX4vzLZdx9HBQ0wZOLS1h+FxbACesHtiSxuHusvybgIICNnsitBT4tszw+Ut05LevtgP/mi1+rwzJRiDiVcFgTr3gSUCzTJkH0StM4/ICs/h8A2IAxmJciaumGZMdzcM2lnbT0W/D9H4Q1w3ppDvngi42QHFSjz+6ynZDfIV2dgO/EUxUpTg1Ksf3XpHCD/ilMuILSIpjr77CXOL+aw3/0r5babi9yg==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=softfail (sender ip
 is 165.204.84.17) smtp.rcpttodomain=lists.freedesktop.org
 smtp.mailfrom=amd.com; dmarc=fail (p=none sp=none pct=100) action=none
 header.from=amd.com; dkim=none (message not signed); arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=amdcloud.onmicrosoft.com; s=selector2-amdcloud-onmicrosoft-com;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=bP/j45oxuHAG1YcsPoifFe6YEG5vxJcAsx017JN40b8=;
 b=UztOQEU+E4ULp+JTwpNrWnm4bq/PP/Izaw/xu/OjD7rWHah2UqkpHJQoTkip+iNZzZdULlxRp4HzyUHARdj1wFEdDz1RXKaIll2YGG/AcUQKN/R07Vcn0452tY9os/PXbiNLmJnXmFwr1lCBPKjIvNJyLEBJ6frn0FJYVjl6lV4=
Received: from BN6PR20CA0055.namprd20.prod.outlook.com (2603:10b6:404:151::17)
 by CY4PR12MB1206.namprd12.prod.outlook.com (2603:10b6:903:3b::21)
 with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3654.17; Sat, 12 Dec
 2020 15:47:21 +0000
Received: from BN8NAM11FT063.eop-nam11.prod.protection.outlook.com
 (2603:10b6:404:151:cafe::9a) by BN6PR20CA0055.outlook.office365.com
 (2603:10b6:404:151::17) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id 15.20.3654.12 via Frontend
 Transport; Sat, 12 Dec 2020 15:47:21 +0000
X-MS-Exchange-Authentication-Results: spf=softfail (sender IP is
 165.204.84.17) smtp.mailfrom=amd.com; lists.freedesktop.org; dkim=none
 (message not signed) header.d=none;lists.freedesktop.org; dmarc=fail
 action=none header.from=amd.com;
Received-SPF: SoftFail (protection.outlook.com: domain of transitioning
 amd.com discourages use of 165.204.84.17 as permitted sender)
Received: from SATLEXMB01.amd.com (165.204.84.17) by
 BN8NAM11FT063.mail.protection.outlook.com (10.13.177.110) with Microsoft SMTP
 Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id
 15.20.3654.20 via Frontend Transport; Sat, 12 Dec 2020 15:47:21 +0000
Received: from SATLEXMB06.amd.com (10.181.40.147) by SATLEXMB01.amd.com
 (10.181.40.142) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.1979.3; Sat, 12 Dec
 2020 09:47:20 -0600
Received: from SATLEXMB02.amd.com (10.181.40.143) by SATLEXMB06.amd.com
 (10.181.40.147) with Microsoft SMTP Server (version=TLS1_2,
 cipher=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256) id 15.1.1979.3; Sat, 12 Dec
 2020 09:47:20 -0600
Received: from hawzhang-System-Product-Dev.amd.com (10.180.168.240) by
 SATLEXMB02.amd.com (10.181.40.143) with Microsoft SMTP Server id 15.1.1979.3
 via Frontend Transport; Sat, 12 Dec 2020 09:47:18 -0600
From: Hawking Zhang <Hawking.Zhang@amd.com>
To: <amd-gfx@lists.freedesktop.org>, Felix Kuehling <Felix.Kuehling@amd.com>, 
 =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>, Feifei Xu
 <Feifei.Xu@amd.com>, Dennis Li <Dennis.Li@amd.com>, Alex Deucher
 <alexander.deucher@amd.com>
Subject: [PATCH 20/27] drm/amdgpu: create vega20 ih blocks
Date: Sat, 12 Dec 2020 23:45:53 +0800
Message-ID: <20201212154600.21618-20-Hawking.Zhang@amd.com>
X-Mailer: git-send-email 2.17.1
In-Reply-To: <20201212154600.21618-1-Hawking.Zhang@amd.com>
References: <20201212154600.21618-1-Hawking.Zhang@amd.com>
MIME-Version: 1.0
X-EOPAttributedMessage: 0
X-MS-Office365-Filtering-HT: Tenant
X-MS-PublicTrafficType: Email
X-MS-Office365-Filtering-Correlation-Id: f4644432-1805-4c4e-09ea-08d89eb53653
X-MS-TrafficTypeDiagnostic: CY4PR12MB1206:
X-Microsoft-Antispam-PRVS: <CY4PR12MB1206BB546384BB1F2BACCED7FCC90@CY4PR12MB1206.namprd12.prod.outlook.com>
X-MS-Oob-TLC-OOBClassifiers: OLM:5236;
X-MS-Exchange-SenderADCheck: 1
X-Microsoft-Antispam: BCL:0;
X-Microsoft-Antispam-Message-Info: S+9SwRqhB7KjD6H9b6S2ElE80DUoCcwcCBjmSZJqbEY42leRIQU3WNun0kQ+2NVm+1sMBLTd0MB9tRltFJI+nNNvC4+tPUYbtIzL4zkdSvG2QEFPppEY3lv+0W3/4zobsLrXE1IKe2zKywPUUGH9Fq6K59t6YZDj5vNrvuxZd6qaCl6/EcKScnJlwqGk+1SSfwyjGdOTq7GAJUU8kHxsiTexB3YXQc6GPPrVDt5yDXznXlgLj2tgn/R2DmrsgNQcMBGSczJ1x1obiYvrsFg4SkVuoQfS5u42i3UAxffHbtu+adXOA022+7UmJJBtOz1RA7D31kAiawP8AIXYRDCOkaQ1Ixp6s+CtSYmf5HiC69RmV/Dhd/2cTNcK4nbFyFAXCO3CIFq2X+hIcmu7VBsV8Dfhp8hiV8v5kmSDqCjfll3MgV0VZHHm+MjD4Pe1Tarl
X-Forefront-Antispam-Report: CIP:165.204.84.17; CTRY:US; LANG:en; SCL:1; SRV:;
 IPV:NLI; SFV:NSPM; H:SATLEXMB01.amd.com; PTR:InfoDomainNonexistent; CAT:NONE;
 SFS:(4636009)(346002)(376002)(136003)(46966005)(336012)(47076004)(83380400001)(426003)(70206006)(2906002)(110136005)(30864003)(70586007)(2616005)(5660300002)(508600001)(26005)(186003)(7696005)(4326008)(81166007)(8936002)(66574015)(6636002)(356005)(82310400003)(6666004)(36756003)(86362001)(1076003)(8676002)(21314003)(309714004);
 DIR:OUT; SFP:1101; 
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-OriginalArrivalTime: 12 Dec 2020 15:47:21.0166 (UTC)
X-MS-Exchange-CrossTenant-Network-Message-Id: f4644432-1805-4c4e-09ea-08d89eb53653
X-MS-Exchange-CrossTenant-Id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-OriginalAttributedTenantConnectingIp: TenantId=3dd8961f-e488-4e60-8e11-a82d994e183d; Ip=[165.204.84.17];
 Helo=[SATLEXMB01.amd.com]
X-MS-Exchange-CrossTenant-AuthSource: BN8NAM11FT063.eop-nam11.prod.protection.outlook.com
X-MS-Exchange-CrossTenant-AuthAs: Anonymous
X-MS-Exchange-CrossTenant-FromEntityHeader: HybridOnPrem
X-MS-Exchange-Transport-CrossTenantHeadersStamped: CY4PR12MB1206
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: Hawking Zhang <Hawking.Zhang@amd.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

dmVnYTIwIGloIGJsb2NrcyB3aWxsIGJlIHVzZWQgZm9yIHZlZ2EyMC9hcmN0dXJ1cwoKU2lnbmVk
LW9mZi1ieTogSGF3a2luZyBaaGFuZyA8SGF3a2luZy5aaGFuZ0BhbWQuY29tPgpBY2tlZC1ieTog
Q2hyaXN0aWFuIEvDtm5pZyA8Y2hyaXN0aWFuLmtvZW5pZ0BhbWQuY29tPgpBY2tlZC1ieTogRmVs
aXggS3VlaGxpbmcgPEZlbGl4Lkt1ZWhsaW5nQGFtZC5jb20+ClJldmlld2VkLWJ5OiBEZW5uaXMg
TGkgPERlbm5pcy5MaUBhbWQuY29tPgpSZXZpZXdlZC1ieTogRmVpZmVpIFh1IDxGZWlmZWkuWHVA
YW1kLmNvbT4KLS0tCiBkcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9NYWtlZmlsZSAgICB8ICAg
MSArCiBkcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS92ZWdhMjBfaWguYyB8IDY2MSArKysrKysr
KysrKysrKysrKysrKysrKysrCiBkcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS92ZWdhMjBfaWgu
aCB8ICAzMCArKwogMyBmaWxlcyBjaGFuZ2VkLCA2OTIgaW5zZXJ0aW9ucygrKQogY3JlYXRlIG1v
ZGUgMTAwNjQ0IGRyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3ZlZ2EyMF9paC5jCiBjcmVhdGUg
bW9kZSAxMDA2NDQgZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvdmVnYTIwX2loLmgKCmRpZmYg
LS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9NYWtlZmlsZSBiL2RyaXZlcnMvZ3B1
L2RybS9hbWQvYW1kZ3B1L01ha2VmaWxlCmluZGV4IDZiZjZjZmFlYTNmMS4uYzYyNjI2ODllMTRl
IDEwMDY0NAotLS0gYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9NYWtlZmlsZQorKysgYi9k
cml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9NYWtlZmlsZQpAQCAtOTcsNiArOTcsNyBAQCBhbWRn
cHUteSArPSBcCiAJdG9uZ2FfaWgubyBcCiAJY3pfaWgubyBcCiAJdmVnYTEwX2loLm8gXAorCXZl
Z2EyMF9paC5vIFwKIAluYXZpMTBfaWgubwogCiAjIGFkZCBQU1AgYmxvY2sKZGlmZiAtLWdpdCBh
L2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3ZlZ2EyMF9paC5jIGIvZHJpdmVycy9ncHUvZHJt
L2FtZC9hbWRncHUvdmVnYTIwX2loLmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MDAwMDAwLi5lMTg5ODlmZjUwYTIKLS0tIC9kZXYvbnVsbAorKysgYi9kcml2ZXJzL2dwdS9kcm0v
YW1kL2FtZGdwdS92ZWdhMjBfaWguYwpAQCAtMCwwICsxLDY2MSBAQAorLyoKKyAqIENvcHlyaWdo
dCAyMDE2IEFkdmFuY2VkIE1pY3JvIERldmljZXMsIEluYy4KKyAqCisgKiBQZXJtaXNzaW9uIGlz
IGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcg
YQorICogY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24g
ZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwKKyAqIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhv
dXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24KKyAqIHRoZSByaWdo
dHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJs
aWNlbnNlLAorICogYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBl
cm1pdCBwZXJzb25zIHRvIHdob20gdGhlCisgKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8g
c28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgorICoKKyAqIFRoZSBhYm92
ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGlu
Y2x1ZGVkIGluCisgKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBT
b2Z0d2FyZS4KKyAqCisgKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9V
VCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgorICogSU1QTElFRCwgSU5DTFVESU5H
IEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCisg
KiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAg
SU4gTk8gRVZFTlQgU0hBTEwKKyAqIFRIRSBDT1BZUklHSFQgSE9MREVSKFMpIE9SIEFVVEhPUihT
KSBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUgorICogT1RIRVIgTElBQklMSVRZ
LCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsCisg
KiBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJF
IE9SIFRIRSBVU0UgT1IKKyAqIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KKyAqCisg
Ki8KKworI2luY2x1ZGUgPGxpbnV4L3BjaS5oPgorCisjaW5jbHVkZSAiYW1kZ3B1LmgiCisjaW5j
bHVkZSAiYW1kZ3B1X2loLmgiCisjaW5jbHVkZSAic29jMTUuaCIKKworI2luY2x1ZGUgIm9zcy9v
c3NzeXNfNF8yXzBfb2Zmc2V0LmgiCisjaW5jbHVkZSAib3NzL29zc3N5c180XzJfMF9zaF9tYXNr
LmgiCisKKyNpbmNsdWRlICJzb2MxNV9jb21tb24uaCIKKyNpbmNsdWRlICJ2ZWdhMjBfaWguaCIK
KworI2RlZmluZSBNQVhfUkVBUk1fUkVUUlkgMTAKKworc3RhdGljIHZvaWQgdmVnYTIwX2loX3Nl
dF9pbnRlcnJ1cHRfZnVuY3Moc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpOworCisvKioKKyAq
IHZlZ2EyMF9paF9pbml0X3JlZ2lzdGVyX29mZnNldCAtIEluaXRpYWxpemUgcmVnaXN0ZXIgb2Zm
c2V0IGZvciBpaCByaW5ncworICoKKyAqIEBhZGV2OiBhbWRncHVfZGV2aWNlIHBvaW50ZXIKKyAq
CisgKiBJbml0aWFsaXplIHJlZ2lzdGVyIG9mZnNldCBpaCByaW5ncyAoVkVHQTIwKS4KKyAqLwor
c3RhdGljIHZvaWQgdmVnYTIwX2loX2luaXRfcmVnaXN0ZXJfb2Zmc2V0KHN0cnVjdCBhbWRncHVf
ZGV2aWNlICphZGV2KQoreworCXN0cnVjdCBhbWRncHVfaWhfcmVncyAqaWhfcmVnczsKKworCWlm
IChhZGV2LT5pcnEuaWgucmluZ19zaXplKSB7CisJCWloX3JlZ3MgPSAmYWRldi0+aXJxLmloLmlo
X3JlZ3M7CisJCWloX3JlZ3MtPmloX3JiX2Jhc2UgPSBTT0MxNV9SRUdfT0ZGU0VUKE9TU1NZUywg
MCwgbW1JSF9SQl9CQVNFKTsKKwkJaWhfcmVncy0+aWhfcmJfYmFzZV9oaSA9IFNPQzE1X1JFR19P
RkZTRVQoT1NTU1lTLCAwLCBtbUlIX1JCX0JBU0VfSEkpOworCQlpaF9yZWdzLT5paF9yYl9jbnRs
ID0gU09DMTVfUkVHX09GRlNFVChPU1NTWVMsIDAsIG1tSUhfUkJfQ05UTCk7CisJCWloX3JlZ3Mt
PmloX3JiX3dwdHIgPSBTT0MxNV9SRUdfT0ZGU0VUKE9TU1NZUywgMCwgbW1JSF9SQl9XUFRSKTsK
KwkJaWhfcmVncy0+aWhfcmJfcnB0ciA9IFNPQzE1X1JFR19PRkZTRVQoT1NTU1lTLCAwLCBtbUlI
X1JCX1JQVFIpOworCQlpaF9yZWdzLT5paF9kb29yYmVsbF9ycHRyID0gU09DMTVfUkVHX09GRlNF
VChPU1NTWVMsIDAsIG1tSUhfRE9PUkJFTExfUlBUUik7CisJCWloX3JlZ3MtPmloX3JiX3dwdHJf
YWRkcl9sbyA9IFNPQzE1X1JFR19PRkZTRVQoT1NTU1lTLCAwLCBtbUlIX1JCX1dQVFJfQUREUl9M
Tyk7CisJCWloX3JlZ3MtPmloX3JiX3dwdHJfYWRkcl9oaSA9IFNPQzE1X1JFR19PRkZTRVQoT1NT
U1lTLCAwLCBtbUlIX1JCX1dQVFJfQUREUl9ISSk7CisJCWloX3JlZ3MtPnBzcF9yZWdfaWQgPSBQ
U1BfUkVHX0lIX1JCX0NOVEw7CisJfQorCisJaWYgKGFkZXYtPmlycS5paDEucmluZ19zaXplKSB7
CisJCWloX3JlZ3MgPSAmYWRldi0+aXJxLmloMS5paF9yZWdzOworCQlpaF9yZWdzLT5paF9yYl9i
YXNlID0gU09DMTVfUkVHX09GRlNFVChPU1NTWVMsIDAsIG1tSUhfUkJfQkFTRV9SSU5HMSk7CisJ
CWloX3JlZ3MtPmloX3JiX2Jhc2VfaGkgPSBTT0MxNV9SRUdfT0ZGU0VUKE9TU1NZUywgMCwgbW1J
SF9SQl9CQVNFX0hJX1JJTkcxKTsKKwkJaWhfcmVncy0+aWhfcmJfY250bCA9IFNPQzE1X1JFR19P
RkZTRVQoT1NTU1lTLCAwLCBtbUlIX1JCX0NOVExfUklORzEpOworCQlpaF9yZWdzLT5paF9yYl93
cHRyID0gU09DMTVfUkVHX09GRlNFVChPU1NTWVMsIDAsIG1tSUhfUkJfV1BUUl9SSU5HMSk7CisJ
CWloX3JlZ3MtPmloX3JiX3JwdHIgPSBTT0MxNV9SRUdfT0ZGU0VUKE9TU1NZUywgMCwgbW1JSF9S
Ql9SUFRSX1JJTkcxKTsKKwkJaWhfcmVncy0+aWhfZG9vcmJlbGxfcnB0ciA9IFNPQzE1X1JFR19P
RkZTRVQoT1NTU1lTLCAwLCBtbUlIX0RPT1JCRUxMX1JQVFJfUklORzEpOworCQlpaF9yZWdzLT5w
c3BfcmVnX2lkID0gUFNQX1JFR19JSF9SQl9DTlRMX1JJTkcxOworCX0KKworCWlmIChhZGV2LT5p
cnEuaWgyLnJpbmdfc2l6ZSkgeworCQlpaF9yZWdzID0gJmFkZXYtPmlycS5paDIuaWhfcmVnczsK
KwkJaWhfcmVncy0+aWhfcmJfYmFzZSA9IFNPQzE1X1JFR19PRkZTRVQoT1NTU1lTLCAwLCBtbUlI
X1JCX0JBU0VfUklORzIpOworCQlpaF9yZWdzLT5paF9yYl9iYXNlX2hpID0gU09DMTVfUkVHX09G
RlNFVChPU1NTWVMsIDAsIG1tSUhfUkJfQkFTRV9ISV9SSU5HMik7CisJCWloX3JlZ3MtPmloX3Ji
X2NudGwgPSBTT0MxNV9SRUdfT0ZGU0VUKE9TU1NZUywgMCwgbW1JSF9SQl9DTlRMX1JJTkcyKTsK
KwkJaWhfcmVncy0+aWhfcmJfd3B0ciA9IFNPQzE1X1JFR19PRkZTRVQoT1NTU1lTLCAwLCBtbUlI
X1JCX1dQVFJfUklORzIpOworCQlpaF9yZWdzLT5paF9yYl9ycHRyID0gU09DMTVfUkVHX09GRlNF
VChPU1NTWVMsIDAsIG1tSUhfUkJfUlBUUl9SSU5HMik7CisJCWloX3JlZ3MtPmloX2Rvb3JiZWxs
X3JwdHIgPSBTT0MxNV9SRUdfT0ZGU0VUKE9TU1NZUywgMCwgbW1JSF9ET09SQkVMTF9SUFRSX1JJ
TkcyKTsKKwkJaWhfcmVncy0+cHNwX3JlZ19pZCA9IFBTUF9SRUdfSUhfUkJfQ05UTF9SSU5HMjsK
Kwl9Cit9CisKKy8qKgorICogdmVnYTIwX2loX3RvZ2dsZV9yaW5nX2ludGVycnVwdHMgLSB0b2dn
bGUgdGhlIGludGVycnVwdCByaW5nIGJ1ZmZlcgorICoKKyAqIEBhZGV2OiBhbWRncHVfZGV2aWNl
IHBvaW50ZXIKKyAqIEBpaDogYW1kZ3B1X2loX3JpbmcgcG9pbnRldAorICogQGVuYWJsZTogdHJ1
ZSAtIGVuYWJsZSB0aGUgaW50ZXJydXB0cywgZmFsc2UgLSBkaXNhYmxlIHRoZSBpbnRlcnJ1cHRz
CisgKgorICogVG9nZ2xlIHRoZSBpbnRlcnJ1cHQgcmluZyBidWZmZXIgKFZFR0EyMCkKKyAqLwor
c3RhdGljIGludCB2ZWdhMjBfaWhfdG9nZ2xlX3JpbmdfaW50ZXJydXB0cyhzdHJ1Y3QgYW1kZ3B1
X2RldmljZSAqYWRldiwKKwkJCQkJICAgIHN0cnVjdCBhbWRncHVfaWhfcmluZyAqaWgsCisJCQkJ
CSAgICBib29sIGVuYWJsZSkKK3sKKwlzdHJ1Y3QgYW1kZ3B1X2loX3JlZ3MgKmloX3JlZ3M7CisJ
dWludDMyX3QgdG1wOworCisJaWhfcmVncyA9ICZpaC0+aWhfcmVnczsKKworCXRtcCA9IFJSRUcz
MihpaF9yZWdzLT5paF9yYl9jbnRsKTsKKwl0bXAgPSBSRUdfU0VUX0ZJRUxEKHRtcCwgSUhfUkJf
Q05UTCwgUkJfRU5BQkxFLCAoZW5hYmxlID8gMSA6IDApKTsKKwkvKiBlbmFibGVfaW50ciBmaWVs
ZCBpcyBvbmx5IHZhbGlkIGluIHJpbmcwICovCisJaWYgKGloID09ICZhZGV2LT5pcnEuaWgpCisJ
CXRtcCA9IFJFR19TRVRfRklFTEQodG1wLCBJSF9SQl9DTlRMLCBFTkFCTEVfSU5UUiwgKGVuYWJs
ZSA/IDEgOiAwKSk7CisJaWYgKGFtZGdwdV9zcmlvdl92ZihhZGV2KSkgeworCQlpZiAocHNwX3Jl
Z19wcm9ncmFtKCZhZGV2LT5wc3AsIGloX3JlZ3MtPnBzcF9yZWdfaWQsIHRtcCkpIHsKKwkJCWRl
dl9lcnIoYWRldi0+ZGV2LCAiUFNQIHByb2dyYW0gSUhfUkJfQ05UTCBmYWlsZWQhXG4iKTsKKwkJ
CXJldHVybiAtRVRJTUVET1VUOworCQl9CisJfSBlbHNlIHsKKwkJV1JFRzMyKGloX3JlZ3MtPmlo
X3JiX2NudGwsIHRtcCk7CisJfQorCisJaWYgKGVuYWJsZSkgeworCQlpaC0+ZW5hYmxlZCA9IHRy
dWU7CisJfSBlbHNlIHsKKwkJLyogc2V0IHJwdHIsIHdwdHIgdG8gMCAqLworCQlXUkVHMzIoaWhf
cmVncy0+aWhfcmJfcnB0ciwgMCk7CisJCVdSRUczMihpaF9yZWdzLT5paF9yYl93cHRyLCAwKTsK
KwkJaWgtPmVuYWJsZWQgPSBmYWxzZTsKKwkJaWgtPnJwdHIgPSAwOworCX0KKworCXJldHVybiAw
OworfQorCisvKioKKyAqIHZlZ2EyMF9paF90b2dnbGVfaW50ZXJydXB0cyAtIFRvZ2dsZSBhbGwg
dGhlIGF2YWlsYWJsZSBpbnRlcnJ1cHQgcmluZyBidWZmZXJzCisgKgorICogQGFkZXY6IGFtZGdw
dV9kZXZpY2UgcG9pbnRlcgorICogQGVuYWJsZTogZW5hYmxlIG9yIGRpc2FibGUgaW50ZXJydXB0
IHJpbmcgYnVmZmVycworICoKKyAqIFRvZ2dsZSBhbGwgdGhlIGF2YWlsYWJsZSBpbnRlcnJ1cHQg
cmluZyBidWZmZXJzIChWRUdBMjApLgorICovCitzdGF0aWMgaW50IHZlZ2EyMF9paF90b2dnbGVf
aW50ZXJydXB0cyhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwgYm9vbCBlbmFibGUpCit7CisJ
c3RydWN0IGFtZGdwdV9paF9yaW5nICppaFtdID0geyZhZGV2LT5pcnEuaWgsICZhZGV2LT5pcnEu
aWgxLCAmYWRldi0+aXJxLmloMn07CisJaW50IGk7CisJaW50IHI7CisKKwlmb3IgKGkgPSAwOyBp
IDwgQVJSQVlfU0laRShpaCk7IGkrKykgeworCQlpZiAoaWhbaV0tPnJpbmdfc2l6ZSkgeworCQkJ
ciA9IHZlZ2EyMF9paF90b2dnbGVfcmluZ19pbnRlcnJ1cHRzKGFkZXYsIGloW2ldLCBlbmFibGUp
OworCQkJaWYgKHIpCisJCQkJcmV0dXJuIHI7CisJCX0KKwl9CisKKwlyZXR1cm4gMDsKK30KKwor
c3RhdGljIHVpbnQzMl90IHZlZ2EyMF9paF9yYl9jbnRsKHN0cnVjdCBhbWRncHVfaWhfcmluZyAq
aWgsIHVpbnQzMl90IGloX3JiX2NudGwpCit7CisJaW50IHJiX2J1ZnN6ID0gb3JkZXJfYmFzZV8y
KGloLT5yaW5nX3NpemUgLyA0KTsKKworCWloX3JiX2NudGwgPSBSRUdfU0VUX0ZJRUxEKGloX3Ji
X2NudGwsIElIX1JCX0NOVEwsCisJCQkJICAgTUNfU1BBQ0UsIGloLT51c2VfYnVzX2FkZHIgPyAx
IDogNCk7CisJaWhfcmJfY250bCA9IFJFR19TRVRfRklFTEQoaWhfcmJfY250bCwgSUhfUkJfQ05U
TCwKKwkJCQkgICBXUFRSX09WRVJGTE9XX0NMRUFSLCAxKTsKKwlpaF9yYl9jbnRsID0gUkVHX1NF
VF9GSUVMRChpaF9yYl9jbnRsLCBJSF9SQl9DTlRMLAorCQkJCSAgIFdQVFJfT1ZFUkZMT1dfRU5B
QkxFLCAxKTsKKwlpaF9yYl9jbnRsID0gUkVHX1NFVF9GSUVMRChpaF9yYl9jbnRsLCBJSF9SQl9D
TlRMLCBSQl9TSVpFLCByYl9idWZzeik7CisJLyogUmluZyBCdWZmZXIgd3JpdGUgcG9pbnRlciB3
cml0ZWJhY2suIElmIGVuYWJsZWQsIElIX1JCX1dQVFIgcmVnaXN0ZXIKKwkgKiB2YWx1ZSBpcyB3
cml0dGVuIHRvIG1lbW9yeQorCSAqLworCWloX3JiX2NudGwgPSBSRUdfU0VUX0ZJRUxEKGloX3Ji
X2NudGwsIElIX1JCX0NOVEwsCisJCQkJICAgV1BUUl9XUklURUJBQ0tfRU5BQkxFLCAxKTsKKwlp
aF9yYl9jbnRsID0gUkVHX1NFVF9GSUVMRChpaF9yYl9jbnRsLCBJSF9SQl9DTlRMLCBNQ19TTk9P
UCwgMSk7CisJaWhfcmJfY250bCA9IFJFR19TRVRfRklFTEQoaWhfcmJfY250bCwgSUhfUkJfQ05U
TCwgTUNfUk8sIDApOworCWloX3JiX2NudGwgPSBSRUdfU0VUX0ZJRUxEKGloX3JiX2NudGwsIElI
X1JCX0NOVEwsIE1DX1ZNSUQsIDApOworCisJcmV0dXJuIGloX3JiX2NudGw7Cit9CisKK3N0YXRp
YyB1aW50MzJfdCB2ZWdhMjBfaWhfZG9vcmJlbGxfcnB0cihzdHJ1Y3QgYW1kZ3B1X2loX3Jpbmcg
KmloKQoreworCXUzMiBpaF9kb29yYmVsbF9ydHByID0gMDsKKworCWlmIChpaC0+dXNlX2Rvb3Ji
ZWxsKSB7CisJCWloX2Rvb3JiZWxsX3J0cHIgPSBSRUdfU0VUX0ZJRUxEKGloX2Rvb3JiZWxsX3J0
cHIsCisJCQkJCQkgSUhfRE9PUkJFTExfUlBUUiwgT0ZGU0VULAorCQkJCQkJIGloLT5kb29yYmVs
bF9pbmRleCk7CisJCWloX2Rvb3JiZWxsX3J0cHIgPSBSRUdfU0VUX0ZJRUxEKGloX2Rvb3JiZWxs
X3J0cHIsCisJCQkJCQkgSUhfRE9PUkJFTExfUlBUUiwKKwkJCQkJCSBFTkFCTEUsIDEpOworCX0g
ZWxzZSB7CisJCWloX2Rvb3JiZWxsX3J0cHIgPSBSRUdfU0VUX0ZJRUxEKGloX2Rvb3JiZWxsX3J0
cHIsCisJCQkJCQkgSUhfRE9PUkJFTExfUlBUUiwKKwkJCQkJCSBFTkFCTEUsIDApOworCX0KKwly
ZXR1cm4gaWhfZG9vcmJlbGxfcnRwcjsKK30KKworLyoqCisgKiB2ZWdhMjBfaWhfZW5hYmxlX3Jp
bmcgLSBlbmFibGUgYW4gaWggcmluZyBidWZmZXIKKyAqCisgKiBAYWRldjogYW1kZ3B1X2Rldmlj
ZSBwb2ludGVyCisgKiBAaWg6IGFtZGdwdV9paF9yaW5nIHBvaW50ZXIKKyAqCisgKiBFbmFibGUg
YW4gaWggcmluZyBidWZmZXIgKFZFR0EyMCkKKyAqLworc3RhdGljIGludCB2ZWdhMjBfaWhfZW5h
YmxlX3Jpbmcoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYsCisJCQkJIHN0cnVjdCBhbWRncHVf
aWhfcmluZyAqaWgpCit7CisJc3RydWN0IGFtZGdwdV9paF9yZWdzICppaF9yZWdzOworCXVpbnQz
Ml90IHRtcDsKKworCWloX3JlZ3MgPSAmaWgtPmloX3JlZ3M7CisKKwkvKiBSaW5nIEJ1ZmZlciBi
YXNlLiBbMzk6OF0gb2YgNDAtYml0IGFkZHJlc3Mgb2YgdGhlIGJlZ2lubmluZyBvZiB0aGUgcmlu
ZyBidWZmZXIqLworCVdSRUczMihpaF9yZWdzLT5paF9yYl9iYXNlLCBpaC0+Z3B1X2FkZHIgPj4g
OCk7CisJV1JFRzMyKGloX3JlZ3MtPmloX3JiX2Jhc2VfaGksIChpaC0+Z3B1X2FkZHIgPj4gNDAp
ICYgMHhmZik7CisKKwl0bXAgPSBSUkVHMzIoaWhfcmVncy0+aWhfcmJfY250bCk7CisJdG1wID0g
dmVnYTIwX2loX3JiX2NudGwoaWgsIHRtcCk7CisJaWYgKGloID09ICZhZGV2LT5pcnEuaWgpCisJ
CXRtcCA9IFJFR19TRVRfRklFTEQodG1wLCBJSF9SQl9DTlRMLCBSUFRSX1JFQVJNLCAhIWFkZXYt
PmlycS5tc2lfZW5hYmxlZCk7CisJaWYgKGloID09ICZhZGV2LT5pcnEuaWgxKSB7CisJCXRtcCA9
IFJFR19TRVRfRklFTEQodG1wLCBJSF9SQl9DTlRMLCBXUFRSX09WRVJGTE9XX0VOQUJMRSwgMCk7
CisJCXRtcCA9IFJFR19TRVRfRklFTEQodG1wLCBJSF9SQl9DTlRMLCBSQl9GVUxMX0RSQUlOX0VO
QUJMRSwgMSk7CisJfQorCWlmIChhbWRncHVfc3Jpb3ZfdmYoYWRldikpIHsKKwkJaWYgKHBzcF9y
ZWdfcHJvZ3JhbSgmYWRldi0+cHNwLCBpaF9yZWdzLT5wc3BfcmVnX2lkLCB0bXApKSB7CisJCQlk
ZXZfZXJyKGFkZXYtPmRldiwgIlBTUCBwcm9ncmFtIElIX1JCX0NOVEwgZmFpbGVkIVxuIik7CisJ
CQlyZXR1cm4gLUVUSU1FRE9VVDsKKwkJfQorCX0gZWxzZSB7CisJCVdSRUczMihpaF9yZWdzLT5p
aF9yYl9jbnRsLCB0bXApOworCX0KKworCWlmIChpaCA9PSAmYWRldi0+aXJxLmloKSB7CisJCS8q
IHNldCB0aGUgaWggcmluZyAwIHdyaXRlYmFjayBhZGRyZXNzIHdoZXRoZXIgaXQncyBlbmFibGVk
IG9yIG5vdCAqLworCQlXUkVHMzIoaWhfcmVncy0+aWhfcmJfd3B0cl9hZGRyX2xvLCBsb3dlcl8z
Ml9iaXRzKGloLT53cHRyX2FkZHIpKTsKKwkJV1JFRzMyKGloX3JlZ3MtPmloX3JiX3dwdHJfYWRk
cl9oaSwgdXBwZXJfMzJfYml0cyhpaC0+d3B0cl9hZGRyKSAmIDB4RkZGRik7CisJfQorCisJLyog
c2V0IHJwdHIsIHdwdHIgdG8gMCAqLworCVdSRUczMihpaF9yZWdzLT5paF9yYl93cHRyLCAwKTsK
KwlXUkVHMzIoaWhfcmVncy0+aWhfcmJfcnB0ciwgMCk7CisKKwlXUkVHMzIoaWhfcmVncy0+aWhf
ZG9vcmJlbGxfcnB0ciwgdmVnYTIwX2loX2Rvb3JiZWxsX3JwdHIoaWgpKTsKKworCXJldHVybiAw
OworfQorCisvKioKKyAqIHZlZ2EyMF9paF9pcnFfaW5pdCAtIGluaXQgYW5kIGVuYWJsZSB0aGUg
aW50ZXJydXB0IHJpbmcKKyAqCisgKiBAYWRldjogYW1kZ3B1X2RldmljZSBwb2ludGVyCisgKgor
ICogQWxsb2NhdGUgYSByaW5nIGJ1ZmZlciBmb3IgdGhlIGludGVycnVwdCBjb250cm9sbGVyLAor
ICogZW5hYmxlIHRoZSBSTEMsIGRpc2FibGUgaW50ZXJydXB0cywgZW5hYmxlIHRoZSBJSAorICog
cmluZyBidWZmZXIgYW5kIGVuYWJsZSBpdCAoVkkpLgorICogQ2FsbGVkIGF0IGRldmljZSBsb2Fk
IGFuZCByZXVtZS4KKyAqIFJldHVybnMgMCBmb3Igc3VjY2VzcywgZXJyb3JzIGZvciBmYWlsdXJl
LgorICovCitzdGF0aWMgaW50IHZlZ2EyMF9paF9pcnFfaW5pdChzdHJ1Y3QgYW1kZ3B1X2Rldmlj
ZSAqYWRldikKK3sKKwlzdHJ1Y3QgYW1kZ3B1X2loX3JpbmcgKmloW10gPSB7JmFkZXYtPmlycS5p
aCwgJmFkZXYtPmlycS5paDEsICZhZGV2LT5pcnEuaWgyfTsKKwl1MzIgaWhfY2hpY2tlbjsKKwlp
bnQgcmV0OworCWludCBpOworCXUzMiB0bXA7CisKKwkvKiBkaXNhYmxlIGlycXMgKi8KKwlyZXQg
PSB2ZWdhMjBfaWhfdG9nZ2xlX2ludGVycnVwdHMoYWRldiwgZmFsc2UpOworCWlmIChyZXQpCisJ
CXJldHVybiByZXQ7CisKKwlhZGV2LT5uYmlvLmZ1bmNzLT5paF9jb250cm9sKGFkZXYpOworCisJ
aWYgKGFkZXYtPmFzaWNfdHlwZSA9PSBDSElQX0FSQ1RVUlVTICYmCisJICAgIGFkZXYtPmZpcm13
YXJlLmxvYWRfdHlwZSA9PSBBTURHUFVfRldfTE9BRF9ESVJFQ1QpIHsKKwkJaWhfY2hpY2tlbiA9
IFJSRUczMl9TT0MxNShPU1NTWVMsIDAsIG1tSUhfQ0hJQ0tFTik7CisJCWlmIChhZGV2LT5pcnEu
aWgudXNlX2J1c19hZGRyKSB7CisJCQlpaF9jaGlja2VuID0gUkVHX1NFVF9GSUVMRChpaF9jaGlj
a2VuLCBJSF9DSElDS0VOLAorCQkJCQkJICAgTUNfU1BBQ0VfR1BBX0VOQUJMRSwgMSk7CisJCX0g
ZWxzZSB7CisJCQlpaF9jaGlja2VuID0gUkVHX1NFVF9GSUVMRChpaF9jaGlja2VuLCBJSF9DSElD
S0VOLAorCQkJCQkJICAgTUNfU1BBQ0VfRkJQQV9FTkFCTEUsIDEpOworCQl9CisJCVdSRUczMl9T
T0MxNShPU1NTWVMsIDAsIG1tSUhfQ0hJQ0tFTiwgaWhfY2hpY2tlbik7CisJfQorCisJZm9yIChp
ID0gMDsgaSA8IEFSUkFZX1NJWkUoaWgpOyBpKyspIHsKKwkJaWYgKGloW2ldLT5yaW5nX3NpemUp
IHsKKwkJCXJldCA9IHZlZ2EyMF9paF9lbmFibGVfcmluZyhhZGV2LCBpaFtpXSk7CisJCQlpZiAo
cmV0KQorCQkJCXJldHVybiByZXQ7CisJCX0KKwl9CisKKwl0bXAgPSBSUkVHMzJfU09DMTUoT1NT
U1lTLCAwLCBtbUlIX1NUT1JNX0NMSUVOVF9MSVNUX0NOVEwpOworCXRtcCA9IFJFR19TRVRfRklF
TEQodG1wLCBJSF9TVE9STV9DTElFTlRfTElTVF9DTlRMLAorCQkJICAgIENMSUVOVDE4X0lTX1NU
T1JNX0NMSUVOVCwgMSk7CisJV1JFRzMyX1NPQzE1KE9TU1NZUywgMCwgbW1JSF9TVE9STV9DTElF
TlRfTElTVF9DTlRMLCB0bXApOworCisJdG1wID0gUlJFRzMyX1NPQzE1KE9TU1NZUywgMCwgbW1J
SF9JTlRfRkxPT0RfQ05UTCk7CisJdG1wID0gUkVHX1NFVF9GSUVMRCh0bXAsIElIX0lOVF9GTE9P
RF9DTlRMLCBGTE9PRF9DTlRMX0VOQUJMRSwgMSk7CisJV1JFRzMyX1NPQzE1KE9TU1NZUywgMCwg
bW1JSF9JTlRfRkxPT0RfQ05UTCwgdG1wKTsKKworCXBjaV9zZXRfbWFzdGVyKGFkZXYtPnBkZXYp
OworCisJLyogZW5hYmxlIGludGVycnVwdHMgKi8KKwlyZXQgPSB2ZWdhMjBfaWhfdG9nZ2xlX2lu
dGVycnVwdHMoYWRldiwgdHJ1ZSk7CisJaWYgKHJldCkKKwkJcmV0dXJuIHJldDsKKworCXJldHVy
biAwOworfQorCisvKioKKyAqIHZlZ2EyMF9paF9pcnFfZGlzYWJsZSAtIGRpc2FibGUgaW50ZXJy
dXB0cworICoKKyAqIEBhZGV2OiBhbWRncHVfZGV2aWNlIHBvaW50ZXIKKyAqCisgKiBEaXNhYmxl
IGludGVycnVwdHMgb24gdGhlIGh3IChWRUdBMjApLgorICovCitzdGF0aWMgdm9pZCB2ZWdhMjBf
aWhfaXJxX2Rpc2FibGUoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpCit7CisJdmVnYTIwX2lo
X3RvZ2dsZV9pbnRlcnJ1cHRzKGFkZXYsIGZhbHNlKTsKKworCS8qIFdhaXQgYW5kIGFja25vd2xl
ZGdlIGlycSAqLworCW1kZWxheSgxKTsKK30KKworLyoqCisgKiB2ZWdhMjBfaWhfZ2V0X3dwdHIg
LSBnZXQgdGhlIElIIHJpbmcgYnVmZmVyIHdwdHIKKyAqCisgKiBAYWRldjogYW1kZ3B1X2Rldmlj
ZSBwb2ludGVyCisgKgorICogR2V0IHRoZSBJSCByaW5nIGJ1ZmZlciB3cHRyIGZyb20gZWl0aGVy
IHRoZSByZWdpc3RlcgorICogb3IgdGhlIHdyaXRlYmFjayBtZW1vcnkgYnVmZmVyIChWRUdBMjAp
LiAgQWxzbyBjaGVjayBmb3IKKyAqIHJpbmcgYnVmZmVyIG92ZXJmbG93IGFuZCBkZWFsIHdpdGgg
aXQuCisgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgd3B0ci4KKyAqLworc3RhdGljIHUzMiB2
ZWdhMjBfaWhfZ2V0X3dwdHIoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYsCisJCQkgICAgICBz
dHJ1Y3QgYW1kZ3B1X2loX3JpbmcgKmloKQoreworCXUzMiB3cHRyLCB0bXA7CisJc3RydWN0IGFt
ZGdwdV9paF9yZWdzICppaF9yZWdzOworCisJd3B0ciA9IGxlMzJfdG9fY3B1KCppaC0+d3B0cl9j
cHUpOworCWloX3JlZ3MgPSAmaWgtPmloX3JlZ3M7CisKKwlpZiAoIVJFR19HRVRfRklFTEQod3B0
ciwgSUhfUkJfV1BUUiwgUkJfT1ZFUkZMT1cpKQorCQlnb3RvIG91dDsKKworCS8qIERvdWJsZSBj
aGVjayB0aGF0IHRoZSBvdmVyZmxvdyB3YXNuJ3QgYWxyZWFkeSBjbGVhcmVkLiAqLworCXdwdHIg
PSBSUkVHMzJfTk9fS0lRKGloX3JlZ3MtPmloX3JiX3dwdHIpOworCWlmICghUkVHX0dFVF9GSUVM
RCh3cHRyLCBJSF9SQl9XUFRSLCBSQl9PVkVSRkxPVykpCisJCWdvdG8gb3V0OworCisJd3B0ciA9
IFJFR19TRVRfRklFTEQod3B0ciwgSUhfUkJfV1BUUiwgUkJfT1ZFUkZMT1csIDApOworCisJLyog
V2hlbiBhIHJpbmcgYnVmZmVyIG92ZXJmbG93IGhhcHBlbiBzdGFydCBwYXJzaW5nIGludGVycnVw
dAorCSAqIGZyb20gdGhlIGxhc3Qgbm90IG92ZXJ3cml0dGVuIHZlY3RvciAod3B0ciArIDMyKS4g
SG9wZWZ1bGx5CisJICogdGhpcyBzaG91bGQgYWxsb3cgdXMgdG8gY2F0Y2h1cC4KKwkgKi8KKwl0
bXAgPSAod3B0ciArIDMyKSAmIGloLT5wdHJfbWFzazsKKwlkZXZfd2FybihhZGV2LT5kZXYsICJJ
SCByaW5nIGJ1ZmZlciBvdmVyZmxvdyAiCisJCSAiKDB4JTA4WCwgMHglMDhYLCAweCUwOFgpXG4i
LAorCQkgd3B0ciwgaWgtPnJwdHIsIHRtcCk7CisJaWgtPnJwdHIgPSB0bXA7CisKKwl0bXAgPSBS
UkVHMzJfTk9fS0lRKGloX3JlZ3MtPmloX3JiX2NudGwpOworCXRtcCA9IFJFR19TRVRfRklFTEQo
dG1wLCBJSF9SQl9DTlRMLCBXUFRSX09WRVJGTE9XX0NMRUFSLCAxKTsKKwlXUkVHMzJfTk9fS0lR
KGloX3JlZ3MtPmloX3JiX2NudGwsIHRtcCk7CisKK291dDoKKwlyZXR1cm4gKHdwdHIgJiBpaC0+
cHRyX21hc2spOworfQorCisvKioKKyAqIHZlZ2EyMF9paF9pcnFfcmVhcm0gLSByZWFybSBJUlEg
aWYgbG9zdAorICoKKyAqIEBhZGV2OiBhbWRncHVfZGV2aWNlIHBvaW50ZXIKKyAqCisgKi8KK3N0
YXRpYyB2b2lkIHZlZ2EyMF9paF9pcnFfcmVhcm0oc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYs
CisJCQkgICAgICAgc3RydWN0IGFtZGdwdV9paF9yaW5nICppaCkKK3sKKwl1aW50MzJfdCB2ID0g
MDsKKwl1aW50MzJfdCBpID0gMDsKKwlzdHJ1Y3QgYW1kZ3B1X2loX3JlZ3MgKmloX3JlZ3M7CisK
KwlpaF9yZWdzID0gJmloLT5paF9yZWdzOworCisJLyogUmVhcm0gSVJRIC8gcmUtd3dyaXRlIGRv
b3JiZWxsIGlmIGRvb3JiZWxsIHdyaXRlIGlzIGxvc3QgKi8KKwlmb3IgKGkgPSAwOyBpIDwgTUFY
X1JFQVJNX1JFVFJZOyBpKyspIHsKKwkJdiA9IFJSRUczMl9OT19LSVEoaWhfcmVncy0+aWhfcmJf
cnB0cik7CisJCWlmICgodiA8IGloLT5yaW5nX3NpemUpICYmICh2ICE9IGloLT5ycHRyKSkKKwkJ
CVdET09SQkVMTDMyKGloLT5kb29yYmVsbF9pbmRleCwgaWgtPnJwdHIpOworCQllbHNlCisJCQli
cmVhazsKKwl9Cit9CisKKy8qKgorICogdmVnYTIwX2loX3NldF9ycHRyIC0gc2V0IHRoZSBJSCBy
aW5nIGJ1ZmZlciBycHRyCisgKgorICogQGFkZXY6IGFtZGdwdV9kZXZpY2UgcG9pbnRlcgorICoK
KyAqIFNldCB0aGUgSUggcmluZyBidWZmZXIgcnB0ci4KKyAqLworc3RhdGljIHZvaWQgdmVnYTIw
X2loX3NldF9ycHRyKHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2LAorCQkJICAgICAgIHN0cnVj
dCBhbWRncHVfaWhfcmluZyAqaWgpCit7CisJc3RydWN0IGFtZGdwdV9paF9yZWdzICppaF9yZWdz
OworCisJaWYgKGloLT51c2VfZG9vcmJlbGwpIHsKKwkJLyogWFhYIGNoZWNrIGlmIHN3YXBwaW5n
IGlzIG5lY2Vzc2FyeSBvbiBCRSAqLworCQkqaWgtPnJwdHJfY3B1ID0gaWgtPnJwdHI7CisJCVdE
T09SQkVMTDMyKGloLT5kb29yYmVsbF9pbmRleCwgaWgtPnJwdHIpOworCisJCWlmIChhbWRncHVf
c3Jpb3ZfdmYoYWRldikpCisJCQl2ZWdhMjBfaWhfaXJxX3JlYXJtKGFkZXYsIGloKTsKKwl9IGVs
c2UgeworCQlpaF9yZWdzID0gJmloLT5paF9yZWdzOworCQlXUkVHMzIoaWhfcmVncy0+aWhfcmJf
cnB0ciwgaWgtPnJwdHIpOworCX0KK30KKworLyoqCisgKiB2ZWdhMjBfaWhfc2VsZl9pcnEgLSBk
aXNwYXRjaCB3b3JrIGZvciByaW5nIDEgYW5kIDIKKyAqCisgKiBAYWRldjogYW1kZ3B1X2Rldmlj
ZSBwb2ludGVyCisgKiBAc291cmNlOiBpcnEgc291cmNlCisgKiBAZW50cnk6IElWIHdpdGggV1BU
UiB1cGRhdGUKKyAqCisgKiBVcGRhdGUgdGhlIFdQVFIgZnJvbSB0aGUgSVYgYW5kIHNjaGVkdWxl
IHdvcmsgdG8gaGFuZGxlIHRoZSBlbnRyaWVzLgorICovCitzdGF0aWMgaW50IHZlZ2EyMF9paF9z
ZWxmX2lycShzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiwKKwkJCSAgICAgIHN0cnVjdCBhbWRn
cHVfaXJxX3NyYyAqc291cmNlLAorCQkJICAgICAgc3RydWN0IGFtZGdwdV9pdl9lbnRyeSAqZW50
cnkpCit7CisJdWludDMyX3Qgd3B0ciA9IGNwdV90b19sZTMyKGVudHJ5LT5zcmNfZGF0YVswXSk7
CisKKwlzd2l0Y2ggKGVudHJ5LT5yaW5nX2lkKSB7CisJY2FzZSAxOgorCQkqYWRldi0+aXJxLmlo
MS53cHRyX2NwdSA9IHdwdHI7CisJCXNjaGVkdWxlX3dvcmsoJmFkZXYtPmlycS5paDFfd29yayk7
CisJCWJyZWFrOworCWNhc2UgMjoKKwkJKmFkZXYtPmlycS5paDIud3B0cl9jcHUgPSB3cHRyOwor
CQlzY2hlZHVsZV93b3JrKCZhZGV2LT5pcnEuaWgyX3dvcmspOworCQlicmVhazsKKwlkZWZhdWx0
OiBicmVhazsKKwl9CisJcmV0dXJuIDA7Cit9CisKK3N0YXRpYyBjb25zdCBzdHJ1Y3QgYW1kZ3B1
X2lycV9zcmNfZnVuY3MgdmVnYTIwX2loX3NlbGZfaXJxX2Z1bmNzID0geworCS5wcm9jZXNzID0g
dmVnYTIwX2loX3NlbGZfaXJxLAorfTsKKworc3RhdGljIHZvaWQgdmVnYTIwX2loX3NldF9zZWxm
X2lycV9mdW5jcyhzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldikKK3sKKwlhZGV2LT5pcnEuc2Vs
Zl9pcnEubnVtX3R5cGVzID0gMDsKKwlhZGV2LT5pcnEuc2VsZl9pcnEuZnVuY3MgPSAmdmVnYTIw
X2loX3NlbGZfaXJxX2Z1bmNzOworfQorCitzdGF0aWMgaW50IHZlZ2EyMF9paF9lYXJseV9pbml0
KHZvaWQgKmhhbmRsZSkKK3sKKwlzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiA9IChzdHJ1Y3Qg
YW1kZ3B1X2RldmljZSAqKWhhbmRsZTsKKworCXZlZ2EyMF9paF9zZXRfaW50ZXJydXB0X2Z1bmNz
KGFkZXYpOworCXZlZ2EyMF9paF9zZXRfc2VsZl9pcnFfZnVuY3MoYWRldik7CisJcmV0dXJuIDA7
Cit9CisKK3N0YXRpYyBpbnQgdmVnYTIwX2loX3N3X2luaXQodm9pZCAqaGFuZGxlKQoreworCXN0
cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0gKHN0cnVjdCBhbWRncHVfZGV2aWNlICopaGFuZGxl
OworCWludCByOworCisJciA9IGFtZGdwdV9pcnFfYWRkX2lkKGFkZXYsIFNPQzE1X0lIX0NMSUVO
VElEX0lILCAwLAorCQkJICAgICAgJmFkZXYtPmlycS5zZWxmX2lycSk7CisJaWYgKHIpCisJCXJl
dHVybiByOworCisJciA9IGFtZGdwdV9paF9yaW5nX2luaXQoYWRldiwgJmFkZXYtPmlycS5paCwg
MjU2ICogMTAyNCwgdHJ1ZSk7CisJaWYgKHIpCisJCXJldHVybiByOworCisJYWRldi0+aXJxLmlo
LnVzZV9kb29yYmVsbCA9IHRydWU7CisJYWRldi0+aXJxLmloLmRvb3JiZWxsX2luZGV4ID0gYWRl
di0+ZG9vcmJlbGxfaW5kZXguaWggPDwgMTsKKworCXIgPSBhbWRncHVfaWhfcmluZ19pbml0KGFk
ZXYsICZhZGV2LT5pcnEuaWgxLCBQQUdFX1NJWkUsIHRydWUpOworCWlmIChyKQorCQlyZXR1cm4g
cjsKKworCWFkZXYtPmlycS5paDEudXNlX2Rvb3JiZWxsID0gdHJ1ZTsKKwlhZGV2LT5pcnEuaWgx
LmRvb3JiZWxsX2luZGV4ID0gKGFkZXYtPmRvb3JiZWxsX2luZGV4LmloICsgMSkgPDwgMTsKKwor
CXIgPSBhbWRncHVfaWhfcmluZ19pbml0KGFkZXYsICZhZGV2LT5pcnEuaWgyLCBQQUdFX1NJWkUs
IHRydWUpOworCWlmIChyKQorCQlyZXR1cm4gcjsKKworCWFkZXYtPmlycS5paDIudXNlX2Rvb3Ji
ZWxsID0gdHJ1ZTsKKwlhZGV2LT5pcnEuaWgyLmRvb3JiZWxsX2luZGV4ID0gKGFkZXYtPmRvb3Ji
ZWxsX2luZGV4LmloICsgMikgPDwgMTsKKworCS8qIGluaXRpYWxpemUgaWggY29udHJvbCByZWdp
c3RlcnMgb2Zmc2V0ICovCisJdmVnYTIwX2loX2luaXRfcmVnaXN0ZXJfb2Zmc2V0KGFkZXYpOwor
CisJciA9IGFtZGdwdV9pcnFfaW5pdChhZGV2KTsKKworCXJldHVybiByOworfQorCitzdGF0aWMg
aW50IHZlZ2EyMF9paF9zd19maW5pKHZvaWQgKmhhbmRsZSkKK3sKKwlzdHJ1Y3QgYW1kZ3B1X2Rl
dmljZSAqYWRldiA9IChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqKWhhbmRsZTsKKworCWFtZGdwdV9p
cnFfZmluaShhZGV2KTsKKwlhbWRncHVfaWhfcmluZ19maW5pKGFkZXYsICZhZGV2LT5pcnEuaWgy
KTsKKwlhbWRncHVfaWhfcmluZ19maW5pKGFkZXYsICZhZGV2LT5pcnEuaWgxKTsKKwlhbWRncHVf
aWhfcmluZ19maW5pKGFkZXYsICZhZGV2LT5pcnEuaWgpOworCisJcmV0dXJuIDA7Cit9CisKK3N0
YXRpYyBpbnQgdmVnYTIwX2loX2h3X2luaXQodm9pZCAqaGFuZGxlKQoreworCWludCByOworCXN0
cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0gKHN0cnVjdCBhbWRncHVfZGV2aWNlICopaGFuZGxl
OworCisJciA9IHZlZ2EyMF9paF9pcnFfaW5pdChhZGV2KTsKKwlpZiAocikKKwkJcmV0dXJuIHI7
CisKKwlyZXR1cm4gMDsKK30KKworc3RhdGljIGludCB2ZWdhMjBfaWhfaHdfZmluaSh2b2lkICpo
YW5kbGUpCit7CisJc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSAoc3RydWN0IGFtZGdwdV9k
ZXZpY2UgKiloYW5kbGU7CisKKwl2ZWdhMjBfaWhfaXJxX2Rpc2FibGUoYWRldik7CisKKwlyZXR1
cm4gMDsKK30KKworc3RhdGljIGludCB2ZWdhMjBfaWhfc3VzcGVuZCh2b2lkICpoYW5kbGUpCit7
CisJc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSAoc3RydWN0IGFtZGdwdV9kZXZpY2UgKilo
YW5kbGU7CisKKwlyZXR1cm4gdmVnYTIwX2loX2h3X2ZpbmkoYWRldik7Cit9CisKK3N0YXRpYyBp
bnQgdmVnYTIwX2loX3Jlc3VtZSh2b2lkICpoYW5kbGUpCit7CisJc3RydWN0IGFtZGdwdV9kZXZp
Y2UgKmFkZXYgPSAoc3RydWN0IGFtZGdwdV9kZXZpY2UgKiloYW5kbGU7CisKKwlyZXR1cm4gdmVn
YTIwX2loX2h3X2luaXQoYWRldik7Cit9CisKK3N0YXRpYyBib29sIHZlZ2EyMF9paF9pc19pZGxl
KHZvaWQgKmhhbmRsZSkKK3sKKwkvKiB0b2RvICovCisJcmV0dXJuIHRydWU7Cit9CisKK3N0YXRp
YyBpbnQgdmVnYTIwX2loX3dhaXRfZm9yX2lkbGUodm9pZCAqaGFuZGxlKQoreworCS8qIHRvZG8g
Ki8KKwlyZXR1cm4gLUVUSU1FRE9VVDsKK30KKworc3RhdGljIGludCB2ZWdhMjBfaWhfc29mdF9y
ZXNldCh2b2lkICpoYW5kbGUpCit7CisJLyogdG9kbyAqLworCisJcmV0dXJuIDA7Cit9CisKK3N0
YXRpYyB2b2lkIHZlZ2EyMF9paF91cGRhdGVfY2xvY2tnYXRpbmdfc3RhdGUoc3RydWN0IGFtZGdw
dV9kZXZpY2UgKmFkZXYsCisJCQkJCSAgICAgICBib29sIGVuYWJsZSkKK3sKKwl1aW50MzJfdCBk
YXRhLCBkZWYsIGZpZWxkX3ZhbDsKKworCWlmIChhZGV2LT5jZ19mbGFncyAmIEFNRF9DR19TVVBQ
T1JUX0lIX0NHKSB7CisJCWRlZiA9IGRhdGEgPSBSUkVHMzJfU09DMTUoT1NTU1lTLCAwLCBtbUlI
X0NMS19DVFJMKTsKKwkJZmllbGRfdmFsID0gZW5hYmxlID8gMCA6IDE7CisJCWRhdGEgPSBSRUdf
U0VUX0ZJRUxEKGRhdGEsIElIX0NMS19DVFJMLAorCQkJCSAgICAgSUhfUkVUUllfSU5UX0NBTV9N
RU1fQ0xLX1NPRlRfT1ZFUlJJREUsIGZpZWxkX3ZhbCk7CisJCWRhdGEgPSBSRUdfU0VUX0ZJRUxE
KGRhdGEsIElIX0NMS19DVFJMLAorCQkJCSAgICAgSUhfQlVGRkVSX01FTV9DTEtfU09GVF9PVkVS
UklERSwgZmllbGRfdmFsKTsKKwkJZGF0YSA9IFJFR19TRVRfRklFTEQoZGF0YSwgSUhfQ0xLX0NU
UkwsCisJCQkJICAgICBEQlVTX01VWF9DTEtfU09GVF9PVkVSUklERSwgZmllbGRfdmFsKTsKKwkJ
ZGF0YSA9IFJFR19TRVRfRklFTEQoZGF0YSwgSUhfQ0xLX0NUUkwsCisJCQkJICAgICBPU1NTWVNf
U0hBUkVfQ0xLX1NPRlRfT1ZFUlJJREUsIGZpZWxkX3ZhbCk7CisJCWRhdGEgPSBSRUdfU0VUX0ZJ
RUxEKGRhdGEsIElIX0NMS19DVFJMLAorCQkJCSAgICAgTElNSVRfU01OX0NMS19TT0ZUX09WRVJS
SURFLCBmaWVsZF92YWwpOworCQlkYXRhID0gUkVHX1NFVF9GSUVMRChkYXRhLCBJSF9DTEtfQ1RS
TCwKKwkJCQkgICAgIERZTl9DTEtfU09GVF9PVkVSUklERSwgZmllbGRfdmFsKTsKKwkJZGF0YSA9
IFJFR19TRVRfRklFTEQoZGF0YSwgSUhfQ0xLX0NUUkwsCisJCQkJICAgICBSRUdfQ0xLX1NPRlRf
T1ZFUlJJREUsIGZpZWxkX3ZhbCk7CisJCWlmIChkZWYgIT0gZGF0YSkKKwkJCVdSRUczMl9TT0Mx
NShPU1NTWVMsIDAsIG1tSUhfQ0xLX0NUUkwsIGRhdGEpOworCX0KK30KKworc3RhdGljIGludCB2
ZWdhMjBfaWhfc2V0X2Nsb2NrZ2F0aW5nX3N0YXRlKHZvaWQgKmhhbmRsZSwKKwkJCQkJICBlbnVt
IGFtZF9jbG9ja2dhdGluZ19zdGF0ZSBzdGF0ZSkKK3sKKwlzdHJ1Y3QgYW1kZ3B1X2RldmljZSAq
YWRldiA9IChzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqKWhhbmRsZTsKKworCXZlZ2EyMF9paF91cGRh
dGVfY2xvY2tnYXRpbmdfc3RhdGUoYWRldiwKKwkJCQlzdGF0ZSA9PSBBTURfQ0dfU1RBVEVfR0FU
RSk7CisJcmV0dXJuIDA7CisKK30KKworc3RhdGljIGludCB2ZWdhMjBfaWhfc2V0X3Bvd2VyZ2F0
aW5nX3N0YXRlKHZvaWQgKmhhbmRsZSwKKwkJCQkJICBlbnVtIGFtZF9wb3dlcmdhdGluZ19zdGF0
ZSBzdGF0ZSkKK3sKKwlyZXR1cm4gMDsKK30KKworY29uc3Qgc3RydWN0IGFtZF9pcF9mdW5jcyB2
ZWdhMjBfaWhfaXBfZnVuY3MgPSB7CisJLm5hbWUgPSAidmVnYTIwX2loIiwKKwkuZWFybHlfaW5p
dCA9IHZlZ2EyMF9paF9lYXJseV9pbml0LAorCS5sYXRlX2luaXQgPSBOVUxMLAorCS5zd19pbml0
ID0gdmVnYTIwX2loX3N3X2luaXQsCisJLnN3X2ZpbmkgPSB2ZWdhMjBfaWhfc3dfZmluaSwKKwku
aHdfaW5pdCA9IHZlZ2EyMF9paF9od19pbml0LAorCS5od19maW5pID0gdmVnYTIwX2loX2h3X2Zp
bmksCisJLnN1c3BlbmQgPSB2ZWdhMjBfaWhfc3VzcGVuZCwKKwkucmVzdW1lID0gdmVnYTIwX2lo
X3Jlc3VtZSwKKwkuaXNfaWRsZSA9IHZlZ2EyMF9paF9pc19pZGxlLAorCS53YWl0X2Zvcl9pZGxl
ID0gdmVnYTIwX2loX3dhaXRfZm9yX2lkbGUsCisJLnNvZnRfcmVzZXQgPSB2ZWdhMjBfaWhfc29m
dF9yZXNldCwKKwkuc2V0X2Nsb2NrZ2F0aW5nX3N0YXRlID0gdmVnYTIwX2loX3NldF9jbG9ja2dh
dGluZ19zdGF0ZSwKKwkuc2V0X3Bvd2VyZ2F0aW5nX3N0YXRlID0gdmVnYTIwX2loX3NldF9wb3dl
cmdhdGluZ19zdGF0ZSwKK307CisKK3N0YXRpYyBjb25zdCBzdHJ1Y3QgYW1kZ3B1X2loX2Z1bmNz
IHZlZ2EyMF9paF9mdW5jcyA9IHsKKwkuZ2V0X3dwdHIgPSB2ZWdhMjBfaWhfZ2V0X3dwdHIsCisJ
LmRlY29kZV9pdiA9IGFtZGdwdV9paF9kZWNvZGVfaXZfaGVscGVyLAorCS5zZXRfcnB0ciA9IHZl
Z2EyMF9paF9zZXRfcnB0cgorfTsKKworc3RhdGljIHZvaWQgdmVnYTIwX2loX3NldF9pbnRlcnJ1
cHRfZnVuY3Moc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYpCit7CisJYWRldi0+aXJxLmloX2Z1
bmNzID0gJnZlZ2EyMF9paF9mdW5jczsKK30KKworY29uc3Qgc3RydWN0IGFtZGdwdV9pcF9ibG9j
a192ZXJzaW9uIHZlZ2EyMF9paF9pcF9ibG9jayA9Cit7CisJLnR5cGUgPSBBTURfSVBfQkxPQ0tf
VFlQRV9JSCwKKwkubWFqb3IgPSA0LAorCS5taW5vciA9IDIsCisJLnJldiA9IDAsCisJLmZ1bmNz
ID0gJnZlZ2EyMF9paF9pcF9mdW5jcywKK307CmRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0v
YW1kL2FtZGdwdS92ZWdhMjBfaWguaCBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3ZlZ2Ey
MF9paC5oCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMC4uN2RlNDBmMGQy
ODUzCi0tLSAvZGV2L251bGwKKysrIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvdmVnYTIw
X2loLmgKQEAgLTAsMCArMSwzMCBAQAorLyoKKyAqIENvcHlyaWdodCAyMDE2IEFkdmFuY2VkIE1p
Y3JvIERldmljZXMsIEluYy4KKyAqCisgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBm
cmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQorICogY29weSBvZiB0aGlz
IHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdh
cmUiKSwKKyAqIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGlu
Y2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24KKyAqIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBt
b2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLAorICogYW5kL29y
IHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdo
b20gdGhlCisgKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhl
IGZvbGxvd2luZyBjb25kaXRpb25zOgorICoKKyAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNl
IGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCisgKiBhbGwg
Y29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KKyAqCisgKiBU
SEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkg
S0lORCwgRVhQUkVTUyBPUgorICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBU
TyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCisgKiBGSVRORVNTIEZPUiBBIFBB
UlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiAgSU4gTk8gRVZFTlQgU0hBTEwK
KyAqIFRIRSBDT1BZUklHSFQgSE9MREVSKFMpIE9SIEFVVEhPUihTKSBCRSBMSUFCTEUgRk9SIEFO
WSBDTEFJTSwgREFNQUdFUyBPUgorICogT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFD
VElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsCisgKiBBUklTSU5HIEZST00sIE9V
VCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IKKyAq
IE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KKyAqCisgKi8KKworI2lmbmRlZiBfX1ZF
R0EyMF9JSF9IX18KKyNkZWZpbmUgX19WRUdBMjBfSUhfSF9fCisKK2V4dGVybiBjb25zdCBzdHJ1
Y3QgYW1kX2lwX2Z1bmNzIHZlZ2EyMF9paF9pcF9mdW5jczsKK2V4dGVybiBjb25zdCBzdHJ1Y3Qg
YW1kZ3B1X2lwX2Jsb2NrX3ZlcnNpb24gdmVnYTIwX2loX2lwX2Jsb2NrOworCisjZW5kaWYKLS0g
CjIuMTcuMQoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18K
YW1kLWdmeCBtYWlsaW5nIGxpc3QKYW1kLWdmeEBsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6
Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9hbWQtZ2Z4Cg==
