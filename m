Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id C8A144046C8
	for <lists+amd-gfx@lfdr.de>; Thu,  9 Sep 2021 10:12:01 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 33CF06E487;
	Thu,  9 Sep 2021 08:12:00 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from NAM11-DM6-obe.outbound.protection.outlook.com
 (mail-dm6nam11on2055.outbound.protection.outlook.com [40.107.223.55])
 by gabe.freedesktop.org (Postfix) with ESMTPS id DCCF76E487
 for <amd-gfx@lists.freedesktop.org>; Thu,  9 Sep 2021 08:11:58 +0000 (UTC)
ARC-Seal: i=1; a=rsa-sha256; s=arcselector9901; d=microsoft.com; cv=none;
 b=AdiTbhXep0J291m/ZAs0/RK5YY0bnb/DuwBO9K2VDaZx5ptcAx1g2R4vCnBAzRvMcoUyitkNhd7FObEy2hX8TTc/lQZghsaUhPHWBWVFC91w5c9iGWASfc14mCAUY1qgN6dFNvKTK3aiwe5AZUHUK2nooeV2HgHmzI33U1jRI7dHr1L3sMc2yjSMLY77M8tAkVEASXjpxo92/pfQWGRCIT+OmjX1fcLxOq1zw5SmENcJ5bwZl0TKyOM2V5xwg9SloBIqa6VrRErvfEqWoP9gDG+9jlXTR8GDICGUX6SjusdvXUwjCaX/gsavA91krml5WzQKOEI+wLDaCxNncYhu+A==
ARC-Message-Signature: i=1; a=rsa-sha256; c=relaxed/relaxed; d=microsoft.com; 
 s=arcselector9901;
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version; 
 bh=7UXNzITzLUnfXW9iVudBXXSyPGxbdu/6g+SYAne5bV4=;
 b=dbcd+nDtNLMcWXfvRG4XsPWZfRq6t+XnRiQKeHlwj0ccAlsnnpQBNBvOHvGKKwJ/FUrw0C92H1zNTGDj1BCEp17D+GhWzTgMOGhMDFpUDA524k/E1y2Cyl3R3OZBIdLgNZcy8H4VDyxrt6wula5UaByQ/pAnzxP+MRb9PnhwEfJOSFYtnFE6VmLETlz0gxombftFA/Dqr7hbKYD1DtTx9QzcIkMGuZ7QtnlXA3YPhBxwso8KHqnEgBUOojP/xmSq95bgVh5HEzMfX6cfGGwWz19FZYvImNl0cUPQXJ3+LdJZ3dY+iCkA4KhbWxNliPL087X1Uwv2XX0w2ViEGsQFBw==
ARC-Authentication-Results: i=1; mx.microsoft.com 1; spf=pass
 smtp.mailfrom=amd.com; dmarc=pass action=none header.from=amd.com; dkim=pass
 header.d=amd.com; arc=none
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=amd.com; s=selector1; 
 h=From:Date:Subject:Message-ID:Content-Type:MIME-Version:X-MS-Exchange-SenderADCheck;
 bh=7UXNzITzLUnfXW9iVudBXXSyPGxbdu/6g+SYAne5bV4=;
 b=Gg1mz1KJ9DUGB4QsVGuKYjQbaj+Z5Sw7wAsPGO93yaKTkK7M3B8LIj1xbq4HmMA6WvAbDRie7tOyD0df2xKjadciRLsVBqrH2iDGuuNjhqsK5W3Cmcrf5xDrWFcA3ljubzRaq0ZS7fmPjmssNNZbesPSJjjOtOIAAj575Bv1JXM=
Received: from DM4PR12MB5165.namprd12.prod.outlook.com (2603:10b6:5:394::9) by
 DM4PR12MB5279.namprd12.prod.outlook.com (2603:10b6:5:39f::8) with
 Microsoft
 SMTP Server (version=TLS1_2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 15.20.4500.16; Thu, 9 Sep 2021 08:11:55 +0000
Received: from DM4PR12MB5165.namprd12.prod.outlook.com
 ([fe80::79d6:3902:9bcd:37ca]) by DM4PR12MB5165.namprd12.prod.outlook.com
 ([fe80::79d6:3902:9bcd:37ca%9]) with mapi id 15.20.4500.016; Thu, 9 Sep 2021
 08:11:55 +0000
From: "Pan, Xinhui" <Xinhui.Pan@amd.com>
To: "amd-gfx@lists.freedesktop.org" <amd-gfx@lists.freedesktop.org>, "Koenig, 
 Christian" <Christian.Koenig@amd.com>
CC: "Deucher, Alexander" <Alexander.Deucher@amd.com>
Subject: Re: [PATCH 2/2] drm/amdgpu: alloc IB extra msg from IB pool
Thread-Topic: [PATCH 2/2] drm/amdgpu: alloc IB extra msg from IB pool
Thread-Index: AQHXpT8vytTD7lxt+k+m7Tk/uyOQlqubStOAgAAL9fk=
Date: Thu, 9 Sep 2021 08:11:55 +0000
Message-ID: <DM4PR12MB5165F781E6DA18852A01640C87D59@DM4PR12MB5165.namprd12.prod.outlook.com>
References: <DM4PR12MB5165E6211939B36FD10BF65C87D59@DM4PR12MB5165.namprd12.prod.outlook.com>
 <33e834d0-b1d7-16ed-4be4-ec6dd485b5a0@amd.com>
In-Reply-To: <33e834d0-b1d7-16ed-4be4-ec6dd485b5a0@amd.com>
Accept-Language: zh-CN, en-US
Content-Language: zh-CN
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
msip_labels: MSIP_Label_88914ebd-7e6c-4e12-a031-a9906be2db14_Enabled=True;
 MSIP_Label_88914ebd-7e6c-4e12-a031-a9906be2db14_SiteId=3dd8961f-e488-4e60-8e11-a82d994e183d;
 MSIP_Label_88914ebd-7e6c-4e12-a031-a9906be2db14_SetDate=2021-09-09T07:59:38.4898548Z;
 MSIP_Label_88914ebd-7e6c-4e12-a031-a9906be2db14_ContentBits=0;
 MSIP_Label_88914ebd-7e6c-4e12-a031-a9906be2db14_Method=Privileged
authentication-results: lists.freedesktop.org; dkim=none (message not signed)
 header.d=none; lists.freedesktop.org;
 dmarc=none action=none header.from=amd.com;
x-ms-publictraffictype: Email
x-ms-office365-filtering-correlation-id: 8954bc90-936a-49c4-da41-08d973697d3a
x-ms-traffictypediagnostic: DM4PR12MB5279:
x-ms-exchange-transport-forked: True
x-microsoft-antispam-prvs: <DM4PR12MB5279855EA1BE8DC7395B488F87D59@DM4PR12MB5279.namprd12.prod.outlook.com>
x-ms-oob-tlc-oobclassifiers: OLM:7691;
x-ms-exchange-senderadcheck: 1
x-ms-exchange-antispam-relay: 0
x-microsoft-antispam: BCL:0;
x-microsoft-antispam-message-info: BRkOkcM+cOblb0SDK6JBWqF/pH57UQ4/iNhxY4R9mQg2FmoJrTzD9heZpDBCKoXqrC09sasf4ncz3JbWrNtE0xBpYV9K9h5ub4vxGVeQKhmGpERd7GYMj6/s2r42MzdF1CuXYNnDJi7rJZohxTIUc7BdHb42aV08MgMT2v7aiHC2UzGzaXiELLXaWQH+l2tFfKSShSsDggkoT2PFhaKffTudb4PWUVRHARNqYYQ244f3u138MllYLC2x+puVFfTpIuyDN1AFzPushsIfNGVA5VlK6WEdOBQzN4XYPMXfu65n6ZkMbmaMie+IzbPNHboX9Xrhe1+SmwC5kf/M4zCvHT5FObhyr22mJvp1xhh6llpv1WouLhXoF/enP/myJQXG/hIx7/QaIDCOMMKja0D6fP0euI0VsgFzx89V6UJ0zEpvTO/Auj+VBLu0jw+1reBb71q6OFNe2xZ8RGFYgDj8uD4REAyjThh01AIyA8ZAg3BdjWGuvFscqeWcVb0/tiYBSbALXYrwZNbC866RVqOqR/50rrEFYXz01u+aCa3A7AcZnj2hkLXyjBjVh8DD47/zZLtf06kG6+wmSofeZX2lPFnOu2znwsRUsDwut7zvpxjmzatQpQw1hKS02/YAoewuHHpblYh/Bnn/CjlVI6WUgDFpdwzgLQkwMFo/Px+0TDgg7V+bQNCAkIXdmR2DUOgbXr0ePYCrIdXgfVKH08mWKw==
x-forefront-antispam-report: CIP:255.255.255.255; CTRY:; LANG:en; SCL:1; SRV:;
 IPV:NLI; SFV:NSPM; H:DM4PR12MB5165.namprd12.prod.outlook.com; PTR:; CAT:NONE;
 SFS:(4636009)(366004)(346002)(39860400002)(396003)(376002)(136003)(26005)(186003)(6506007)(38070700005)(83380400001)(7696005)(316002)(71200400001)(110136005)(2906002)(9686003)(30864003)(76116006)(478600001)(66556008)(55016002)(91956017)(4326008)(5660300002)(52536014)(8676002)(33656002)(66446008)(64756008)(66476007)(66946007)(8936002)(6636002)(86362001)(122000001)(38100700002)(559001)(579004);
 DIR:OUT; SFP:1101; 
x-ms-exchange-antispam-messagedata-chunkcount: 1
x-ms-exchange-antispam-messagedata-0: =?gb2312?B?TnZySjVvVVI1ODJqdUdNYlp2VXFvT0NQZU1FL0MrWThOd005MkNsdmRXSCtX?=
 =?gb2312?B?d0orbmhWSFVoTlpQNXN2V0NCYllQaU5YVlZZOHh4YUdIdFRNWEhpRjIvQXJM?=
 =?gb2312?B?eVVNeE1WS2FQc2k5WlNzSEsxRFNyYzlxdmxJSlJJdEoybVpzaUltMzJueVJN?=
 =?gb2312?B?S3BzbHQ1VXR0djZMYXc3OGhObkpENnc0eW1NaWVtcTI3ejd2SFhnU3c5M0I0?=
 =?gb2312?B?SDNrNWxVcjhacndsZGlHcnlxaXlJTUhqdElXYkZLYm5SSVZzVVVqZ3dqc1Bq?=
 =?gb2312?B?akUvQlNiYmtVcXRXbENEc1RqWG1CZDFSd25GSTRCT01yWjh1cnJZK1BxUk1N?=
 =?gb2312?B?ZENYODF2eGRJU0xES3Nha3dyQ3ladWZLMldyTkNwQ05UaVR5VkU1N2ZDeWkr?=
 =?gb2312?B?NnpaWHhjenlKR1pxUHJweUpkeEpiM3R3MGxkbTBCeVFkU2VEdFR1Zk5mQ0Iw?=
 =?gb2312?B?WE9ucTlIcm1mbU1RN2NzSjM4b3l5L1M0Uk5HWkpBRjJVUXFMZllacFZUNWdZ?=
 =?gb2312?B?TXdJb2dKU3pMOGk4SUZPVGNyZUxuV3FYVWkzcmQ0RTg3K0d0YTlrektxb2NP?=
 =?gb2312?B?cTNjdWVxRnJzV0hobUdIbnUxdmRDZEpDeUtYdXg5RW9NRU96N3VZZmVFdjRY?=
 =?gb2312?B?a2hUR2prVFJueUU5UTFWek56aGxjM05Ycm9HQUNHMm9lNFFobTRJVDZ2b0th?=
 =?gb2312?B?bTJSTkI5aG5hcnBTSzVZMzhSckVGVHFJc0hZSHBEeGE1UkxtQm91Q3FqM1h0?=
 =?gb2312?B?S0wxRmxMMHJMcVU2NUlMZXRTc3Q2OEkzd3M4MW5CZmZ5dzB3dEQ5ZWpOaFZN?=
 =?gb2312?B?TjBxUEFpdUZYRTloUUtMY3FVVitEc1pXYmFhWmFBOU1QczcxeE9MVXRVZ2Rm?=
 =?gb2312?B?ZEI4SEdndU5Ca2RwYVF2R1pIbnlvQnpyMEVyZkxVMTJvbU5wOXlaSlBzM2Nx?=
 =?gb2312?B?SUlmeUZOditqeWxNcW9iOVlDWU5BOTBRUlZ3cFJ0cXd0Yjh2VEIyZDNrU055?=
 =?gb2312?B?U3Nkb3Q1dklvS1NwZWlxbThNOCtCWGRTQjY1WkxKejVOeHdaNWdvVWZjQ1pS?=
 =?gb2312?B?bWFidDByWWg4RS9qMlh2SlVnNFdwemhSbGJGRG41UnUyS2VRQ2t4TXYrTDJE?=
 =?gb2312?B?K0s5RmZpZDR0ckx0ZzFEZXRZanZlYzZyRUtBMThLNXgwQTVoN3cyaStEbXdq?=
 =?gb2312?B?U1NxUm13VjlXZjV6SjNOWnllVUpUekxkSUVwVmlQVWpLSWljRkcwWHhHNHJk?=
 =?gb2312?B?MDdBRHNVY3VFYXlyeU9LQUtlcW5ZMW9aRXE3eHdQUlg5cjdaRTBCMHh0SDJO?=
 =?gb2312?B?TDRGdjN5emM5bTdVSXp5VU5LVTBEcWZZdHFJWTNFRDdad1pxajNZTmxTYmJs?=
 =?gb2312?B?QWEyMTlUdGgxMGJhNERIbnJ1ekdBNVQ1ZVcyMEdrMnBLZmF3OXNFZnlNWFJu?=
 =?gb2312?B?b05tdEpzNnVKZStJU0Rod2FlS3Y3S3dkRTBtWW1uclRyZ1N6VFlITUR1QSt5?=
 =?gb2312?B?dWJrZDAxd3hlL0FvQTVMYjBJOFhDVEVkUTJTTkpickl5enlrek5aOEN6MWFO?=
 =?gb2312?B?QWtuWjVsYTNIMTlSOVBOQ2lWWURWZUp2d0xDSXhFdmZ4dGpPa3NJWW1VVDNi?=
 =?gb2312?B?U05MVk1nbldjVFQ1aHBJbkgvL3JJeVRpMk9lNUVLMEdRaWVkM2tOMzZPT0JY?=
 =?gb2312?B?Z0xYNGI0WHhubDRVbDd1UCtDNUFHNEJIcThNdXg1c0ZiMkVzRGdVTjRzQStw?=
 =?gb2312?B?Um5zdDJuQ1VpNmdjVUNGNzJRS0t3SGZtcVY2L09OclkxVUQ5THZmQ0RxZWdD?=
 =?gb2312?B?T1d3TW5lNFpEVElxZE9hZz09?=
Content-Type: multipart/alternative;
 boundary="_000_DM4PR12MB5165F781E6DA18852A01640C87D59DM4PR12MB5165namp_"
MIME-Version: 1.0
X-OriginatorOrg: amd.com
X-MS-Exchange-CrossTenant-AuthAs: Internal
X-MS-Exchange-CrossTenant-AuthSource: DM4PR12MB5165.namprd12.prod.outlook.com
X-MS-Exchange-CrossTenant-Network-Message-Id: 8954bc90-936a-49c4-da41-08d973697d3a
X-MS-Exchange-CrossTenant-originalarrivaltime: 09 Sep 2021 08:11:55.8469 (UTC)
X-MS-Exchange-CrossTenant-fromentityheader: Hosted
X-MS-Exchange-CrossTenant-id: 3dd8961f-e488-4e60-8e11-a82d994e183d
X-MS-Exchange-CrossTenant-mailboxtype: HOSTED
X-MS-Exchange-CrossTenant-userprincipalname: n/FzUNFxzNAgmTXZijlSlHI9cS2LnRq8B62c/KvVYmGaKL5WDyA4DL/zIA/KtUF5
X-MS-Exchange-Transport-CrossTenantHeadersStamped: DM4PR12MB5279
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

--_000_DM4PR12MB5165F781E6DA18852A01640C87D59DM4PR12MB5165namp_
Content-Type: text/plain; charset="gb2312"
Content-Transfer-Encoding: base64

W0FNRCBPZmZpY2lhbCBVc2UgT25seV0NCg0Kd2VsbCwgSWYgSUIgdGVzdCBmYWlscyBiZWNhdXNl
IHdlIHVzZSBndHQgZG9tYWluIG9yDQp0aGUgYWJvdmUgMjU2TUIgdnJhbS4gVGhlbiB0aGUgZmFp
bHVyZSBpcyBleHBlY3RlZC4NCkRvZXNuJ3QgSUIgdGVzdCBleGlzdCB0byBkZXRlY3Qgc3VjaCBp
c3N1ZT8NCg0KX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18NCreivP7IyzogS29lbmln
LCBDaHJpc3RpYW4gPENocmlzdGlhbi5Lb2VuaWdAYW1kLmNvbT4NCreiy83KsbzkOiAyMDIxxOo5
1MI5yNXQx8bay8QgMTU6MTYNCsrVvP7IyzogUGFuLCBYaW5odWk7IGFtZC1nZnhAbGlzdHMuZnJl
ZWRlc2t0b3Aub3JnDQqzrcvNOiBEZXVjaGVyLCBBbGV4YW5kZXINCtb3zOI6IFJlOiBbUEFUQ0gg
Mi8yXSBkcm0vYW1kZ3B1OiBhbGxvYyBJQiBleHRyYSBtc2cgZnJvbSBJQiBwb29sDQoNCkFtIDA5
LjA5LjIxIHVtIDA3OjU1IHNjaHJpZWIgUGFuLCBYaW5odWk6DQo+IFtBTUQgT2ZmaWNpYWwgVXNl
IE9ubHldDQo+DQo+IFRoZXJlIGlzIG9uZSBkZWRpY2F0ZWQgSUIgcG9vbCBmb3IgSUIgdGVzdC4g
U28gbGV0cyB1c2UgaXQgZm9yIGV4dHJhIG1zZw0KPiB0b28uDQo+DQo+IEZvciBVVkQgb24gb2xk
ZXIgSFcsIHVzZSBvbmUgcmVzZXJ2ZWQgQk8gYXQgc3BlY2lmaWMgcmFuZ2UuDQo+DQo+IFNpZ25l
ZC1vZmYtYnk6IHhpbmh1aSBwYW4gPHhpbmh1aS5wYW5AYW1kLmNvbT4NCj4gLS0tDQo+ICAgZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3V2ZC5jIHwgMTczICsrKysrKysrKysrKysr
Ky0tLS0tLS0tLQ0KPiAgIGRyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV91dmQuaCB8
ICAgMSArDQo+ICAgZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3ZjZS5jIHwgIDE4
ICstLQ0KPiAgIGRyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV92Y24uYyB8ICA5OSAr
KysrKystLS0tLS0tLQ0KPiAgIGRyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3V2ZF92Nl8wLmMg
ICB8ICAyOCArKy0tDQo+ICAgZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvdXZkX3Y3XzAuYyAg
IHwgIDI4ICsrLS0NCj4gICA2IGZpbGVzIGNoYW5nZWQsIDE4NSBpbnNlcnRpb25zKCspLCAxNjIg
ZGVsZXRpb25zKC0pDQoNClBsZWFzZSBzcGxpdCB0aGF0IHVwIGludG8gb25lIHBhdGNoIGZvciBV
VkQsIG9uZSBmb3IgVkNFIGFuZCBhIHRoaXJkIGZvcg0KVkNOLg0KDQo+DQo+IGRpZmYgLS1naXQg
YS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfdXZkLmMgYi9kcml2ZXJzL2dwdS9k
cm0vYW1kL2FtZGdwdS9hbWRncHVfdXZkLmMNCj4gaW5kZXggZDQ1MWMzNTk2MDZhLi43MzNjZmM4
NDhjNmMgMTAwNjQ0DQo+IC0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV91
dmQuYw0KPiArKysgYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfdXZkLmMNCj4g
QEAgLTI5OSw4ICsyOTksMzYgQEAgaW50IGFtZGdwdV91dmRfc3dfaW5pdChzdHJ1Y3QgYW1kZ3B1
X2RldmljZSAqYWRldikNCj4gICAgICAgICAgfQ0KPg0KPiAgICAgICAgICAvKiBmcm9tIHV2ZCB2
NS4wIEhXIGFkZHJlc3NpbmcgY2FwYWNpdHkgaW5jcmVhc2VkIHRvIDY0IGJpdHMgKi8NCj4gLSAg
ICAgICBpZiAoIWFtZGdwdV9kZXZpY2VfaXBfYmxvY2tfdmVyc2lvbl9jbXAoYWRldiwgQU1EX0lQ
X0JMT0NLX1RZUEVfVVZELCA1LCAwKSkNCj4gKyAgICAgICBpZiAoIWFtZGdwdV9kZXZpY2VfaXBf
YmxvY2tfdmVyc2lvbl9jbXAoYWRldiwgQU1EX0lQX0JMT0NLX1RZUEVfVVZELCA1LCAwKSkgew0K
PiAgICAgICAgICAgICAgICAgIGFkZXYtPnV2ZC5hZGRyZXNzXzY0X2JpdCA9IHRydWU7DQoNClll
YWgsIHRoYXQncyBleGFjdGx5IHdoYXQgSSdtIHRyeWluZyB0byBhdm9pZC4NCg0KV2Ugc2hvdWxk
IHVzZSB0aGUgQk8gYXBwcm9hY2ggYm90aCBmb3Igb2xkIGFuZCBuZXcgVVZEIGJsb2NrcywganVz
dA0KbWFraW5nIHN1cmUgdGhhdCB3ZSBwbGFjZSBpdCBjb3JyZWN0bHkgZm9yIHRoZSBvbGQgb25l
cy4NCg0KVGhpcyB3YXkgd2UgaGF2ZSBtdWNoIGxvd2VyIGNoYW5jZSBvZiBicmVha2luZyB0aGUg
b2xkIHN0dWZmLg0KDQpUaGFua3MsDQpDaHJpc3RpYW4uDQoNCj4gKyAgICAgICB9IGVsc2Ugew0K
PiArICAgICAgICAgICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8gPSBOVUxMOw0KPiArICAgICAg
ICAgICAgICAgdm9pZCAqYWRkcjsNCj4gKw0KPiArICAgICAgICAgICAgICAgciA9IGFtZGdwdV9i
b19jcmVhdGVfcmVzZXJ2ZWQoYWRldiwgUEFHRV9TSVpFLCBQQUdFX1NJWkUsDQo+ICsgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgQU1ER1BVX0dFTV9ET01BSU5fVlJBTSwNCj4gKyAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAmYm8sIE5VTEwsICZhZGRyKTsNCj4gKyAgICAgICAg
ICAgICAgIGlmIChyKQ0KPiArICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjsNCj4gKyAg
ICAgICAgICAgICAgIGFtZGdwdV9ib19rdW5tYXAoYm8pOw0KPiArICAgICAgICAgICAgICAgYW1k
Z3B1X2JvX3VucGluKGJvKTsNCj4gKyAgICAgICAgICAgICAgIHIgPSBhbWRncHVfYm9fcGluX3Jl
c3RyaWN0ZWQoYm8sIEFNREdQVV9HRU1fRE9NQUlOX1ZSQU0sDQo+ICsgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgMCwgMjU2IDw8IDIwKTsNCj4gKyAgICAgICAgICAgICAgIGlmIChyKSB7
DQo+ICsgICAgICAgICAgICAgICAgICAgICAgIGFtZGdwdV9ib191bnJlc2VydmUoYm8pOw0KPiAr
ICAgICAgICAgICAgICAgICAgICAgICBhbWRncHVfYm9fdW5yZWYoJmJvKTsNCj4gKyAgICAgICAg
ICAgICAgICAgICAgICAgcmV0dXJuIHI7DQo+ICsgICAgICAgICAgICAgICB9DQo+ICsgICAgICAg
ICAgICAgICByID0gYW1kZ3B1X2JvX2ttYXAoYm8sICZhZGRyKTsNCj4gKyAgICAgICAgICAgICAg
IGlmIChyKSB7DQo+ICsgICAgICAgICAgICAgICAgICAgICAgIGFtZGdwdV9ib191bnBpbihibyk7
DQo+ICsgICAgICAgICAgICAgICAgICAgICAgIGFtZGdwdV9ib191bnJlc2VydmUoYm8pOw0KPiAr
ICAgICAgICAgICAgICAgICAgICAgICBhbWRncHVfYm9fdW5yZWYoJmJvKTsNCj4gKyAgICAgICAg
ICAgICAgICAgICAgICAgcmV0dXJuIHI7DQo+ICsgICAgICAgICAgICAgICB9DQo+ICsgICAgICAg
ICAgICAgICBhZGV2LT51dmQuaWJfYm8gPSBibzsNCj4gKyAgICAgICAgICAgICAgIGFtZGdwdV9i
b191bnJlc2VydmUoYm8pOw0KPiArICAgICAgIH0NCj4NCj4gICAgICAgICAgc3dpdGNoIChhZGV2
LT5hc2ljX3R5cGUpIHsNCj4gICAgICAgICAgY2FzZSBDSElQX1RPTkdBOg0KPiBAQCAtMzQyLDYg
KzM3MCw3IEBAIGludCBhbWRncHVfdXZkX3N3X2Zpbmkoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFk
ZXYpDQo+ICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IEFNREdQVV9NQVhfVVZEX0VO
Q19SSU5HUzsgKytpKQ0KPiAgICAgICAgICAgICAgICAgICAgICAgICAgYW1kZ3B1X3JpbmdfZmlu
aSgmYWRldi0+dXZkLmluc3Rbal0ucmluZ19lbmNbaV0pOw0KPiAgICAgICAgICB9DQo+ICsgICAg
ICAgYW1kZ3B1X2JvX2ZyZWVfa2VybmVsKCZhZGV2LT51dmQuaWJfYm8sIE5VTEwsIE5VTEwpOw0K
PiAgICAgICAgICByZWxlYXNlX2Zpcm13YXJlKGFkZXYtPnV2ZC5mdyk7DQo+DQo+ICAgICAgICAg
IHJldHVybiAwOw0KPiBAQCAtMTA2Niw3ICsxMDk1LDcgQEAgaW50IGFtZGdwdV91dmRfcmluZ19w
YXJzZV9jcyhzdHJ1Y3QgYW1kZ3B1X2NzX3BhcnNlciAqcGFyc2VyLCB1aW50MzJfdCBpYl9pZHgp
DQo+ICAgICAgICAgIHJldHVybiAwOw0KPiAgIH0NCj4NCj4gLXN0YXRpYyBpbnQgYW1kZ3B1X3V2
ZF9zZW5kX21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHN0cnVjdCBhbWRncHVfYm8gKmJv
LA0KPiArc3RhdGljIGludCBhbWRncHVfdXZkX3NlbmRfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAq
cmluZywgdWludDY0X3QgYWRkciwNCj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBi
b29sIGRpcmVjdCwgc3RydWN0IGRtYV9mZW5jZSAqKmZlbmNlKQ0KPiAgIHsNCj4gICAgICAgICAg
c3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSByaW5nLT5hZGV2Ow0KPiBAQCAtMTA3NCwyOSAr
MTEwMywxNSBAQCBzdGF0aWMgaW50IGFtZGdwdV91dmRfc2VuZF9tc2coc3RydWN0IGFtZGdwdV9y
aW5nICpyaW5nLCBzdHJ1Y3QgYW1kZ3B1X2JvICpibywNCj4gICAgICAgICAgc3RydWN0IGFtZGdw
dV9qb2IgKmpvYjsNCj4gICAgICAgICAgc3RydWN0IGFtZGdwdV9pYiAqaWI7DQo+ICAgICAgICAg
IHVpbnQzMl90IGRhdGFbNF07DQo+IC0gICAgICAgdWludDY0X3QgYWRkcjsNCj4gICAgICAgICAg
bG9uZyByOw0KPiAgICAgICAgICBpbnQgaTsNCj4gICAgICAgICAgdW5zaWduZWQgb2Zmc2V0X2lk
eCA9IDA7DQo+ICAgICAgICAgIHVuc2lnbmVkIG9mZnNldFszXSA9IHsgVVZEX0JBU0VfU0ksIDAs
IDAgfTsNCj4NCj4gLSAgICAgICBhbWRncHVfYm9fa3VubWFwKGJvKTsNCj4gLSAgICAgICBhbWRn
cHVfYm9fdW5waW4oYm8pOw0KPiAtDQo+IC0gICAgICAgaWYgKCFyaW5nLT5hZGV2LT51dmQuYWRk
cmVzc182NF9iaXQpIHsNCj4gLSAgICAgICAgICAgICAgIHN0cnVjdCB0dG1fb3BlcmF0aW9uX2N0
eCBjdHggPSB7IHRydWUsIGZhbHNlIH07DQo+IC0NCj4gLSAgICAgICAgICAgICAgIGFtZGdwdV9i
b19wbGFjZW1lbnRfZnJvbV9kb21haW4oYm8sIEFNREdQVV9HRU1fRE9NQUlOX1ZSQU0pOw0KPiAt
ICAgICAgICAgICAgICAgYW1kZ3B1X3V2ZF9mb3JjZV9pbnRvX3V2ZF9zZWdtZW50KGJvKTsNCj4g
LSAgICAgICAgICAgICAgIHIgPSB0dG1fYm9fdmFsaWRhdGUoJmJvLT50Ym8sICZiby0+cGxhY2Vt
ZW50LCAmY3R4KTsNCj4gLSAgICAgICAgICAgICAgIGlmIChyKQ0KPiAtICAgICAgICAgICAgICAg
ICAgICAgICBnb3RvIGVycjsNCj4gLSAgICAgICB9DQo+IC0NCj4gICAgICAgICAgciA9IGFtZGdw
dV9qb2JfYWxsb2Nfd2l0aF9pYihhZGV2LCA2NCwgZGlyZWN0ID8gQU1ER1BVX0lCX1BPT0xfRElS
RUNUIDoNCj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTURHUFVfSUJf
UE9PTF9ERUxBWUVELCAmam9iKTsNCj4gICAgICAgICAgaWYgKHIpDQo+IC0gICAgICAgICAgICAg
ICBnb3RvIGVycjsNCj4gKyAgICAgICAgICAgICAgIHJldHVybiByOw0KPg0KPiAgICAgICAgICBp
ZiAoYWRldi0+YXNpY190eXBlID49IENISVBfVkVHQTEwKSB7DQo+ICAgICAgICAgICAgICAgICAg
b2Zmc2V0X2lkeCA9IDEgKyByaW5nLT5tZTsNCj4gQEAgLTExMTAsNyArMTEyNSw2IEBAIHN0YXRp
YyBpbnQgYW1kZ3B1X3V2ZF9zZW5kX21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHN0cnVj
dCBhbWRncHVfYm8gKmJvLA0KPiAgICAgICAgICBkYXRhWzNdID0gUEFDS0VUMChvZmZzZXRbb2Zm
c2V0X2lkeF0gKyBVVkRfTk9fT1AsIDApOw0KPg0KPiAgICAgICAgICBpYiA9ICZqb2ItPmlic1sw
XTsNCj4gLSAgICAgICBhZGRyID0gYW1kZ3B1X2JvX2dwdV9vZmZzZXQoYm8pOw0KPiAgICAgICAg
ICBpYi0+cHRyWzBdID0gZGF0YVswXTsNCj4gICAgICAgICAgaWItPnB0clsxXSA9IGFkZHI7DQo+
ICAgICAgICAgIGliLT5wdHJbMl0gPSBkYXRhWzFdOw0KPiBAQCAtMTEyMywzMyArMTEzNywxMyBA
QCBzdGF0aWMgaW50IGFtZGdwdV91dmRfc2VuZF9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5n
LCBzdHJ1Y3QgYW1kZ3B1X2JvICpibywNCj4gICAgICAgICAgfQ0KPiAgICAgICAgICBpYi0+bGVu
Z3RoX2R3ID0gMTY7DQo+DQo+IC0gICAgICAgaWYgKGRpcmVjdCkgew0KPiAtICAgICAgICAgICAg
ICAgciA9IGRtYV9yZXN2X3dhaXRfdGltZW91dChiby0+dGJvLmJhc2UucmVzdiwgdHJ1ZSwgZmFs
c2UsDQo+IC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZWNzX3Rv
X2ppZmZpZXMoMTApKTsNCj4gLSAgICAgICAgICAgICAgIGlmIChyID09IDApDQo+IC0gICAgICAg
ICAgICAgICAgICAgICAgIHIgPSAtRVRJTUVET1VUOw0KPiAtICAgICAgICAgICAgICAgaWYgKHIg
PCAwKQ0KPiAtICAgICAgICAgICAgICAgICAgICAgICBnb3RvIGVycl9mcmVlOw0KPiAtDQo+ICsg
ICAgICAgaWYgKGRpcmVjdCkNCj4gICAgICAgICAgICAgICAgICByID0gYW1kZ3B1X2pvYl9zdWJt
aXRfZGlyZWN0KGpvYiwgcmluZywgJmYpOw0KPiAtICAgICAgICAgICAgICAgaWYgKHIpDQo+IC0g
ICAgICAgICAgICAgICAgICAgICAgIGdvdG8gZXJyX2ZyZWU7DQo+IC0gICAgICAgfSBlbHNlIHsN
Cj4gLSAgICAgICAgICAgICAgIHIgPSBhbWRncHVfc3luY19yZXN2KGFkZXYsICZqb2ItPnN5bmMs
IGJvLT50Ym8uYmFzZS5yZXN2LA0KPiAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgQU1ER1BVX1NZTkNfQUxXQVlTLA0KPiAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgQU1ER1BVX0ZFTkNFX09XTkVSX1VOREVGSU5FRCk7DQo+IC0gICAgICAgICAgICAgICBp
ZiAocikNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgZ290byBlcnJfZnJlZTsNCj4gLQ0KPiAr
ICAgICAgIGVsc2UNCj4gICAgICAgICAgICAgICAgICByID0gYW1kZ3B1X2pvYl9zdWJtaXQoam9i
LCAmYWRldi0+dXZkLmVudGl0eSwNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBBTURHUFVfRkVOQ0VfT1dORVJfVU5ERUZJTkVELCAmZik7DQo+IC0gICAgICAgICAgICAg
ICBpZiAocikNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgZ290byBlcnJfZnJlZTsNCj4gLSAg
ICAgICB9DQo+IC0NCj4gLSAgICAgICBhbWRncHVfYm9fZmVuY2UoYm8sIGYsIGZhbHNlKTsNCj4g
LSAgICAgICBhbWRncHVfYm9fdW5yZXNlcnZlKGJvKTsNCj4gLSAgICAgICBhbWRncHVfYm9fdW5y
ZWYoJmJvKTsNCj4gKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTURHUFVfRkVOQ0Vf
T1dORVJfVU5ERUZJTkVELCAmZik7DQo+ICsgICAgICAgaWYgKHIpDQo+ICsgICAgICAgICAgICAg
ICBnb3RvIGVycl9mcmVlOw0KPg0KPiAgICAgICAgICBpZiAoZmVuY2UpDQo+ICAgICAgICAgICAg
ICAgICAgKmZlbmNlID0gZG1hX2ZlbmNlX2dldChmKTsNCj4gQEAgLTExNTksMTAgKzExNTMsNiBA
QCBzdGF0aWMgaW50IGFtZGdwdV91dmRfc2VuZF9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5n
LCBzdHJ1Y3QgYW1kZ3B1X2JvICpibywNCj4NCj4gICBlcnJfZnJlZToNCj4gICAgICAgICAgYW1k
Z3B1X2pvYl9mcmVlKGpvYik7DQo+IC0NCj4gLWVycjoNCj4gLSAgICAgICBhbWRncHVfYm9fdW5y
ZXNlcnZlKGJvKTsNCj4gLSAgICAgICBhbWRncHVfYm9fdW5yZWYoJmJvKTsNCj4gICAgICAgICAg
cmV0dXJuIHI7DQo+ICAgfQ0KPg0KPiBAQCAtMTE3MywxNiArMTE2MywzMSBAQCBpbnQgYW1kZ3B1
X3V2ZF9nZXRfY3JlYXRlX21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGhh
bmRsZSwNCj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBkbWFfZmVuY2Ug
KipmZW5jZSkNCj4gICB7DQo+ICAgICAgICAgIHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0g
cmluZy0+YWRldjsNCj4gLSAgICAgICBzdHJ1Y3QgYW1kZ3B1X2JvICpibyA9IE5VTEw7DQo+ICsg
ICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8gPSBhZGV2LT51dmQuaWJfYm87DQo+ICsgICAgICAg
c3RydWN0IGRtYV9mZW5jZSAqZiA9IE5VTEw7DQo+ICsgICAgICAgc3RydWN0IGFtZGdwdV9pYiBp
YjsNCj4gICAgICAgICAgdWludDMyX3QgKm1zZzsNCj4gICAgICAgICAgaW50IHIsIGk7DQo+DQo+
IC0gICAgICAgciA9IGFtZGdwdV9ib19jcmVhdGVfcmVzZXJ2ZWQoYWRldiwgMTAyNCwgUEFHRV9T
SVpFLA0KPiAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFNREdQVV9HRU1f
RE9NQUlOX0dUVCwNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmYm8s
IE5VTEwsICh2b2lkICoqKSZtc2cpOw0KPiAtICAgICAgIGlmIChyKQ0KPiAtICAgICAgICAgICAg
ICAgcmV0dXJuIHI7DQo+IC0NCj4gKyAgICAgICBpZiAoYm8pIHsNCj4gKyAgICAgICAgICAgICAg
IHIgPSB0dG1fYm9fcmVzZXJ2ZSgmYm8tPnRibywgdHJ1ZSwgdHJ1ZSwgTlVMTCk7DQo+ICsgICAg
ICAgICAgICAgICBpZiAocikNCj4gKyAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7DQo+
ICsgICAgICAgICAgICAgICByID0gZG1hX3Jlc3Zfd2FpdF90aW1lb3V0KGJvLT50Ym8uYmFzZS5y
ZXN2LCB0cnVlLCBmYWxzZSwNCj4gKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2Vj
c190b19qaWZmaWVzKDEwKSk7DQo+ICsgICAgICAgICAgICAgICBpZiAociA9PSAwKQ0KPiArICAg
ICAgICAgICAgICAgICAgICAgICByID0gLUVUSU1FRE9VVDsNCj4gKyAgICAgICAgICAgICAgIGlm
IChyIDwgMCkNCj4gKyAgICAgICAgICAgICAgICAgICAgICAgZ290byBlcnI7DQo+ICsgICAgICAg
ICAgICAgICBpYi5ncHVfYWRkciA9IGFtZGdwdV9ib19ncHVfb2Zmc2V0KGJvKTsNCj4gKyAgICAg
ICAgICAgICAgIG1zZyA9IGFtZGdwdV9ib19rcHRyKGJvKTsNCj4gKyAgICAgICB9IGVsc2Ugew0K
PiArICAgICAgICAgICAgICAgbWVtc2V0KCZpYiwgMCwgc2l6ZW9mKGliKSk7DQo+ICsgICAgICAg
ICAgICAgICByID0gYW1kZ3B1X2liX2dldChhZGV2LCBOVUxMLCBQQUdFX1NJWkUsDQo+ICsgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgQU1ER1BVX0lCX1BPT0xfRElSRUNULA0KPiArICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICZpYik7DQo+ICsgICAgICAgICAgICAgICBtc2cg
PSBpYi5wdHI7DQo+ICsgICAgICAgfQ0KPiAgICAgICAgICAvKiBzdGl0Y2ggdG9nZXRoZXIgYW4g
VVZEIGNyZWF0ZSBtc2cgKi8NCj4gICAgICAgICAgbXNnWzBdID0gY3B1X3RvX2xlMzIoMHgwMDAw
MGRlNCk7DQo+ICAgICAgICAgIG1zZ1sxXSA9IGNwdV90b19sZTMyKDB4MDAwMDAwMDApOw0KPiBA
QCAtMTE5OCwyMyArMTIwMyw1MiBAQCBpbnQgYW1kZ3B1X3V2ZF9nZXRfY3JlYXRlX21zZyhzdHJ1
Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGhhbmRsZSwNCj4gICAgICAgICAgZm9yIChp
ID0gMTE7IGkgPCAxMDI0OyArK2kpDQo+ICAgICAgICAgICAgICAgICAgbXNnW2ldID0gY3B1X3Rv
X2xlMzIoMHgwKTsNCj4NCj4gLSAgICAgICByZXR1cm4gYW1kZ3B1X3V2ZF9zZW5kX21zZyhyaW5n
LCBibywgdHJ1ZSwgZmVuY2UpOw0KPiArICAgICAgIHIgPSBhbWRncHVfdXZkX3NlbmRfbXNnKHJp
bmcsIGliLmdwdV9hZGRyLCB0cnVlLCAmZik7DQo+ICsgICAgICAgaWYgKHIpDQo+ICsgICAgICAg
ICAgICAgICBnb3RvIGVycjsNCj4gKyAgICAgICBpZiAoYm8pDQo+ICsgICAgICAgICAgICAgICBh
bWRncHVfYm9fZmVuY2UoYm8sIGYsIGZhbHNlKTsNCj4gKyAgICAgICBpZiAoZmVuY2UpDQo+ICsg
ICAgICAgICAgICAgICAqZmVuY2UgPSBkbWFfZmVuY2VfZ2V0KGYpOw0KPiArZXJyOg0KPiArICAg
ICAgIGlmIChibykNCj4gKyAgICAgICAgICAgICAgIGFtZGdwdV9ib191bnJlc2VydmUoYm8pOw0K
PiArICAgICAgIGVsc2UNCj4gKyAgICAgICAgICAgICAgIGFtZGdwdV9pYl9mcmVlKGFkZXYsICZp
YiwgZik7DQo+ICsgICAgICAgZG1hX2ZlbmNlX3B1dChmKTsNCj4gKyAgICAgICByZXR1cm4gcjsN
Cj4gICB9DQo+DQo+ICAgaW50IGFtZGdwdV91dmRfZ2V0X2Rlc3Ryb3lfbXNnKHN0cnVjdCBhbWRn
cHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZGxlLA0KPiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIGJvb2wgZGlyZWN0LCBzdHJ1Y3QgZG1hX2ZlbmNlICoqZmVuY2UpDQo+ICAgew0K
PiAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiA9IHJpbmctPmFkZXY7DQo+IC0g
ICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8gPSBOVUxMOw0KPiArICAgICAgIHN0cnVjdCBhbWRn
cHVfYm8gKmJvID0gYWRldi0+dXZkLmliX2JvOw0KPiArICAgICAgIHN0cnVjdCBkbWFfZmVuY2Ug
KmYgPSBOVUxMOw0KPiArICAgICAgIHN0cnVjdCBhbWRncHVfaWIgaWI7DQo+ICAgICAgICAgIHVp
bnQzMl90ICptc2c7DQo+ICAgICAgICAgIGludCByLCBpOw0KPg0KPiAtICAgICAgIHIgPSBhbWRn
cHVfYm9fY3JlYXRlX3Jlc2VydmVkKGFkZXYsIDEwMjQsIFBBR0VfU0laRSwNCj4gLSAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTURHUFVfR0VNX0RPTUFJTl9HVFQsDQo+IC0g
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmJvLCBOVUxMLCAodm9pZCAqKikm
bXNnKTsNCj4gLSAgICAgICBpZiAocikNCj4gLSAgICAgICAgICAgICAgIHJldHVybiByOw0KPiAt
DQo+ICsgICAgICAgaWYgKGJvKSB7DQo+ICsgICAgICAgICAgICAgICByID0gdHRtX2JvX3Jlc2Vy
dmUoJmJvLT50Ym8sIHRydWUsIHRydWUsIE5VTEwpOw0KPiArICAgICAgICAgICAgICAgaWYgKHIp
DQo+ICsgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByOw0KPiArICAgICAgICAgICAgICAg
ciA9IGRtYV9yZXN2X3dhaXRfdGltZW91dChiby0+dGJvLmJhc2UucmVzdiwgdHJ1ZSwgZmFsc2Us
DQo+ICsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNlY3NfdG9famlmZmllcygxMCkp
Ow0KPiArICAgICAgICAgICAgICAgaWYgKHIgPT0gMCkNCj4gKyAgICAgICAgICAgICAgICAgICAg
ICAgciA9IC1FVElNRURPVVQ7DQo+ICsgICAgICAgICAgICAgICBpZiAociA8IDApDQo+ICsgICAg
ICAgICAgICAgICAgICAgICAgIGdvdG8gZXJyOw0KPiArICAgICAgICAgICAgICAgaWIuZ3B1X2Fk
ZHIgPSBhbWRncHVfYm9fZ3B1X29mZnNldChibyk7DQo+ICsgICAgICAgICAgICAgICBtc2cgPSBh
bWRncHVfYm9fa3B0cihibyk7DQo+ICsgICAgICAgfSBlbHNlIHsNCj4gKyAgICAgICAgICAgICAg
IG1lbXNldCgmaWIsIDAsIHNpemVvZihpYikpOw0KPiArICAgICAgICAgICAgICAgciA9IGFtZGdw
dV9pYl9nZXQoYWRldiwgTlVMTCwgUEFHRV9TSVpFLA0KPiArICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIGRpcmVjdCA/DQo+ICsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU1E
R1BVX0lCX1BPT0xfRElSRUNUIDogQU1ER1BVX0lCX1BPT0xfREVMQVlFRCwNCj4gKyAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAmaWIpOw0KPiArICAgICAgICAgICAgICAgbXNnID0gaWIu
cHRyOw0KPiArICAgICAgIH0NCj4gICAgICAgICAgLyogc3RpdGNoIHRvZ2V0aGVyIGFuIFVWRCBk
ZXN0cm95IG1zZyAqLw0KPiAgICAgICAgICBtc2dbMF0gPSBjcHVfdG9fbGUzMigweDAwMDAwZGU0
KTsNCj4gICAgICAgICAgbXNnWzFdID0gY3B1X3RvX2xlMzIoMHgwMDAwMDAwMik7DQo+IEBAIC0x
MjIzLDcgKzEyNTcsMjAgQEAgaW50IGFtZGdwdV91dmRfZ2V0X2Rlc3Ryb3lfbXNnKHN0cnVjdCBh
bWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZGxlLA0KPiAgICAgICAgICBmb3IgKGkgPSA0
OyBpIDwgMTAyNDsgKytpKQ0KPiAgICAgICAgICAgICAgICAgIG1zZ1tpXSA9IGNwdV90b19sZTMy
KDB4MCk7DQo+DQo+IC0gICAgICAgcmV0dXJuIGFtZGdwdV91dmRfc2VuZF9tc2cocmluZywgYm8s
IGRpcmVjdCwgZmVuY2UpOw0KPiArICAgICAgIHIgPSBhbWRncHVfdXZkX3NlbmRfbXNnKHJpbmcs
IGliLmdwdV9hZGRyLCB0cnVlLCAmZik7DQo+ICsgICAgICAgaWYgKHIpDQo+ICsgICAgICAgICAg
ICAgICBnb3RvIGVycjsNCj4gKyAgICAgICBpZiAoYm8pDQo+ICsgICAgICAgICAgICAgICBhbWRn
cHVfYm9fZmVuY2UoYm8sIGYsIGZhbHNlKTsNCj4gKyAgICAgICBpZiAoZmVuY2UpDQo+ICsgICAg
ICAgICAgICAgICAqZmVuY2UgPSBkbWFfZmVuY2VfZ2V0KGYpOw0KPiArZXJyOg0KPiArICAgICAg
IGlmIChibykNCj4gKyAgICAgICAgICAgICAgIGFtZGdwdV9ib191bnJlc2VydmUoYm8pOw0KPiAr
ICAgICAgIGVsc2UNCj4gKyAgICAgICAgICAgICAgIGFtZGdwdV9pYl9mcmVlKGFkZXYsICZpYiwg
Zik7DQo+ICsgICAgICAgZG1hX2ZlbmNlX3B1dChmKTsNCj4gKyAgICAgICByZXR1cm4gcjsNCj4g
ICB9DQo+DQo+ICAgc3RhdGljIHZvaWQgYW1kZ3B1X3V2ZF9pZGxlX3dvcmtfaGFuZGxlcihzdHJ1
Y3Qgd29ya19zdHJ1Y3QgKndvcmspDQo+IGRpZmYgLS1naXQgYS9kcml2ZXJzL2dwdS9kcm0vYW1k
L2FtZGdwdS9hbWRncHVfdXZkLmggYi9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVf
dXZkLmgNCj4gaW5kZXggZWRiYjgxOTRlZTgxLi43NmFjOTY5OTg4NWQgMTAwNjQ0DQo+IC0tLSBh
L2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L2FtZGdwdV91dmQuaA0KPiArKysgYi9kcml2ZXJz
L2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfdXZkLmgNCj4gQEAgLTY4LDYgKzY4LDcgQEAgc3Ry
dWN0IGFtZGdwdV91dmQgew0KPiAgICAgICAgICAvKiBzdG9yZSBpbWFnZSB3aWR0aCB0byBhZGp1
c3QgbmIgbWVtb3J5IHN0YXRlICovDQo+ICAgICAgICAgIHVuc2lnbmVkICAgICAgICAgICAgICAg
IGRlY29kZV9pbWFnZV93aWR0aDsNCj4gICAgICAgICAgdWludDMyX3QgICAgICAgICAgICAgICAg
a2V5c2VsZWN0Ow0KPiArICAgICAgIHN0cnVjdCBhbWRncHVfYm8gICAgICAgICppYl9ibzsNCj4g
ICB9Ow0KPg0KPiAgIGludCBhbWRncHVfdXZkX3N3X2luaXQoc3RydWN0IGFtZGdwdV9kZXZpY2Ug
KmFkZXYpOw0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1
X3ZjZS5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3ZjZS5jDQo+IGluZGV4
IGU5ZmRmNDlkNjllOC4uNDVkOTg2OTRkYjE4IDEwMDY0NA0KPiAtLS0gYS9kcml2ZXJzL2dwdS9k
cm0vYW1kL2FtZGdwdS9hbWRncHVfdmNlLmMNCj4gKysrIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9h
bWRncHUvYW1kZ3B1X3ZjZS5jDQo+IEBAIC04Miw3ICs4Miw2IEBAIE1PRFVMRV9GSVJNV0FSRShG
SVJNV0FSRV9WRUdBMjApOw0KPg0KPiAgIHN0YXRpYyB2b2lkIGFtZGdwdV92Y2VfaWRsZV93b3Jr
X2hhbmRsZXIoc3RydWN0IHdvcmtfc3RydWN0ICp3b3JrKTsNCj4gICBzdGF0aWMgaW50IGFtZGdw
dV92Y2VfZ2V0X2NyZWF0ZV9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCBo
YW5kbGUsDQo+IC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1k
Z3B1X2JvICpibywNCj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1
Y3QgZG1hX2ZlbmNlICoqZmVuY2UpOw0KPiAgIHN0YXRpYyBpbnQgYW1kZ3B1X3ZjZV9nZXRfZGVz
dHJveV9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCBoYW5kbGUsDQo+ICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2wgZGlyZWN0LCBzdHJ1Y3Qg
ZG1hX2ZlbmNlICoqZmVuY2UpOw0KPiBAQCAtNDQxLDcgKzQ0MCw2IEBAIHZvaWQgYW1kZ3B1X3Zj
ZV9mcmVlX2hhbmRsZXMoc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYsIHN0cnVjdCBkcm1fZmls
ZSAqZmlscCkNCj4gICAgKiBPcGVuIHVwIGEgc3RyZWFtIGZvciBIVyB0ZXN0DQo+ICAgICovDQo+
ICAgc3RhdGljIGludCBhbWRncHVfdmNlX2dldF9jcmVhdGVfbXNnKHN0cnVjdCBhbWRncHVfcmlu
ZyAqcmluZywgdWludDMyX3QgaGFuZGxlLA0KPiAtICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8sDQo+ICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgc3RydWN0IGRtYV9mZW5jZSAqKmZlbmNlKQ0KPiAgIHsNCj4gICAgICAg
ICAgY29uc3QgdW5zaWduZWQgaWJfc2l6ZV9kdyA9IDEwMjQ7DQo+IEBAIC00NTEsMTQgKzQ0OSwx
MyBAQCBzdGF0aWMgaW50IGFtZGdwdV92Y2VfZ2V0X2NyZWF0ZV9tc2coc3RydWN0IGFtZGdwdV9y
aW5nICpyaW5nLCB1aW50MzJfdCBoYW5kbGUsDQo+ICAgICAgICAgIHVpbnQ2NF90IGFkZHI7DQo+
ICAgICAgICAgIGludCBpLCByOw0KPg0KPiAtICAgICAgIHIgPSBhbWRncHVfam9iX2FsbG9jX3dp
dGhfaWIocmluZy0+YWRldiwgaWJfc2l6ZV9kdyAqIDQsDQo+ICsgICAgICAgciA9IGFtZGdwdV9q
b2JfYWxsb2Nfd2l0aF9pYihyaW5nLT5hZGV2LCBpYl9zaXplX2R3ICogNCArIFBBR0VfU0laRSwN
Cj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTURHUFVfSUJfUE9PTF9E
SVJFQ1QsICZqb2IpOw0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAgICAgICAgICAgICByZXR1
cm4gcjsNCj4NCj4gICAgICAgICAgaWIgPSAmam9iLT5pYnNbMF07DQo+IC0NCj4gLSAgICAgICBh
ZGRyID0gYW1kZ3B1X2JvX2dwdV9vZmZzZXQoYm8pOw0KPiArICAgICAgIGFkZHIgPSBpYi0+Z3B1
X2FkZHIgKyBpYl9zaXplX2R3ICogNDsNCj4NCj4gICAgICAgICAgLyogc3RpdGNoIHRvZ2V0aGVy
IGFuIFZDRSBjcmVhdGUgbXNnICovDQo+ICAgICAgICAgIGliLT5sZW5ndGhfZHcgPSAwOw0KPiBA
QCAtMTEzNCwyMCArMTEzMSwxMyBAQCBpbnQgYW1kZ3B1X3ZjZV9yaW5nX3Rlc3RfcmluZyhzdHJ1
Y3QgYW1kZ3B1X3JpbmcgKnJpbmcpDQo+ICAgaW50IGFtZGdwdV92Y2VfcmluZ190ZXN0X2liKHN0
cnVjdCBhbWRncHVfcmluZyAqcmluZywgbG9uZyB0aW1lb3V0KQ0KPiAgIHsNCj4gICAgICAgICAg
c3RydWN0IGRtYV9mZW5jZSAqZmVuY2UgPSBOVUxMOw0KPiAtICAgICAgIHN0cnVjdCBhbWRncHVf
Ym8gKmJvID0gTlVMTDsNCj4gICAgICAgICAgbG9uZyByOw0KPg0KPiAgICAgICAgICAvKiBza2lw
IHZjZSByaW5nMS8yIGliIHRlc3QgZm9yIG5vdywgc2luY2UgaXQncyBub3QgcmVsaWFibGUgKi8N
Cj4gICAgICAgICAgaWYgKHJpbmcgIT0gJnJpbmctPmFkZXYtPnZjZS5yaW5nWzBdKQ0KPiAgICAg
ICAgICAgICAgICAgIHJldHVybiAwOw0KPg0KPiAtICAgICAgIHIgPSBhbWRncHVfYm9fY3JlYXRl
X3Jlc2VydmVkKHJpbmctPmFkZXYsIDUxMiwgUEFHRV9TSVpFLA0KPiAtICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIEFNREdQVV9HRU1fRE9NQUlOX1ZSQU0sDQo+IC0gICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmJvLCBOVUxMLCBOVUxMKTsNCj4gLSAgICAg
ICBpZiAocikNCj4gLSAgICAgICAgICAgICAgIHJldHVybiByOw0KPiAtDQo+IC0gICAgICAgciA9
IGFtZGdwdV92Y2VfZ2V0X2NyZWF0ZV9tc2cocmluZywgMSwgYm8sIE5VTEwpOw0KPiArICAgICAg
IHIgPSBhbWRncHVfdmNlX2dldF9jcmVhdGVfbXNnKHJpbmcsIDEsIE5VTEwpOw0KPiAgICAgICAg
ICBpZiAocikNCj4gICAgICAgICAgICAgICAgICBnb3RvIGVycm9yOw0KPg0KPiBAQCAtMTE2Myw4
ICsxMTUzLDYgQEAgaW50IGFtZGdwdV92Y2VfcmluZ190ZXN0X2liKHN0cnVjdCBhbWRncHVfcmlu
ZyAqcmluZywgbG9uZyB0aW1lb3V0KQ0KPg0KPiAgIGVycm9yOg0KPiAgICAgICAgICBkbWFfZmVu
Y2VfcHV0KGZlbmNlKTsNCj4gLSAgICAgICBhbWRncHVfYm9fdW5yZXNlcnZlKGJvKTsNCj4gLSAg
ICAgICBhbWRncHVfYm9fZnJlZV9rZXJuZWwoJmJvLCBOVUxMLCBOVUxMKTsNCj4gICAgICAgICAg
cmV0dXJuIHI7DQo+ICAgfQ0KPg0KPiBkaWZmIC0tZ2l0IGEvZHJpdmVycy9ncHUvZHJtL2FtZC9h
bWRncHUvYW1kZ3B1X3Zjbi5jIGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3Zj
bi5jDQo+IGluZGV4IDU2MTI5NmE4NWI0My4uYjYwZDVmMDFmZGFlIDEwMDY0NA0KPiAtLS0gYS9k
cml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS9hbWRncHVfdmNuLmMNCj4gKysrIGIvZHJpdmVycy9n
cHUvZHJtL2FtZC9hbWRncHUvYW1kZ3B1X3Zjbi5jDQo+IEBAIC01NDEsMTUgKzU0MSwxNCBAQCBp
bnQgYW1kZ3B1X3Zjbl9kZWNfc3dfcmluZ190ZXN0X3Jpbmcoc3RydWN0IGFtZGdwdV9yaW5nICpy
aW5nKQ0KPiAgIH0NCj4NCj4gICBzdGF0aWMgaW50IGFtZGdwdV92Y25fZGVjX3NlbmRfbXNnKHN0
cnVjdCBhbWRncHVfcmluZyAqcmluZywNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBzdHJ1Y3QgYW1kZ3B1X2JvICpibywNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNlICoqZmVuY2UpDQo+ICsgICAgICAgICAgICAgICBzdHJ1
Y3QgYW1kZ3B1X2liICppYl9tc2csDQo+ICsgICAgICAgICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNl
ICoqZmVuY2UpDQo+ICAgew0KPiAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiA9
IHJpbmctPmFkZXY7DQo+ICAgICAgICAgIHN0cnVjdCBkbWFfZmVuY2UgKmYgPSBOVUxMOw0KPiAg
ICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2pvYiAqam9iOw0KPiAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1
X2liICppYjsNCj4gLSAgICAgICB1aW50NjRfdCBhZGRyOw0KPiAtICAgICAgIHZvaWQgKm1zZyA9
IE5VTEw7DQo+ICsgICAgICAgdWludDY0X3QgYWRkciA9IGliX21zZy0+Z3B1X2FkZHI7DQo+ICAg
ICAgICAgIGludCBpLCByOw0KPg0KPiAgICAgICAgICByID0gYW1kZ3B1X2pvYl9hbGxvY193aXRo
X2liKGFkZXYsIDY0LA0KPiBAQCAtNTU4LDggKzU1Nyw2IEBAIHN0YXRpYyBpbnQgYW1kZ3B1X3Zj
bl9kZWNfc2VuZF9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLA0KPiAgICAgICAgICAgICAg
ICAgIGdvdG8gZXJyOw0KPg0KPiAgICAgICAgICBpYiA9ICZqb2ItPmlic1swXTsNCj4gLSAgICAg
ICBhZGRyID0gYW1kZ3B1X2JvX2dwdV9vZmZzZXQoYm8pOw0KPiAtICAgICAgIG1zZyA9IGFtZGdw
dV9ib19rcHRyKGJvKTsNCj4gICAgICAgICAgaWItPnB0clswXSA9IFBBQ0tFVDAoYWRldi0+dmNu
LmludGVybmFsLmRhdGEwLCAwKTsNCj4gICAgICAgICAgaWItPnB0clsxXSA9IGFkZHI7DQo+ICAg
ICAgICAgIGliLT5wdHJbMl0gPSBQQUNLRVQwKGFkZXYtPnZjbi5pbnRlcm5hbC5kYXRhMSwgMCk7
DQo+IEBAIC01NzYsOSArNTczLDcgQEAgc3RhdGljIGludCBhbWRncHVfdmNuX2RlY19zZW5kX21z
ZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsDQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAg
ICAgICAgICAgIGdvdG8gZXJyX2ZyZWU7DQo+DQo+IC0gICAgICAgYW1kZ3B1X2JvX2ZlbmNlKGJv
LCBmLCBmYWxzZSk7DQo+IC0gICAgICAgYW1kZ3B1X2JvX3VucmVzZXJ2ZShibyk7DQo+IC0gICAg
ICAgYW1kZ3B1X2JvX2ZyZWVfa2VybmVsKCZibywgTlVMTCwgKHZvaWQgKiopJm1zZyk7DQo+ICsg
ICAgICAgYW1kZ3B1X2liX2ZyZWUoYWRldiwgaWJfbXNnLCBmKTsNCj4NCj4gICAgICAgICAgaWYg
KGZlbmNlKQ0KPiAgICAgICAgICAgICAgICAgICpmZW5jZSA9IGRtYV9mZW5jZV9nZXQoZik7DQo+
IEBAIC01ODgsMjcgKzU4MywyNiBAQCBzdGF0aWMgaW50IGFtZGdwdV92Y25fZGVjX3NlbmRfbXNn
KHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywNCj4NCj4gICBlcnJfZnJlZToNCj4gICAgICAgICAg
YW1kZ3B1X2pvYl9mcmVlKGpvYik7DQo+IC0NCj4gICBlcnI6DQo+IC0gICAgICAgYW1kZ3B1X2Jv
X3VucmVzZXJ2ZShibyk7DQo+IC0gICAgICAgYW1kZ3B1X2JvX2ZyZWVfa2VybmVsKCZibywgTlVM
TCwgKHZvaWQgKiopJm1zZyk7DQo+ICsgICAgICAgYW1kZ3B1X2liX2ZyZWUoYWRldiwgaWJfbXNn
LCBmKTsNCj4gICAgICAgICAgcmV0dXJuIHI7DQo+ICAgfQ0KPg0KPiAgIHN0YXRpYyBpbnQgYW1k
Z3B1X3Zjbl9kZWNfZ2V0X2NyZWF0ZV9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50
MzJfdCBoYW5kbGUsDQo+IC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
c3RydWN0IGFtZGdwdV9ibyAqKmJvKQ0KPiArICAgICAgICAgICAgICAgc3RydWN0IGFtZGdwdV9p
YiAqaWIpDQo+ICAgew0KPiAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiA9IHJp
bmctPmFkZXY7DQo+ICAgICAgICAgIHVpbnQzMl90ICptc2c7DQo+ICAgICAgICAgIGludCByLCBp
Ow0KPg0KPiAtICAgICAgICpibyA9IE5VTEw7DQo+IC0gICAgICAgciA9IGFtZGdwdV9ib19jcmVh
dGVfcmVzZXJ2ZWQoYWRldiwgMTAyNCwgUEFHRV9TSVpFLA0KPiAtICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIEFNREdQVV9HRU1fRE9NQUlOX1ZSQU0sDQo+IC0gICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgYm8sIE5VTEwsICh2b2lkICoqKSZtc2cpOw0KPiAr
ICAgICAgIG1lbXNldChpYiwgMCwgc2l6ZW9mKCppYikpOw0KPiArICAgICAgIHIgPSBhbWRncHVf
aWJfZ2V0KGFkZXYsIE5VTEwsIFBBR0VfU0laRSwNCj4gKyAgICAgICAgICAgICAgICAgICAgICAg
QU1ER1BVX0lCX1BPT0xfRElSRUNULA0KPiArICAgICAgICAgICAgICAgICAgICAgICBpYik7DQo+
ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAgICAgICAgICAgIHJldHVybiByOw0KPg0KPiArICAg
ICAgIG1zZyA9IGliLT5wdHI7DQo+ICAgICAgICAgIG1zZ1swXSA9IGNwdV90b19sZTMyKDB4MDAw
MDAwMjgpOw0KPiAgICAgICAgICBtc2dbMV0gPSBjcHVfdG9fbGUzMigweDAwMDAwMDM4KTsNCj4g
ICAgICAgICAgbXNnWzJdID0gY3B1X3RvX2xlMzIoMHgwMDAwMDAwMSk7DQo+IEBAIC02MzAsMTkg
KzYyNCwyMCBAQCBzdGF0aWMgaW50IGFtZGdwdV92Y25fZGVjX2dldF9jcmVhdGVfbXNnKHN0cnVj
dCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZA0KPiAgIH0NCj4NCj4gICBzdGF0aWMg
aW50IGFtZGdwdV92Y25fZGVjX2dldF9kZXN0cm95X21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJp
bmcsIHVpbnQzMl90IGhhbmRsZSwNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgc3RydWN0IGFtZGdwdV9ibyAqKmJvKQ0KPiArICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2liICppYikNCj4gICB7DQo+ICAgICAg
ICAgIHN0cnVjdCBhbWRncHVfZGV2aWNlICphZGV2ID0gcmluZy0+YWRldjsNCj4gICAgICAgICAg
dWludDMyX3QgKm1zZzsNCj4gICAgICAgICAgaW50IHIsIGk7DQo+DQo+IC0gICAgICAgKmJvID0g
TlVMTDsNCj4gLSAgICAgICByID0gYW1kZ3B1X2JvX2NyZWF0ZV9yZXNlcnZlZChhZGV2LCAxMDI0
LCBQQUdFX1NJWkUsDQo+IC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU1E
R1BVX0dFTV9ET01BSU5fVlJBTSwNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBibywgTlVMTCwgKHZvaWQgKiopJm1zZyk7DQo+ICsgICAgICAgbWVtc2V0KGliLCAwLCBz
aXplb2YoKmliKSk7DQo+ICsgICAgICAgciA9IGFtZGdwdV9pYl9nZXQoYWRldiwgTlVMTCwgUEFH
RV9TSVpFLA0KPiArICAgICAgICAgICAgICAgICAgICAgICBBTURHUFVfSUJfUE9PTF9ESVJFQ1Qs
DQo+ICsgICAgICAgICAgICAgICAgICAgICAgIGliKTsNCj4gICAgICAgICAgaWYgKHIpDQo+ICAg
ICAgICAgICAgICAgICAgcmV0dXJuIHI7DQo+DQo+ICsgICAgICAgbXNnID0gaWItPnB0cjsNCj4g
ICAgICAgICAgbXNnWzBdID0gY3B1X3RvX2xlMzIoMHgwMDAwMDAyOCk7DQo+ICAgICAgICAgIG1z
Z1sxXSA9IGNwdV90b19sZTMyKDB4MDAwMDAwMTgpOw0KPiAgICAgICAgICBtc2dbMl0gPSBjcHVf
dG9fbGUzMigweDAwMDAwMDAwKTsNCj4gQEAgLTY1OCwyMSArNjUzLDIxIEBAIHN0YXRpYyBpbnQg
YW1kZ3B1X3Zjbl9kZWNfZ2V0X2Rlc3Ryb3lfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywg
dWludDMyX3QgaGFuDQo+ICAgaW50IGFtZGdwdV92Y25fZGVjX3JpbmdfdGVzdF9pYihzdHJ1Y3Qg
YW1kZ3B1X3JpbmcgKnJpbmcsIGxvbmcgdGltZW91dCkNCj4gICB7DQo+ICAgICAgICAgIHN0cnVj
dCBkbWFfZmVuY2UgKmZlbmNlID0gTlVMTDsNCj4gLSAgICAgICBzdHJ1Y3QgYW1kZ3B1X2JvICpi
bzsNCj4gKyAgICAgICBzdHJ1Y3QgYW1kZ3B1X2liIGliOw0KPiAgICAgICAgICBsb25nIHI7DQo+
DQo+IC0gICAgICAgciA9IGFtZGdwdV92Y25fZGVjX2dldF9jcmVhdGVfbXNnKHJpbmcsIDEsICZi
byk7DQo+ICsgICAgICAgciA9IGFtZGdwdV92Y25fZGVjX2dldF9jcmVhdGVfbXNnKHJpbmcsIDEs
ICZpYik7DQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAgICAgICAgICAgIGdvdG8gZXJyb3I7
DQo+DQo+IC0gICAgICAgciA9IGFtZGdwdV92Y25fZGVjX3NlbmRfbXNnKHJpbmcsIGJvLCBOVUxM
KTsNCj4gKyAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNfc2VuZF9tc2cocmluZywgJmliLCBOVUxM
KTsNCj4gICAgICAgICAgaWYgKHIpDQo+ICAgICAgICAgICAgICAgICAgZ290byBlcnJvcjsNCj4g
LSAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNfZ2V0X2Rlc3Ryb3lfbXNnKHJpbmcsIDEsICZibyk7
DQo+ICsgICAgICAgciA9IGFtZGdwdV92Y25fZGVjX2dldF9kZXN0cm95X21zZyhyaW5nLCAxLCAm
aWIpOw0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAgICAgICAgICAgICBnb3RvIGVycm9yOw0K
Pg0KPiAtICAgICAgIHIgPSBhbWRncHVfdmNuX2RlY19zZW5kX21zZyhyaW5nLCBibywgJmZlbmNl
KTsNCj4gKyAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNfc2VuZF9tc2cocmluZywgJmliLCAmZmVu
Y2UpOw0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAgICAgICAgICAgICBnb3RvIGVycm9yOw0K
Pg0KPiBAQCAtNjg4LDggKzY4Myw4IEBAIGludCBhbWRncHVfdmNuX2RlY19yaW5nX3Rlc3RfaWIo
c3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCBsb25nIHRpbWVvdXQpDQo+ICAgfQ0KPg0KPiAgIHN0
YXRpYyBpbnQgYW1kZ3B1X3Zjbl9kZWNfc3dfc2VuZF9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpy
aW5nLA0KPiAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBhbWRncHVf
Ym8gKmJvLA0KPiAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBkbWFf
ZmVuY2UgKipmZW5jZSkNCj4gKyAgICAgICAgICAgICAgIHN0cnVjdCBhbWRncHVfaWIgKmliX21z
ZywNCj4gKyAgICAgICAgICAgICAgIHN0cnVjdCBkbWFfZmVuY2UgKipmZW5jZSkNCj4gICB7DQo+
ICAgICAgICAgIHN0cnVjdCBhbWRncHVfdmNuX2RlY29kZV9idWZmZXIgKmRlY29kZV9idWZmZXIg
PSBOVUxMOw0KPiAgICAgICAgICBjb25zdCB1bnNpZ25lZCBpbnQgaWJfc2l6ZV9kdyA9IDY0Ow0K
PiBAQCAtNjk3LDcgKzY5Miw3IEBAIHN0YXRpYyBpbnQgYW1kZ3B1X3Zjbl9kZWNfc3dfc2VuZF9t
c2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLA0KPiAgICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNl
ICpmID0gTlVMTDsNCj4gICAgICAgICAgc3RydWN0IGFtZGdwdV9qb2IgKmpvYjsNCj4gICAgICAg
ICAgc3RydWN0IGFtZGdwdV9pYiAqaWI7DQo+IC0gICAgICAgdWludDY0X3QgYWRkcjsNCj4gKyAg
ICAgICB1aW50NjRfdCBhZGRyID0gaWJfbXNnLT5ncHVfYWRkcjsNCj4gICAgICAgICAgaW50IGks
IHI7DQo+DQo+ICAgICAgICAgIHIgPSBhbWRncHVfam9iX2FsbG9jX3dpdGhfaWIoYWRldiwgaWJf
c2l6ZV9kdyAqIDQsDQo+IEBAIC03MDYsNyArNzAxLDYgQEAgc3RhdGljIGludCBhbWRncHVfdmNu
X2RlY19zd19zZW5kX21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsDQo+ICAgICAgICAgICAg
ICAgICAgZ290byBlcnI7DQo+DQo+ICAgICAgICAgIGliID0gJmpvYi0+aWJzWzBdOw0KPiAtICAg
ICAgIGFkZHIgPSBhbWRncHVfYm9fZ3B1X29mZnNldChibyk7DQo+ICAgICAgICAgIGliLT5sZW5n
dGhfZHcgPSAwOw0KPg0KPiAgICAgICAgICBpYi0+cHRyW2liLT5sZW5ndGhfZHcrK10gPSBzaXpl
b2Yoc3RydWN0IGFtZGdwdV92Y25fZGVjb2RlX2J1ZmZlcikgKyA4Ow0KPiBAQCAtNzI2LDkgKzcy
MCw3IEBAIHN0YXRpYyBpbnQgYW1kZ3B1X3Zjbl9kZWNfc3dfc2VuZF9tc2coc3RydWN0IGFtZGdw
dV9yaW5nICpyaW5nLA0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAgICAgICAgICAgICBnb3Rv
IGVycl9mcmVlOw0KPg0KPiAtICAgICAgIGFtZGdwdV9ib19mZW5jZShibywgZiwgZmFsc2UpOw0K
PiAtICAgICAgIGFtZGdwdV9ib191bnJlc2VydmUoYm8pOw0KPiAtICAgICAgIGFtZGdwdV9ib191
bnJlZigmYm8pOw0KPiArICAgICAgIGFtZGdwdV9pYl9mcmVlKGFkZXYsIGliX21zZywgZik7DQo+
DQo+ICAgICAgICAgIGlmIChmZW5jZSkNCj4gICAgICAgICAgICAgICAgICAqZmVuY2UgPSBkbWFf
ZmVuY2VfZ2V0KGYpOw0KPiBAQCAtNzM4LDMxICs3MzAsMjkgQEAgc3RhdGljIGludCBhbWRncHVf
dmNuX2RlY19zd19zZW5kX21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsDQo+DQo+ICAgZXJy
X2ZyZWU6DQo+ICAgICAgICAgIGFtZGdwdV9qb2JfZnJlZShqb2IpOw0KPiAtDQo+ICAgZXJyOg0K
PiAtICAgICAgIGFtZGdwdV9ib191bnJlc2VydmUoYm8pOw0KPiAtICAgICAgIGFtZGdwdV9ib191
bnJlZigmYm8pOw0KPiArICAgICAgIGFtZGdwdV9pYl9mcmVlKGFkZXYsIGliX21zZywgZik7DQo+
ICAgICAgICAgIHJldHVybiByOw0KPiAgIH0NCj4NCj4gICBpbnQgYW1kZ3B1X3Zjbl9kZWNfc3df
cmluZ190ZXN0X2liKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgbG9uZyB0aW1lb3V0KQ0KPiAg
IHsNCj4gICAgICAgICAgc3RydWN0IGRtYV9mZW5jZSAqZmVuY2UgPSBOVUxMOw0KPiAtICAgICAg
IHN0cnVjdCBhbWRncHVfYm8gKmJvOw0KPiArICAgICAgIHN0cnVjdCBhbWRncHVfaWIgaWI7DQo+
ICAgICAgICAgIGxvbmcgcjsNCj4NCj4gLSAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNfZ2V0X2Ny
ZWF0ZV9tc2cocmluZywgMSwgJmJvKTsNCj4gKyAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNfZ2V0
X2NyZWF0ZV9tc2cocmluZywgMSwgJmliKTsNCj4gICAgICAgICAgaWYgKHIpDQo+ICAgICAgICAg
ICAgICAgICAgZ290byBlcnJvcjsNCj4NCj4gLSAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNfc3df
c2VuZF9tc2cocmluZywgYm8sIE5VTEwpOw0KPiArICAgICAgIHIgPSBhbWRncHVfdmNuX2RlY19z
d19zZW5kX21zZyhyaW5nLCAmaWIsIE5VTEwpOw0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAg
ICAgICAgICAgICBnb3RvIGVycm9yOw0KPiAtICAgICAgIHIgPSBhbWRncHVfdmNuX2RlY19nZXRf
ZGVzdHJveV9tc2cocmluZywgMSwgJmJvKTsNCj4gKyAgICAgICByID0gYW1kZ3B1X3Zjbl9kZWNf
Z2V0X2Rlc3Ryb3lfbXNnKHJpbmcsIDEsICZpYik7DQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAg
ICAgICAgICAgICAgIGdvdG8gZXJyb3I7DQo+DQo+IC0gICAgICAgciA9IGFtZGdwdV92Y25fZGVj
X3N3X3NlbmRfbXNnKHJpbmcsIGJvLCAmZmVuY2UpOw0KPiArICAgICAgIHIgPSBhbWRncHVfdmNu
X2RlY19zd19zZW5kX21zZyhyaW5nLCAmaWIsICZmZW5jZSk7DQo+ICAgICAgICAgIGlmIChyKQ0K
PiAgICAgICAgICAgICAgICAgIGdvdG8gZXJyb3I7DQo+DQo+IEBAIC04MDksNyArNzk5LDcgQEAg
aW50IGFtZGdwdV92Y25fZW5jX3JpbmdfdGVzdF9yaW5nKHN0cnVjdCBhbWRncHVfcmluZyAqcmlu
ZykNCj4gICB9DQo+DQo+ICAgc3RhdGljIGludCBhbWRncHVfdmNuX2VuY19nZXRfY3JlYXRlX21z
ZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGhhbmRsZSwNCj4gLSAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2JvICpibywNCj4g
KyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2li
ICppYl9tc2csDQo+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0
cnVjdCBkbWFfZmVuY2UgKipmZW5jZSkNCj4gICB7DQo+ICAgICAgICAgIGNvbnN0IHVuc2lnbmVk
IGliX3NpemVfZHcgPSAxNjsNCj4gQEAgLTgyNSw3ICs4MTUsNyBAQCBzdGF0aWMgaW50IGFtZGdw
dV92Y25fZW5jX2dldF9jcmVhdGVfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMy
X3QgaGFuZA0KPiAgICAgICAgICAgICAgICAgIHJldHVybiByOw0KPg0KPiAgICAgICAgICBpYiA9
ICZqb2ItPmlic1swXTsNCj4gLSAgICAgICBhZGRyID0gYW1kZ3B1X2JvX2dwdV9vZmZzZXQoYm8p
Ow0KPiArICAgICAgIGFkZHIgPSBpYl9tc2ctPmdwdV9hZGRyOw0KPg0KPiAgICAgICAgICBpYi0+
bGVuZ3RoX2R3ID0gMDsNCj4gICAgICAgICAgaWItPnB0cltpYi0+bGVuZ3RoX2R3KytdID0gMHgw
MDAwMDAxODsNCj4gQEAgLTg2Myw3ICs4NTMsNyBAQCBzdGF0aWMgaW50IGFtZGdwdV92Y25fZW5j
X2dldF9jcmVhdGVfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZA0K
PiAgIH0NCj4NCj4gICBzdGF0aWMgaW50IGFtZGdwdV92Y25fZW5jX2dldF9kZXN0cm95X21zZyhz
dHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGhhbmRsZSwNCj4gLSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8sDQo+ICsg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBhbWRncHVfaWIg
KmliX21zZywNCj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0
cnVjdCBkbWFfZmVuY2UgKipmZW5jZSkNCj4gICB7DQo+ICAgICAgICAgIGNvbnN0IHVuc2lnbmVk
IGliX3NpemVfZHcgPSAxNjsNCj4gQEAgLTg3OSw3ICs4NjksNyBAQCBzdGF0aWMgaW50IGFtZGdw
dV92Y25fZW5jX2dldF9kZXN0cm95X21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQz
Ml90IGhhbg0KPiAgICAgICAgICAgICAgICAgIHJldHVybiByOw0KPg0KPiAgICAgICAgICBpYiA9
ICZqb2ItPmlic1swXTsNCj4gLSAgICAgICBhZGRyID0gYW1kZ3B1X2JvX2dwdV9vZmZzZXQoYm8p
Ow0KPiArICAgICAgIGFkZHIgPSBpYl9tc2ctPmdwdV9hZGRyOw0KPg0KPiAgICAgICAgICBpYi0+
bGVuZ3RoX2R3ID0gMDsNCj4gICAgICAgICAgaWItPnB0cltpYi0+bGVuZ3RoX2R3KytdID0gMHgw
MDAwMDAxODsNCj4gQEAgLTkxOCwyMSArOTA4LDIzIEBAIHN0YXRpYyBpbnQgYW1kZ3B1X3Zjbl9l
bmNfZ2V0X2Rlc3Ryb3lfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFu
DQo+DQo+ICAgaW50IGFtZGdwdV92Y25fZW5jX3JpbmdfdGVzdF9pYihzdHJ1Y3QgYW1kZ3B1X3Jp
bmcgKnJpbmcsIGxvbmcgdGltZW91dCkNCj4gICB7DQo+ICsgICAgICAgc3RydWN0IGFtZGdwdV9k
ZXZpY2UgKmFkZXYgPSByaW5nLT5hZGV2Ow0KPiAgICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNlICpm
ZW5jZSA9IE5VTEw7DQo+IC0gICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8gPSBOVUxMOw0KPiAr
ICAgICAgIHN0cnVjdCBhbWRncHVfaWIgaWI7DQo+ICAgICAgICAgIGxvbmcgcjsNCj4NCj4gLSAg
ICAgICByID0gYW1kZ3B1X2JvX2NyZWF0ZV9yZXNlcnZlZChyaW5nLT5hZGV2LCAxMjggKiAxMDI0
LCBQQUdFX1NJWkUsDQo+IC0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU1E
R1BVX0dFTV9ET01BSU5fVlJBTSwNCj4gLSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAmYm8sIE5VTEwsIE5VTEwpOw0KPiArICAgICAgIG1lbXNldCgmaWIsIDAsIHNpemVvZihp
YikpOw0KPiArICAgICAgIHIgPSBhbWRncHVfaWJfZ2V0KGFkZXYsIE5VTEwsIDEyOCA8PCAxMCwN
Cj4gKyAgICAgICAgICAgICAgICAgICAgICAgQU1ER1BVX0lCX1BPT0xfRElSRUNULA0KPiArICAg
ICAgICAgICAgICAgICAgICAgICAmaWIpOw0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAgICAg
ICAgICAgICByZXR1cm4gcjsNCj4NCj4gLSAgICAgICByID0gYW1kZ3B1X3Zjbl9lbmNfZ2V0X2Ny
ZWF0ZV9tc2cocmluZywgMSwgYm8sIE5VTEwpOw0KPiArICAgICAgIHIgPSBhbWRncHVfdmNuX2Vu
Y19nZXRfY3JlYXRlX21zZyhyaW5nLCAxLCAmaWIsIE5VTEwpOw0KPiAgICAgICAgICBpZiAocikN
Cj4gICAgICAgICAgICAgICAgICBnb3RvIGVycm9yOw0KPg0KPiAtICAgICAgIHIgPSBhbWRncHVf
dmNuX2VuY19nZXRfZGVzdHJveV9tc2cocmluZywgMSwgYm8sICZmZW5jZSk7DQo+ICsgICAgICAg
ciA9IGFtZGdwdV92Y25fZW5jX2dldF9kZXN0cm95X21zZyhyaW5nLCAxLCAmaWIsICZmZW5jZSk7
DQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAgICAgICAgICAgIGdvdG8gZXJyb3I7DQo+DQo+
IEBAIC05NDMsOSArOTM1LDggQEAgaW50IGFtZGdwdV92Y25fZW5jX3JpbmdfdGVzdF9pYihzdHJ1
Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIGxvbmcgdGltZW91dCkNCj4gICAgICAgICAgICAgICAgICBy
ID0gMDsNCj4NCj4gICBlcnJvcjoNCj4gKyAgICAgICBhbWRncHVfaWJfZnJlZShhZGV2LCAmaWIs
IGZlbmNlKTsNCj4gICAgICAgICAgZG1hX2ZlbmNlX3B1dChmZW5jZSk7DQo+IC0gICAgICAgYW1k
Z3B1X2JvX3VucmVzZXJ2ZShibyk7DQo+IC0gICAgICAgYW1kZ3B1X2JvX2ZyZWVfa2VybmVsKCZi
bywgTlVMTCwgTlVMTCk7DQo+DQo+ICAgICAgICAgIHJldHVybiByOw0KPiAgIH0NCj4gZGlmZiAt
LWdpdCBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3V2ZF92Nl8wLmMgYi9kcml2ZXJzL2dw
dS9kcm0vYW1kL2FtZGdwdS91dmRfdjZfMC5jDQo+IGluZGV4IGJjNTcxODMzNjMyZS4uOTg0NDI0
NjIxMzVjIDEwMDY0NA0KPiAtLS0gYS9kcml2ZXJzL2dwdS9kcm0vYW1kL2FtZGdwdS91dmRfdjZf
MC5jDQo+ICsrKyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3V2ZF92Nl8wLmMNCj4gQEAg
LTIwNiwxNCArMjA2LDE0IEBAIHN0YXRpYyBpbnQgdXZkX3Y2XzBfZW5jX3JpbmdfdGVzdF9yaW5n
KHN0cnVjdCBhbWRncHVfcmluZyAqcmluZykNCj4gICAgKiBPcGVuIHVwIGEgc3RyZWFtIGZvciBI
VyB0ZXN0DQo+ICAgICovDQo+ICAgc3RhdGljIGludCB1dmRfdjZfMF9lbmNfZ2V0X2NyZWF0ZV9t
c2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCBoYW5kbGUsDQo+IC0gICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBhbWRncHVfYm8gKmJvLA0KPiAr
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2liICpp
Yl9tc2csDQo+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3Qg
ZG1hX2ZlbmNlICoqZmVuY2UpDQo+ICAgew0KPiAgICAgICAgICBjb25zdCB1bnNpZ25lZCBpYl9z
aXplX2R3ID0gMTY7DQo+ICAgICAgICAgIHN0cnVjdCBhbWRncHVfam9iICpqb2I7DQo+ICAgICAg
ICAgIHN0cnVjdCBhbWRncHVfaWIgKmliOw0KPiAgICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNlICpm
ID0gTlVMTDsNCj4gLSAgICAgICB1aW50NjRfdCBhZGRyOw0KPiArICAgICAgIHVpbnQ2NF90IGFk
ZHIgPSBpYl9tc2ctPmdwdV9hZGRyOw0KPiAgICAgICAgICBpbnQgaSwgcjsNCj4NCj4gICAgICAg
ICAgciA9IGFtZGdwdV9qb2JfYWxsb2Nfd2l0aF9pYihyaW5nLT5hZGV2LCBpYl9zaXplX2R3ICog
NCwNCj4gQEAgLTIyMiw3ICsyMjIsNiBAQCBzdGF0aWMgaW50IHV2ZF92Nl8wX2VuY19nZXRfY3Jl
YXRlX21zZyhzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGhhbmRsZQ0KPiAgICAg
ICAgICAgICAgICAgIHJldHVybiByOw0KPg0KPiAgICAgICAgICBpYiA9ICZqb2ItPmlic1swXTsN
Cj4gLSAgICAgICBhZGRyID0gYW1kZ3B1X2JvX2dwdV9vZmZzZXQoYm8pOw0KPg0KPiAgICAgICAg
ICBpYi0+bGVuZ3RoX2R3ID0gMDsNCj4gICAgICAgICAgaWItPnB0cltpYi0+bGVuZ3RoX2R3Kytd
ID0gMHgwMDAwMDAxODsNCj4gQEAgLTI3MCwxNCArMjY5LDE0IEBAIHN0YXRpYyBpbnQgdXZkX3Y2
XzBfZW5jX2dldF9jcmVhdGVfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3Qg
aGFuZGxlDQo+ICAgICovDQo+ICAgc3RhdGljIGludCB1dmRfdjZfMF9lbmNfZ2V0X2Rlc3Ryb3lf
bXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywNCj4gICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICB1aW50MzJfdCBoYW5kbGUsDQo+IC0gICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2JvICpibywNCj4gKyAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBhbWRncHVfaWIgKmliX21zZywNCj4g
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNl
ICoqZmVuY2UpDQo+ICAgew0KPiAgICAgICAgICBjb25zdCB1bnNpZ25lZCBpYl9zaXplX2R3ID0g
MTY7DQo+ICAgICAgICAgIHN0cnVjdCBhbWRncHVfam9iICpqb2I7DQo+ICAgICAgICAgIHN0cnVj
dCBhbWRncHVfaWIgKmliOw0KPiAgICAgICAgICBzdHJ1Y3QgZG1hX2ZlbmNlICpmID0gTlVMTDsN
Cj4gLSAgICAgICB1aW50NjRfdCBhZGRyOw0KPiArICAgICAgIHVpbnQ2NF90IGFkZHIgPSBpYl9t
c2ctPmdwdV9hZGRyOw0KPiAgICAgICAgICBpbnQgaSwgcjsNCj4NCj4gICAgICAgICAgciA9IGFt
ZGdwdV9qb2JfYWxsb2Nfd2l0aF9pYihyaW5nLT5hZGV2LCBpYl9zaXplX2R3ICogNCwNCj4gQEAg
LTI4Niw3ICsyODUsNiBAQCBzdGF0aWMgaW50IHV2ZF92Nl8wX2VuY19nZXRfZGVzdHJveV9tc2co
c3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLA0KPiAgICAgICAgICAgICAgICAgIHJldHVybiByOw0K
Pg0KPiAgICAgICAgICBpYiA9ICZqb2ItPmlic1swXTsNCj4gLSAgICAgICBhZGRyID0gYW1kZ3B1
X2JvX2dwdV9vZmZzZXQoYm8pOw0KPg0KPiAgICAgICAgICBpYi0+bGVuZ3RoX2R3ID0gMDsNCj4g
ICAgICAgICAgaWItPnB0cltpYi0+bGVuZ3RoX2R3KytdID0gMHgwMDAwMDAxODsNCj4gQEAgLTMz
MSwyMSArMzI5LDIzIEBAIHN0YXRpYyBpbnQgdXZkX3Y2XzBfZW5jX2dldF9kZXN0cm95X21zZyhz
dHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsDQo+ICAgICovDQo+ICAgc3RhdGljIGludCB1dmRfdjZf
MF9lbmNfcmluZ190ZXN0X2liKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgbG9uZyB0aW1lb3V0
KQ0KPiAgIHsNCj4gKyAgICAgICBzdHJ1Y3QgYW1kZ3B1X2RldmljZSAqYWRldiA9IHJpbmctPmFk
ZXY7DQo+ICAgICAgICAgIHN0cnVjdCBkbWFfZmVuY2UgKmZlbmNlID0gTlVMTDsNCj4gLSAgICAg
ICBzdHJ1Y3QgYW1kZ3B1X2JvICpibyA9IE5VTEw7DQo+ICsgICAgICAgc3RydWN0IGFtZGdwdV9p
YiBpYjsNCj4gICAgICAgICAgbG9uZyByOw0KPg0KPiAtICAgICAgIHIgPSBhbWRncHVfYm9fY3Jl
YXRlX3Jlc2VydmVkKHJpbmctPmFkZXYsIDEyOCAqIDEwMjQsIFBBR0VfU0laRSwNCj4gLSAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTURHUFVfR0VNX0RPTUFJTl9WUkFNLA0K
PiAtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZibywgTlVMTCwgTlVMTCk7
DQo+ICsgICAgICAgbWVtc2V0KCZpYiwgMCwgc2l6ZW9mKGliKSk7DQo+ICsgICAgICAgciA9IGFt
ZGdwdV9pYl9nZXQoYWRldiwgTlVMTCwgMTI4IDw8IDEwLA0KPiArICAgICAgICAgICAgICAgICAg
ICAgICBBTURHUFVfSUJfUE9PTF9ESVJFQ1QsDQo+ICsgICAgICAgICAgICAgICAgICAgICAgICZp
Yik7DQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAgICAgICAgICAgIHJldHVybiByOw0KPg0K
PiAtICAgICAgIHIgPSB1dmRfdjZfMF9lbmNfZ2V0X2NyZWF0ZV9tc2cocmluZywgMSwgYm8sIE5V
TEwpOw0KPiArICAgICAgIHIgPSB1dmRfdjZfMF9lbmNfZ2V0X2NyZWF0ZV9tc2cocmluZywgMSwg
JmliLCBOVUxMKTsNCj4gICAgICAgICAgaWYgKHIpDQo+ICAgICAgICAgICAgICAgICAgZ290byBl
cnJvcjsNCj4NCj4gLSAgICAgICByID0gdXZkX3Y2XzBfZW5jX2dldF9kZXN0cm95X21zZyhyaW5n
LCAxLCBibywgJmZlbmNlKTsNCj4gKyAgICAgICByID0gdXZkX3Y2XzBfZW5jX2dldF9kZXN0cm95
X21zZyhyaW5nLCAxLCAmaWIsICZmZW5jZSk7DQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAg
ICAgICAgICAgIGdvdG8gZXJyb3I7DQo+DQo+IEBAIC0zNTYsMTAgKzM1Niw4IEBAIHN0YXRpYyBp
bnQgdXZkX3Y2XzBfZW5jX3JpbmdfdGVzdF9pYihzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIGxv
bmcgdGltZW91dCkNCj4gICAgICAgICAgICAgICAgICByID0gMDsNCj4NCj4gICBlcnJvcjoNCj4g
KyAgICAgICBhbWRncHVfaWJfZnJlZShhZGV2LCAmaWIsIGZlbmNlKTsNCj4gICAgICAgICAgZG1h
X2ZlbmNlX3B1dChmZW5jZSk7DQo+IC0gICAgICAgYW1kZ3B1X2JvX3VucGluKGJvKTsNCj4gLSAg
ICAgICBhbWRncHVfYm9fdW5yZXNlcnZlKGJvKTsNCj4gLSAgICAgICBhbWRncHVfYm9fdW5yZWYo
JmJvKTsNCj4gICAgICAgICAgcmV0dXJuIHI7DQo+ICAgfQ0KPg0KPiBkaWZmIC0tZ2l0IGEvZHJp
dmVycy9ncHUvZHJtL2FtZC9hbWRncHUvdXZkX3Y3XzAuYyBiL2RyaXZlcnMvZ3B1L2RybS9hbWQv
YW1kZ3B1L3V2ZF92N18wLmMNCj4gaW5kZXggYjZlODJkNzU1NjFmLi4zNDQwZWY1NTRmOTkgMTAw
NjQ0DQo+IC0tLSBhL2RyaXZlcnMvZ3B1L2RybS9hbWQvYW1kZ3B1L3V2ZF92N18wLmMNCj4gKysr
IGIvZHJpdmVycy9ncHUvZHJtL2FtZC9hbWRncHUvdXZkX3Y3XzAuYw0KPiBAQCAtMjEzLDE0ICsy
MTMsMTQgQEAgc3RhdGljIGludCB1dmRfdjdfMF9lbmNfcmluZ190ZXN0X3Jpbmcoc3RydWN0IGFt
ZGdwdV9yaW5nICpyaW5nKQ0KPiAgICAqIE9wZW4gdXAgYSBzdHJlYW0gZm9yIEhXIHRlc3QNCj4g
ICAgKi8NCj4gICBzdGF0aWMgaW50IHV2ZF92N18wX2VuY19nZXRfY3JlYXRlX21zZyhzdHJ1Y3Qg
YW1kZ3B1X3JpbmcgKnJpbmcsIHVpbnQzMl90IGhhbmRsZSwNCj4gLSAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8sDQo+ICsgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBhbWRncHVfaWIgKmliX21zZywNCj4g
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdCBkbWFfZmVuY2Ug
KipmZW5jZSkNCj4gICB7DQo+ICAgICAgICAgIGNvbnN0IHVuc2lnbmVkIGliX3NpemVfZHcgPSAx
NjsNCj4gICAgICAgICAgc3RydWN0IGFtZGdwdV9qb2IgKmpvYjsNCj4gICAgICAgICAgc3RydWN0
IGFtZGdwdV9pYiAqaWI7DQo+ICAgICAgICAgIHN0cnVjdCBkbWFfZmVuY2UgKmYgPSBOVUxMOw0K
PiAtICAgICAgIHVpbnQ2NF90IGFkZHI7DQo+ICsgICAgICAgdWludDY0X3QgYWRkciA9IGliX21z
Zy0+Z3B1X2FkZHI7DQo+ICAgICAgICAgIGludCBpLCByOw0KPg0KPiAgICAgICAgICByID0gYW1k
Z3B1X2pvYl9hbGxvY193aXRoX2liKHJpbmctPmFkZXYsIGliX3NpemVfZHcgKiA0LA0KPiBAQCAt
MjI5LDcgKzIyOSw2IEBAIHN0YXRpYyBpbnQgdXZkX3Y3XzBfZW5jX2dldF9jcmVhdGVfbXNnKHN0
cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZGxlDQo+ICAgICAgICAgICAgICAg
ICAgcmV0dXJuIHI7DQo+DQo+ICAgICAgICAgIGliID0gJmpvYi0+aWJzWzBdOw0KPiAtICAgICAg
IGFkZHIgPSBhbWRncHVfYm9fZ3B1X29mZnNldChibyk7DQo+DQo+ICAgICAgICAgIGliLT5sZW5n
dGhfZHcgPSAwOw0KPiAgICAgICAgICBpYi0+cHRyW2liLT5sZW5ndGhfZHcrK10gPSAweDAwMDAw
MDE4Ow0KPiBAQCAtMjc2LDE0ICsyNzUsMTQgQEAgc3RhdGljIGludCB1dmRfdjdfMF9lbmNfZ2V0
X2NyZWF0ZV9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1aW50MzJfdCBoYW5kbGUNCj4g
ICAgKiBDbG9zZSB1cCBhIHN0cmVhbSBmb3IgSFcgdGVzdCBvciBpZiB1c2Vyc3BhY2UgZmFpbGVk
IHRvIGRvIHNvDQo+ICAgICovDQo+ICAgc3RhdGljIGludCB1dmRfdjdfMF9lbmNfZ2V0X2Rlc3Ry
b3lfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZGxlLA0KPiAtICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0IGFtZGdwdV9ibyAqYm8s
DQo+ICsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1
X2liICppYl9tc2csDQo+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
c3RydWN0IGRtYV9mZW5jZSAqKmZlbmNlKQ0KPiAgIHsNCj4gICAgICAgICAgY29uc3QgdW5zaWdu
ZWQgaWJfc2l6ZV9kdyA9IDE2Ow0KPiAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2pvYiAqam9iOw0K
PiAgICAgICAgICBzdHJ1Y3QgYW1kZ3B1X2liICppYjsNCj4gICAgICAgICAgc3RydWN0IGRtYV9m
ZW5jZSAqZiA9IE5VTEw7DQo+IC0gICAgICAgdWludDY0X3QgYWRkcjsNCj4gKyAgICAgICB1aW50
NjRfdCBhZGRyID0gaWJfbXNnLT5ncHVfYWRkcjsNCj4gICAgICAgICAgaW50IGksIHI7DQo+DQo+
ICAgICAgICAgIHIgPSBhbWRncHVfam9iX2FsbG9jX3dpdGhfaWIocmluZy0+YWRldiwgaWJfc2l6
ZV9kdyAqIDQsDQo+IEBAIC0yOTIsNyArMjkxLDYgQEAgc3RhdGljIGludCB1dmRfdjdfMF9lbmNf
Z2V0X2Rlc3Ryb3lfbXNnKHN0cnVjdCBhbWRncHVfcmluZyAqcmluZywgdWludDMyX3QgaGFuZGwN
Cj4gICAgICAgICAgICAgICAgICByZXR1cm4gcjsNCj4NCj4gICAgICAgICAgaWIgPSAmam9iLT5p
YnNbMF07DQo+IC0gICAgICAgYWRkciA9IGFtZGdwdV9ib19ncHVfb2Zmc2V0KGJvKTsNCj4NCj4g
ICAgICAgICAgaWItPmxlbmd0aF9kdyA9IDA7DQo+ICAgICAgICAgIGliLT5wdHJbaWItPmxlbmd0
aF9kdysrXSA9IDB4MDAwMDAwMTg7DQo+IEBAIC0zMzcsMjEgKzMzNSwyMyBAQCBzdGF0aWMgaW50
IHV2ZF92N18wX2VuY19nZXRfZGVzdHJveV9tc2coc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCB1
aW50MzJfdCBoYW5kbA0KPiAgICAqLw0KPiAgIHN0YXRpYyBpbnQgdXZkX3Y3XzBfZW5jX3Jpbmdf
dGVzdF9pYihzdHJ1Y3QgYW1kZ3B1X3JpbmcgKnJpbmcsIGxvbmcgdGltZW91dCkNCj4gICB7DQo+
ICsgICAgICAgc3RydWN0IGFtZGdwdV9kZXZpY2UgKmFkZXYgPSByaW5nLT5hZGV2Ow0KPiAgICAg
ICAgICBzdHJ1Y3QgZG1hX2ZlbmNlICpmZW5jZSA9IE5VTEw7DQo+IC0gICAgICAgc3RydWN0IGFt
ZGdwdV9ibyAqYm8gPSBOVUxMOw0KPiArICAgICAgIHN0cnVjdCBhbWRncHVfaWIgaWI7DQo+ICAg
ICAgICAgIGxvbmcgcjsNCj4NCj4gLSAgICAgICByID0gYW1kZ3B1X2JvX2NyZWF0ZV9yZXNlcnZl
ZChyaW5nLT5hZGV2LCAxMjggKiAxMDI0LCBQQUdFX1NJWkUsDQo+IC0gICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgQU1ER1BVX0dFTV9ET01BSU5fVlJBTSwNCj4gLSAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmYm8sIE5VTEwsIE5VTEwpOw0KPiArICAgICAg
IG1lbXNldCgmaWIsIDAsIHNpemVvZihpYikpOw0KPiArICAgICAgIHIgPSBhbWRncHVfaWJfZ2V0
KGFkZXYsIE5VTEwsIDEyOCA8PCAxMCwNCj4gKyAgICAgICAgICAgICAgICAgICAgICAgQU1ER1BV
X0lCX1BPT0xfRElSRUNULA0KPiArICAgICAgICAgICAgICAgICAgICAgICAmaWIpOw0KPiAgICAg
ICAgICBpZiAocikNCj4gICAgICAgICAgICAgICAgICByZXR1cm4gcjsNCj4NCj4gLSAgICAgICBy
ID0gdXZkX3Y3XzBfZW5jX2dldF9jcmVhdGVfbXNnKHJpbmcsIDEsIGJvLCBOVUxMKTsNCj4gKyAg
ICAgICByID0gdXZkX3Y3XzBfZW5jX2dldF9jcmVhdGVfbXNnKHJpbmcsIDEsICZpYiwgTlVMTCk7
DQo+ICAgICAgICAgIGlmIChyKQ0KPiAgICAgICAgICAgICAgICAgIGdvdG8gZXJyb3I7DQo+DQo+
IC0gICAgICAgciA9IHV2ZF92N18wX2VuY19nZXRfZGVzdHJveV9tc2cocmluZywgMSwgYm8sICZm
ZW5jZSk7DQo+ICsgICAgICAgciA9IHV2ZF92N18wX2VuY19nZXRfZGVzdHJveV9tc2cocmluZywg
MSwgJmliLCAmZmVuY2UpOw0KPiAgICAgICAgICBpZiAocikNCj4gICAgICAgICAgICAgICAgICBn
b3RvIGVycm9yOw0KPg0KPiBAQCAtMzYyLDEwICszNjIsOCBAQCBzdGF0aWMgaW50IHV2ZF92N18w
X2VuY19yaW5nX3Rlc3RfaWIoc3RydWN0IGFtZGdwdV9yaW5nICpyaW5nLCBsb25nIHRpbWVvdXQp
DQo+ICAgICAgICAgICAgICAgICAgciA9IDA7DQo+DQo+ICAgZXJyb3I6DQo+ICsgICAgICAgYW1k
Z3B1X2liX2ZyZWUoYWRldiwgJmliLCBmZW5jZSk7DQo+ICAgICAgICAgIGRtYV9mZW5jZV9wdXQo
ZmVuY2UpOw0KPiAtICAgICAgIGFtZGdwdV9ib191bnBpbihibyk7DQo+IC0gICAgICAgYW1kZ3B1
X2JvX3VucmVzZXJ2ZShibyk7DQo+IC0gICAgICAgYW1kZ3B1X2JvX3VucmVmKCZibyk7DQo+ICAg
ICAgICAgIHJldHVybiByOw0KPiAgIH0NCj4NCj4gLS0NCj4gMi4yNS4xDQo+DQoNCg0K

--_000_DM4PR12MB5165F781E6DA18852A01640C87D59DM4PR12MB5165namp_
Content-Type: text/html; charset="gb2312"
Content-Transfer-Encoding: quoted-printable

<html>
<head>
<meta http-equiv=3D"Content-Type" content=3D"text/html; charset=3Dgb2312">
</head>
<body>
<p style=3D"font-family:Arial;font-size:10pt;color:#0000FF;margin:5pt;" ali=
gn=3D"Left">
[AMD Official Use Only]<br>
</p>
<br>
<div>
<div dir=3D"auto" style=3D"direction: ltr; margin: 0px; padding: 0px; font-=
family: sans-serif; font-size: 11pt; color: black; text-align: left;">
well, If IB test fails because we use gtt domain or</div>
<div dir=3D"auto" style=3D"direction: ltr; margin: 0px; padding: 0px; font-=
family: sans-serif; font-size: 11pt; color: black; text-align: left;">
the above 256MB vram<span style=3D"font-size: 11pt;">. Then the failure</sp=
an><span style=3D"font-size: 11pt;">&nbsp;is expected.&nbsp;</span></div>
<div dir=3D"auto" style=3D"direction: ltr; margin: 0px; padding: 0px; font-=
family: sans-serif; font-size: 11pt; color: black; text-align: left;">
<span style=3D"font-size: 11pt;">Doesn't IB test exist to detect such issue=
?</span></div>
<div id=3D"id-6c97172e-0116-45da-8423-7906d63f733c" class=3D"ms-outlook-mob=
ile-reference-message">
<div style=3D"font-family: sans-serif; font-size: 12pt; color: rgb(0, 0, 0)=
;"><br>
</div>
<hr style=3D"display:inline-block;width:98%" tabindex=3D"-1">
<div id=3D"divRplyFwdMsg"><strong>=B7=A2=BC=FE=C8=CB:</strong> Koenig, Chri=
stian &lt;Christian.Koenig@amd.com&gt;<br>
<strong>=B7=A2=CB=CD=CA=B1=BC=E4:</strong> 2021=C4=EA9=D4=C29=C8=D5=D0=C7=
=C6=DA=CB=C4 15:16<br>
<strong>=CA=D5=BC=FE=C8=CB:</strong> Pan, Xinhui; amd-gfx@lists.freedesktop=
.org<br>
<strong>=B3=AD=CB=CD:</strong> Deucher, Alexander<br>
<strong>=D6=F7=CC=E2:</strong> Re: [PATCH 2/2] drm/amdgpu: alloc IB extra m=
sg from IB pool<br>
</div>
<br>
<meta name=3D"Generator" content=3D"Microsoft Exchange Server">
<!-- converted from text --><style><!-- .EmailQuote { margin-left: 1pt; pad=
ding-left: 4pt; border-left: #800000 2px solid; } --></style><font size=3D"=
2"><span style=3D"font-size:11pt;">
<div class=3D"PlainText">Am 09.09.21 um 07:55 schrieb Pan, Xinhui:<br>
&gt; [AMD Official Use Only]<br>
&gt;<br>
&gt; There is one dedicated IB pool for IB test. So lets use it for extra m=
sg<br>
&gt; too.<br>
&gt;<br>
&gt; For UVD on older HW, use one reserved BO at specific range.<br>
&gt;<br>
&gt; Signed-off-by: xinhui pan &lt;xinhui.pan@amd.com&gt;<br>
&gt; ---<br>
&gt;&nbsp;&nbsp; drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c | 173 ++++++++++++=
+++---------<br>
&gt;&nbsp;&nbsp; drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.h |&nbsp;&nbsp; 1 +<=
br>
&gt;&nbsp;&nbsp; drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c |&nbsp; 18 +--<br>
&gt;&nbsp;&nbsp; drivers/gpu/drm/amd/amdgpu/amdgpu_vcn.c |&nbsp; 99 ++++++-=
-------<br>
&gt;&nbsp;&nbsp; drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c&nbsp;&nbsp; |&nbsp; =
28 ++--<br>
&gt;&nbsp;&nbsp; drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c&nbsp;&nbsp; |&nbsp; =
28 ++--<br>
&gt;&nbsp;&nbsp; 6 files changed, 185 insertions(+), 162 deletions(-)<br>
<br>
Please split that up into one patch for UVD, one for VCE and a third for <b=
r>
VCN.<br>
<br>
&gt;<br>
&gt; diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c b/drivers/gpu/drm=
/amd/amdgpu/amdgpu_uvd.c<br>
&gt; index d451c359606a..733cfc848c6c 100644<br>
&gt; --- a/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c<br>
&gt; +++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.c<br>
&gt; @@ -299,8 +299,36 @@ int amdgpu_uvd_sw_init(struct amdgpu_device *adev=
)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* from uvd v5.0=
 HW addressing capacity increased to 64 bits */<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!amdgpu_device_ip_block_vers=
ion_cmp(adev, AMD_IP_BLOCK_TYPE_UVD, 5, 0))<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!amdgpu_device_ip_block_vers=
ion_cmp(adev, AMD_IP_BLOCK_TYPE_UVD, 5, 0)) {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; adev-&gt;uvd.address_64_bit =3D true;<br>
<br>
Yeah, that's exactly what I'm trying to avoid.<br>
<br>
We should use the BO approach both for old and new UVD blocks, just <br>
making sure that we place it correctly for the old ones.<br>
<br>
This way we have much lower chance of breaking the old stuff.<br>
<br>
Thanks,<br>
Christian.<br>
<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; void *addr;<br>
&gt; +<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(adev, PAGE_SIZE, PAGE_SIZE,=
<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_GEM_DOMAIN_VRAM,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;bo, NULL, &amp;addr);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_kunmap(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_unpin(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D amdgpu_bo_pin_restricted(bo, AMDGPU_GEM_DOMAIN_VRAM,<=
br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0, 256 &lt;&lt; 20);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r) {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_u=
nreserve(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_u=
nref(&amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; }<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D amdgpu_bo_kmap(bo, &amp;addr);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r) {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_u=
npin(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_u=
nreserve(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_u=
nref(&amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; }<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; adev-&gt;uvd.ib_bo =3D bo;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (adev-&gt=
;asic_type) {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case CHIP_TONGA:=
<br>
&gt; @@ -342,6 +370,7 @@ int amdgpu_uvd_sw_fini(struct amdgpu_device *adev)=
<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i =3D 0; i &lt; AMDGPU_MAX_UVD_ENC_RIN=
GS; ++i)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp; amdgpu_ring_fini(&amp;adev-&gt;uvd.inst[j].ring_enc[i]);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_free_kernel(&amp;adev-=
&gt;uvd.ib_bo, NULL, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; release_firmware=
(adev-&gt;uvd.fw);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br>
&gt; @@ -1066,7 +1095,7 @@ int amdgpu_uvd_ring_parse_cs(struct amdgpu_cs_pa=
rser *parser, uint32_t ib_idx)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt; -static int amdgpu_uvd_send_msg(struct amdgpu_ring *ring, struct amdgp=
u_bo *bo,<br>
&gt; +static int amdgpu_uvd_send_msg(struct amdgpu_ring *ring, uint64_t add=
r,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool direct, struct dma_fenc=
e **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_de=
vice *adev =3D ring-&gt;adev;<br>
&gt; @@ -1074,29 +1103,15 @@ static int amdgpu_uvd_send_msg(struct amdgpu_r=
ing *ring, struct amdgpu_bo *bo,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t data[4]=
;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned offset_=
idx =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned offset[=
3] =3D { UVD_BASE_SI, 0, 0 };<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_kunmap(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unpin(bo);<br>
&gt; -<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!ring-&gt;adev-&gt;uvd.addre=
ss_64_bit) {<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct ttm_operation_ctx ctx =3D { true, false };<br>
&gt; -<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_placement_from_domain(bo, AMDGPU_GEM_DOMAIN_VRAM)=
;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_uvd_force_into_uvd_segment(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D ttm_bo_validate(&amp;bo-&gt;tbo, &amp;bo-&gt;placemen=
t, &amp;ctx);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err;<b=
r>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt; -<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(adev, 64, direct ? AMDGPU_IB_POOL_DIRECT :<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; AMDGPU_IB_POOL_DELAYED, &amp;job);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; goto err;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (adev-&gt;asi=
c_type &gt;=3D CHIP_VEGA10) {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; offset_idx =3D 1 + ring-&gt;me;<br>
&gt; @@ -1110,7 +1125,6 @@ static int amdgpu_uvd_send_msg(struct amdgpu_rin=
g *ring, struct amdgpu_bo *bo,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data[3] =3D PACK=
ET0(offset[offset_idx] + UVD_NO_OP, 0);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[0] =
=3D data[0];<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[1] =
=3D addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[2] =
=3D data[1];<br>
&gt; @@ -1123,33 +1137,13 @@ static int amdgpu_uvd_send_msg(struct amdgpu_r=
ing *ring, struct amdgpu_bo *bo,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 16;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (direct) {<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D dma_resv_wait_timeout(bo-&gt;tbo.base.resv, true, fal=
se,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; msecs_to_jiffies(10));<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r =3D=3D 0)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D -ETIM=
EDOUT;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r &lt; 0)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_fr=
ee;<br>
&gt; -<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (direct)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job_submit_direct(job, ring, &=
amp;f);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_fr=
ee;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D amdgpu_sync_resv(adev, &amp;job-&gt;sync, bo-&gt;tbo.=
base.resv,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_S=
YNC_ALWAYS,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_F=
ENCE_OWNER_UNDEFINED);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_fr=
ee;<br>
&gt; -<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job_submit(job, &amp;adev-&gt;=
uvd.entity,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_FENCE_OWNER_UNDEFINED, &amp;f);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_fr=
ee;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt; -<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_fence(bo, f, false);<b=
r>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unref(&amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_FENCE_OWNER_UNDEFINED, &amp;f);=
<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; goto err_free;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fence)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *fence =3D dma_fence_get(f);<br>
&gt; @@ -1159,10 +1153,6 @@ static int amdgpu_uvd_send_msg(struct amdgpu_ri=
ng *ring, struct amdgpu_bo *bo,<br>
&gt;<br>
&gt;&nbsp;&nbsp; err_free:<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_job_free(=
job);<br>
&gt; -<br>
&gt; -err:<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unref(&amp;bo);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt; @@ -1173,16 +1163,31 @@ int amdgpu_uvd_get_create_msg(struct amdgpu_ri=
ng *ring, uint32_t handle,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_de=
vice *adev =3D ring-&gt;adev;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D adev-&g=
t;uvd.ib_bo;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence *f =3D NULL;<br=
>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t *msg;<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int r, i;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
adev, 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_GTT,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &a=
mp;bo, NULL, (void **)&amp;msg);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; return r;<br>
&gt; -<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bo) {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D ttm_bo_reserve(&amp;bo-&gt;tbo, true, true, NULL);<br=
>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D dma_resv_wait_timeout(bo-&gt;tbo.base.resv, true, fal=
se,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msecs_to_jiffies(10));<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r =3D=3D 0)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D -ETIM=
EDOUT;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r &lt; 0)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; ib.gpu_addr =3D amdgpu_bo_gpu_offset(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; msg =3D amdgpu_bo_kptr(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; memset(&amp;ib, 0, sizeof(ib));<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, PAGE_SIZE,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_POOL_DIRECT,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;ib);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; msg =3D ib.ptr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* stitch togeth=
er an UVD create msg */<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[0] =3D cpu_t=
o_le32(0x00000de4);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[1] =3D cpu_t=
o_le32(0x00000000);<br>
&gt; @@ -1198,23 +1203,52 @@ int amdgpu_uvd_get_create_msg(struct amdgpu_ri=
ng *ring, uint32_t handle,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i =3D 11; i=
 &lt; 1024; ++i)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[i] =3D cpu_to_le32(0x0);<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return amdgpu_uvd_send_msg(ring,=
 bo, true, fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_uvd_send_msg(ring, =
ib.gpu_addr, true, &amp;f);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; goto err;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bo)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_fence(bo, f, false);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fence)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; *fence =3D dma_fence_get(f);<br>
&gt; +err:<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bo)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_ib_free(adev, &amp;ib, f);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dma_fence_put(f);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; int amdgpu_uvd_get_destroy_msg(struct amdgpu_ring *ring, u=
int32_t handle,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bool direct, struct dma_fenc=
e **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_de=
vice *adev =3D ring-&gt;adev;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D adev-&g=
t;uvd.ib_bo;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence *f =3D NULL;<br=
>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t *msg;<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int r, i;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
adev, 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_GTT,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &a=
mp;bo, NULL, (void **)&amp;msg);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; return r;<br>
&gt; -<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bo) {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D ttm_bo_reserve(&amp;bo-&gt;tbo, true, true, NULL);<br=
>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D dma_resv_wait_timeout(bo-&gt;tbo.base.resv, true, fal=
se,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msecs_to_jiffies(10));<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r =3D=3D 0)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D -ETIM=
EDOUT;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; if (r &lt; 0)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; ib.gpu_addr =3D amdgpu_bo_gpu_offset(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; msg =3D amdgpu_bo_kptr(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; memset(&amp;ib, 0, sizeof(ib));<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, PAGE_SIZE,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; direct ?<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_POOL_DIRECT : AMDGPU_IB_POOL=
_DELAYED,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;ib);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; msg =3D ib.ptr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* stitch togeth=
er an UVD destroy msg */<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[0] =3D cpu_t=
o_le32(0x00000de4);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[1] =3D cpu_t=
o_le32(0x00000002);<br>
&gt; @@ -1223,7 +1257,20 @@ int amdgpu_uvd_get_destroy_msg(struct amdgpu_ri=
ng *ring, uint32_t handle,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i =3D 4; i =
&lt; 1024; ++i)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[i] =3D cpu_to_le32(0x0);<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return amdgpu_uvd_send_msg(ring,=
 bo, direct, fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_uvd_send_msg(ring, =
ib.gpu_addr, true, &amp;f);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; goto err;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bo)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_fence(bo, f, false);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fence)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; *fence =3D dma_fence_get(f);<br>
&gt; +err:<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (bo)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; amdgpu_ib_free(adev, &amp;ib, f);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dma_fence_put(f);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static void amdgpu_uvd_idle_work_handler(struct work_struc=
t *work)<br>
&gt; diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.h b/drivers/gpu/drm=
/amd/amdgpu/amdgpu_uvd.h<br>
&gt; index edbb8194ee81..76ac9699885d 100644<br>
&gt; --- a/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.h<br>
&gt; +++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_uvd.h<br>
&gt; @@ -68,6 +68,7 @@ struct amdgpu_uvd {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* store image w=
idth to adjust nb memory state */<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; decode_image_width;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; keyselect;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo&nbsp;&nbsp;&nbs=
p;&nbsp;&nbsp;&nbsp;&nbsp; *ib_bo;<br>
&gt;&nbsp;&nbsp; };<br>
&gt;<br>
&gt;&nbsp;&nbsp; int amdgpu_uvd_sw_init(struct amdgpu_device *adev);<br>
&gt; diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c b/drivers/gpu/drm=
/amd/amdgpu/amdgpu_vce.c<br>
&gt; index e9fdf49d69e8..45d98694db18 100644<br>
&gt; --- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c<br>
&gt; +++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vce.c<br>
&gt; @@ -82,7 +82,6 @@ MODULE_FIRMWARE(FIRMWARE_VEGA20);<br>
&gt;<br>
&gt;&nbsp;&nbsp; static void amdgpu_vce_idle_work_handler(struct work_struc=
t *work);<br>
&gt;&nbsp;&nbsp; static int amdgpu_vce_get_create_msg(struct amdgpu_ring *r=
ing, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct a=
mdgpu_bo *bo,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; struct dma_fence **fence);<br>
&gt;&nbsp;&nbsp; static int amdgpu_vce_get_destroy_msg(struct amdgpu_ring *=
ring, uint32_t handle,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp; bool direct, struct dma_fence **fence);<br>
&gt; @@ -441,7 +440,6 @@ void amdgpu_vce_free_handles(struct amdgpu_device =
*adev, struct drm_file *filp)<br>
&gt;&nbsp;&nbsp;&nbsp; * Open up a stream for HW test<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int amdgpu_vce_get_create_msg(struct amdgpu_ring *r=
ing, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct a=
mdgpu_bo *bo,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 1024;<br>
&gt; @@ -451,14 +449,13 @@ static int amdgpu_vce_get_create_msg(struct amdg=
pu_ring *ring, uint32_t handle,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job_alloc_with_ib(r=
ing-&gt;adev, ib_size_dw * 4,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job_alloc_with_ib(r=
ing-&gt;adev, ib_size_dw * 4 + PAGE_SIZE,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp; AMDGPU_IB_POOL_DIRECT, &amp;job);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D ib-&gt;gpu_addr + ib_si=
ze_dw * 4;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* stitch togeth=
er an VCE create msg */<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt; @@ -1134,20 +1131,13 @@ int amdgpu_vce_ring_test_ring(struct amdgpu_ri=
ng *ring)<br>
&gt;&nbsp;&nbsp; int amdgpu_vce_ring_test_ib(struct amdgpu_ring *ring, long=
 timeout)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *fence =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* skip vce ring=
1/2 ib test for now, since it's not reliable */<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (ring !=3D &a=
mp;ring-&gt;adev-&gt;vce.ring[0])<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
ring-&gt;adev, 512, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_VRAM,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &a=
mp;bo, NULL, NULL);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; return r;<br>
&gt; -<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vce_get_create_msg(=
ring, 1, bo, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vce_get_create_msg(=
ring, 1, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; @@ -1163,8 +1153,6 @@ int amdgpu_vce_ring_test_ib(struct amdgpu_ring *=
ring, long timeout)<br>
&gt;<br>
&gt;&nbsp;&nbsp; error:<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dma_fence_put(fe=
nce);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_free_kernel(&amp;bo, N=
ULL, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt; diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_vcn.c b/drivers/gpu/drm=
/amd/amdgpu/amdgpu_vcn.c<br>
&gt; index 561296a85b43..b60d5f01fdae 100644<br>
&gt; --- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vcn.c<br>
&gt; +++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vcn.c<br>
&gt; @@ -541,15 +541,14 @@ int amdgpu_vcn_dec_sw_ring_test_ring(struct amdg=
pu_ring *ring)<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static int amdgpu_vcn_dec_send_msg(struct amdgpu_ring *rin=
g,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo=
,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **f=
ence)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_ib *ib_msg,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_de=
vice *adev =3D ring-&gt;adev;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *f =3D NULL;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void *msg =3D NULL;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr =3D ib_msg-&gt;gpu=
_addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(adev, 64,<br>
&gt; @@ -558,8 +557,6 @@ static int amdgpu_vcn_dec_send_msg(struct amdgpu_r=
ing *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg =3D amdgpu_bo_kptr(bo);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[0] =
=3D PACKET0(adev-&gt;vcn.internal.data0, 0);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[1] =
=3D addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[2] =
=3D PACKET0(adev-&gt;vcn.internal.data1, 0);<br>
&gt; @@ -576,9 +573,7 @@ static int amdgpu_vcn_dec_send_msg(struct amdgpu_r=
ing *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_free;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_fence(bo, f, false);<b=
r>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_free_kernel(&amp;bo, N=
ULL, (void **)&amp;msg);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, ib_msg, f);=
<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fence)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *fence =3D dma_fence_get(f);<br>
&gt; @@ -588,27 +583,26 @@ static int amdgpu_vcn_dec_send_msg(struct amdgpu=
_ring *ring,<br>
&gt;<br>
&gt;&nbsp;&nbsp; err_free:<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_job_free(=
job);<br>
&gt; -<br>
&gt;&nbsp;&nbsp; err:<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_free_kernel(&amp;bo, N=
ULL, (void **)&amp;msg);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, ib_msg, f);=
<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static int amdgpu_vcn_dec_get_create_msg(struct amdgpu_rin=
g *ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_bo **bo)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_ib *ib)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_de=
vice *adev =3D ring-&gt;adev;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t *msg;<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int r, i;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *bo =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
adev, 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_VRAM,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bo=
, NULL, (void **)&amp;msg);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(ib, 0, sizeof(*ib));<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, =
PAGE_SIZE,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_P=
OOL_DIRECT,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg =3D ib-&gt;ptr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[0] =3D cpu_t=
o_le32(0x00000028);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[1] =3D cpu_t=
o_le32(0x00000038);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[2] =3D cpu_t=
o_le32(0x00000001);<br>
&gt; @@ -630,19 +624,20 @@ static int amdgpu_vcn_dec_get_create_msg(struct =
amdgpu_ring *ring, uint32_t hand<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static int amdgpu_vcn_dec_get_destroy_msg(struct amdgpu_ri=
ng *ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo **bo)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib *ib)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_de=
vice *adev =3D ring-&gt;adev;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t *msg;<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int r, i;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *bo =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
adev, 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_VRAM,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bo=
, NULL, (void **)&amp;msg);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(ib, 0, sizeof(*ib));<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, =
PAGE_SIZE,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_P=
OOL_DIRECT,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg =3D ib-&gt;ptr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[0] =3D cpu_t=
o_le32(0x00000028);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[1] =3D cpu_t=
o_le32(0x00000018);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg[2] =3D cpu_t=
o_le32(0x00000000);<br>
&gt; @@ -658,21 +653,21 @@ static int amdgpu_vcn_dec_get_destroy_msg(struct=
 amdgpu_ring *ring, uint32_t han<br>
&gt;&nbsp;&nbsp; int amdgpu_vcn_dec_ring_test_ib(struct amdgpu_ring *ring, =
long timeout)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *fence =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_create_=
msg(ring, 1, &amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_create_=
msg(ring, 1, &amp;ib);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_send_msg(ri=
ng, bo, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_send_msg(ri=
ng, &amp;ib, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_destroy=
_msg(ring, 1, &amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_destroy=
_msg(ring, 1, &amp;ib);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_send_msg(ri=
ng, bo, &amp;fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_send_msg(ri=
ng, &amp;ib, &amp;fence);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; @@ -688,8 +683,8 @@ int amdgpu_vcn_dec_ring_test_ib(struct amdgpu_ring=
 *ring, long timeout)<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static int amdgpu_vcn_dec_sw_send_msg(struct amdgpu_ring *=
ring,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo=
,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **f=
ence)<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_ib *ib_msg,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_vc=
n_decode_buffer *decode_buffer =3D NULL;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
nt ib_size_dw =3D 64;<br>
&gt; @@ -697,7 +692,7 @@ static int amdgpu_vcn_dec_sw_send_msg(struct amdgp=
u_ring *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *f =3D NULL;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr =3D ib_msg-&gt;gpu=
_addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(adev, ib_size_dw * 4,<br>
&gt; @@ -706,7 +701,6 @@ static int amdgpu_vcn_dec_sw_send_msg(struct amdgp=
u_ring *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D sizeof(struct amdgpu_vcn_decode_buffer) + 8;<br>
&gt; @@ -726,9 +720,7 @@ static int amdgpu_vcn_dec_sw_send_msg(struct amdgp=
u_ring *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto err_free;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_fence(bo, f, false);<b=
r>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unref(&amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, ib_msg, f);=
<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fence)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *fence =3D dma_fence_get(f);<br>
&gt; @@ -738,31 +730,29 @@ static int amdgpu_vcn_dec_sw_send_msg(struct amd=
gpu_ring *ring,<br>
&gt;<br>
&gt;&nbsp;&nbsp; err_free:<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_job_free(=
job);<br>
&gt; -<br>
&gt;&nbsp;&nbsp; err:<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unref(&amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, ib_msg, f);=
<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; int amdgpu_vcn_dec_sw_ring_test_ib(struct amdgpu_ring *rin=
g, long timeout)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *fence =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_create_=
msg(ring, 1, &amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_create_=
msg(ring, 1, &amp;ib);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_sw_send_msg=
(ring, bo, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_sw_send_msg=
(ring, &amp;ib, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_destroy=
_msg(ring, 1, &amp;bo);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_get_destroy=
_msg(ring, 1, &amp;ib);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_sw_send_msg=
(ring, bo, &amp;fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_dec_sw_send_msg=
(ring, &amp;ib, &amp;fence);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; @@ -809,7 +799,7 @@ int amdgpu_vcn_enc_ring_test_ring(struct amdgpu_ri=
ng *ring)<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static int amdgpu_vcn_enc_get_create_msg(struct amdgpu_rin=
g *ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_bo *bo,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp; struct amdgpu_ib *ib_msg,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 16;<br>
&gt; @@ -825,7 +815,7 @@ static int amdgpu_vcn_enc_get_create_msg(struct am=
dgpu_ring *ring, uint32_t hand<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D ib_msg-&gt;gpu_addr;<br=
>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D 0x00000018;<br>
&gt; @@ -863,7 +853,7 @@ static int amdgpu_vcn_enc_get_create_msg(struct am=
dgpu_ring *ring, uint32_t hand<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt;&nbsp;&nbsp; static int amdgpu_vcn_enc_get_destroy_msg(struct amdgpu_ri=
ng *ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib *ib_msg,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 16;<br>
&gt; @@ -879,7 +869,7 @@ static int amdgpu_vcn_enc_get_destroy_msg(struct a=
mdgpu_ring *ring, uint32_t han<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D ib_msg-&gt;gpu_addr;<br=
>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D 0x00000018;<br>
&gt; @@ -918,21 +908,23 @@ static int amdgpu_vcn_enc_get_destroy_msg(struct=
 amdgpu_ring *ring, uint32_t han<br>
&gt;<br>
&gt;&nbsp;&nbsp; int amdgpu_vcn_enc_ring_test_ib(struct amdgpu_ring *ring, =
long timeout)<br>
&gt;&nbsp;&nbsp; {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_device *adev =3D r=
ing-&gt;adev;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *fence =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
ring-&gt;adev, 128 * 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_VRAM,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &a=
mp;bo, NULL, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(&amp;ib, 0, sizeof(ib));<=
br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, =
128 &lt;&lt; 10,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_P=
OOL_DIRECT,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;ib);<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_enc_get_create_=
msg(ring, 1, bo, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_enc_get_create_=
msg(ring, 1, &amp;ib, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_enc_get_destroy=
_msg(ring, 1, bo, &amp;fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_vcn_enc_get_destroy=
_msg(ring, 1, &amp;ib, &amp;fence);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; @@ -943,9 +935,8 @@ int amdgpu_vcn_enc_ring_test_ib(struct amdgpu_ring=
 *ring, long timeout)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D 0;<br>
&gt;<br>
&gt;&nbsp;&nbsp; error:<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, &amp;ib, fe=
nce);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dma_fence_put(fe=
nce);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_free_kernel(&amp;bo, N=
ULL, NULL);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt; diff --git a/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c b/drivers/gpu/drm/a=
md/amdgpu/uvd_v6_0.c<br>
&gt; index bc571833632e..98442462135c 100644<br>
&gt; --- a/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c<br>
&gt; +++ b/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c<br>
&gt; @@ -206,14 +206,14 @@ static int uvd_v6_0_enc_ring_test_ring(struct am=
dgpu_ring *ring)<br>
&gt;&nbsp;&nbsp;&nbsp; * Open up a stream for HW test<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int uvd_v6_0_enc_get_create_msg(struct amdgpu_ring =
*ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp; struct amdgpu_bo *bo,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp; struct amdgpu_ib *ib_msg,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 16;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *f =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr =3D ib_msg-&gt;gpu=
_addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(ring-&gt;adev, ib_size_dw * 4,<br>
&gt; @@ -222,7 +222,6 @@ static int uvd_v6_0_enc_get_create_msg(struct amdg=
pu_ring *ring, uint32_t handle<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D 0x00000018;<br>
&gt; @@ -270,14 +269,14 @@ static int uvd_v6_0_enc_get_create_msg(struct am=
dgpu_ring *ring, uint32_t handle<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int uvd_v6_0_enc_get_destroy_msg(struct amdgpu_ring=
 *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp; uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp; struct amdgpu_bo *bo,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp; struct amdgpu_ib *ib_msg,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 16;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *f =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr =3D ib_msg-&gt;gpu=
_addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(ring-&gt;adev, ib_size_dw * 4,<br>
&gt; @@ -286,7 +285,6 @@ static int uvd_v6_0_enc_get_destroy_msg(struct amd=
gpu_ring *ring,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D 0x00000018;<br>
&gt; @@ -331,21 +329,23 @@ static int uvd_v6_0_enc_get_destroy_msg(struct a=
mdgpu_ring *ring,<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int uvd_v6_0_enc_ring_test_ib(struct amdgpu_ring *r=
ing, long timeout)<br>
&gt;&nbsp;&nbsp; {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_device *adev =3D r=
ing-&gt;adev;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *fence =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
ring-&gt;adev, 128 * 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_VRAM,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &a=
mp;bo, NULL, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(&amp;ib, 0, sizeof(ib));<=
br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, =
128 &lt;&lt; 10,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_P=
OOL_DIRECT,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;ib);<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v6_0_enc_get_create_ms=
g(ring, 1, bo, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v6_0_enc_get_create_ms=
g(ring, 1, &amp;ib, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v6_0_enc_get_destroy_m=
sg(ring, 1, bo, &amp;fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v6_0_enc_get_destroy_m=
sg(ring, 1, &amp;ib, &amp;fence);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; @@ -356,10 +356,8 @@ static int uvd_v6_0_enc_ring_test_ib(struct amdgp=
u_ring *ring, long timeout)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D 0;<br>
&gt;<br>
&gt;&nbsp;&nbsp; error:<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, &amp;ib, fe=
nce);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dma_fence_put(fe=
nce);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unpin(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unref(&amp;bo);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt; diff --git a/drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c b/drivers/gpu/drm/a=
md/amdgpu/uvd_v7_0.c<br>
&gt; index b6e82d75561f..3440ef554f99 100644<br>
&gt; --- a/drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c<br>
&gt; +++ b/drivers/gpu/drm/amd/amdgpu/uvd_v7_0.c<br>
&gt; @@ -213,14 +213,14 @@ static int uvd_v7_0_enc_ring_test_ring(struct am=
dgpu_ring *ring)<br>
&gt;&nbsp;&nbsp;&nbsp; * Open up a stream for HW test<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int uvd_v7_0_enc_get_create_msg(struct amdgpu_ring =
*ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp; struct amdgpu_bo *bo,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp; struct amdgpu_ib *ib_msg,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 16;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *f =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr =3D ib_msg-&gt;gpu=
_addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(ring-&gt;adev, ib_size_dw * 4,<br>
&gt; @@ -229,7 +229,6 @@ static int uvd_v7_0_enc_get_create_msg(struct amdg=
pu_ring *ring, uint32_t handle<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D 0x00000018;<br>
&gt; @@ -276,14 +275,14 @@ static int uvd_v7_0_enc_get_create_msg(struct am=
dgpu_ring *ring, uint32_t handle<br>
&gt;&nbsp;&nbsp;&nbsp; * Close up a stream for HW test or if userspace fail=
ed to do so<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int uvd_v7_0_enc_get_destroy_msg(struct amdgpu_ring=
 *ring, uint32_t handle,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp; struct amdgpu_bo *bo,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp; struct amdgpu_ib *ib_msg,<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence **fence)<br>
&gt;&nbsp;&nbsp; {<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned i=
b_size_dw =3D 16;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_jo=
b *job;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib=
 *ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *f =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr;<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint64_t addr =3D ib_msg-&gt;gpu=
_addr;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int i, r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_job=
_alloc_with_ib(ring-&gt;adev, ib_size_dw * 4,<br>
&gt; @@ -292,7 +291,6 @@ static int uvd_v7_0_enc_get_destroy_msg(struct amd=
gpu_ring *ring, uint32_t handl<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib =3D &amp;job-=
&gt;ibs[0];<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addr =3D amdgpu_bo_gpu_offset(bo=
);<br>
&gt;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;length_dw=
 =3D 0;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ib-&gt;ptr[ib-&g=
t;length_dw++] =3D 0x00000018;<br>
&gt; @@ -337,21 +335,23 @@ static int uvd_v7_0_enc_get_destroy_msg(struct a=
mdgpu_ring *ring, uint32_t handl<br>
&gt;&nbsp;&nbsp;&nbsp; */<br>
&gt;&nbsp;&nbsp; static int uvd_v7_0_enc_ring_test_ib(struct amdgpu_ring *r=
ing, long timeout)<br>
&gt;&nbsp;&nbsp; {<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_device *adev =3D r=
ing-&gt;adev;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct dma_fence=
 *fence =3D NULL;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_bo *bo =3D NULL;<b=
r>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct amdgpu_ib ib;<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_bo_create_reserved(=
ring-&gt;adev, 128 * 1024, PAGE_SIZE,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AM=
DGPU_GEM_DOMAIN_VRAM,<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &a=
mp;bo, NULL, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset(&amp;ib, 0, sizeof(ib));<=
br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D amdgpu_ib_get(adev, NULL, =
128 &lt;&lt; 10,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AMDGPU_IB_P=
OOL_DIRECT,<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;ib);<b=
r>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v7_0_enc_get_create_ms=
g(ring, 1, bo, NULL);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v7_0_enc_get_create_ms=
g(ring, 1, &amp;ib, NULL);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v7_0_enc_get_destroy_m=
sg(ring, 1, bo, &amp;fence);<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D uvd_v7_0_enc_get_destroy_m=
sg(ring, 1, &amp;ib, &amp;fence);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (r)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto error;<br>
&gt;<br>
&gt; @@ -362,10 +362,8 @@ static int uvd_v7_0_enc_ring_test_ib(struct amdgp=
u_ring *ring, long timeout)<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp=
;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; r =3D 0;<br>
&gt;<br>
&gt;&nbsp;&nbsp; error:<br>
&gt; +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_ib_free(adev, &amp;ib, fe=
nce);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dma_fence_put(fe=
nce);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unpin(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unreserve(bo);<br>
&gt; -&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; amdgpu_bo_unref(&amp;bo);<br>
&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return r;<br>
&gt;&nbsp;&nbsp; }<br>
&gt;<br>
&gt; --<br>
&gt; 2.25.1<br>
&gt;<br>
<br>
</div>
</span></font><br>
</div>
</div>
</body>
</html>

--_000_DM4PR12MB5165F781E6DA18852A01640C87D59DM4PR12MB5165namp_--
