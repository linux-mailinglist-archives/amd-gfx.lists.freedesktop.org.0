Return-Path: <amd-gfx-bounces@lists.freedesktop.org>
X-Original-To: lists+amd-gfx@lfdr.de
Delivered-To: lists+amd-gfx@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 1A41F268C2
	for <lists+amd-gfx@lfdr.de>; Wed, 22 May 2019 18:59:30 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 8C5DE89C54;
	Wed, 22 May 2019 16:59:28 +0000 (UTC)
X-Original-To: amd-gfx@lists.freedesktop.org
Delivered-To: amd-gfx@lists.freedesktop.org
Received: from mail-lj1-x242.google.com (mail-lj1-x242.google.com
 [IPv6:2a00:1450:4864:20::242])
 by gabe.freedesktop.org (Postfix) with ESMTPS id B123F89A4F
 for <amd-gfx@lists.freedesktop.org>; Wed, 22 May 2019 15:30:35 +0000 (UTC)
Received: by mail-lj1-x242.google.com with SMTP id z5so2486467lji.10
 for <amd-gfx@lists.freedesktop.org>; Wed, 22 May 2019 08:30:35 -0700 (PDT)
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:mime-version:references:in-reply-to:from:date
 :message-id:subject:to:cc;
 bh=RM2Vs3BpRvxchuOeBY/wop/PzNSZzl64F2EeK+wEZZM=;
 b=mH3LNg1aKR0mKXEeiX1iEoPmLPSy2zAEpoL4KImLp8uflxCce8u5NsNvFIi3zLGrdP
 XfoEgw8M25uC+ufhhAw2lLt1QMgLxsp5FR2n3VgEUsmX7fy8TEWAS1Prl0WTRNVeU59d
 jVI7+UHBjw/laD/51MI1Cz5ORVT0RYGVBtFvP0C3eH94Jjj5bX4n1sjbke88RLNH5A4a
 95zP6VJjiDxeAc1PMo1DzWVMey+KJ28LCtZtJWP6XiJFiNsJRl1IkFB3uoc87E36khcl
 Xu2cCCqcxQrGKKJ65GtagSnbvp/6pbj0SX+GWIi/YApvlvpyr11aBa5nN/HS4gH5mjpI
 gtWQ==
X-Gm-Message-State: APjAAAX/z9sJEYy890mkj16q8k7IN8uW4PpFVV6Pq1mPQ8fp5IYEHLGD
 Zr5wihla56rX20snZKchR2NzFFMTw/gFrdhPv8C87g==
X-Google-Smtp-Source: APXvYqyXSCxhB+3RVGWUi2lXqAnCXVjRJMmGDtSQwaSdaunD3RrP1dCFavWCgkEVu7tMxmxxgJ5X4QeZFUMwuOfrpVg=
X-Received: by 2002:a2e:9601:: with SMTP id v1mr22163816ljh.60.1558539033496; 
 Wed, 22 May 2019 08:30:33 -0700 (PDT)
MIME-Version: 1.0
References: <cover.1557160186.git.andreyknvl@google.com>
 <20190517144931.GA56186@arrakis.emea.arm.com>
 <CAFKCwrj6JEtp4BzhqO178LFJepmepoMx=G+YdC8sqZ3bcBp3EQ@mail.gmail.com>
 <20190521182932.sm4vxweuwo5ermyd@mbp> <201905211633.6C0BF0C2@keescook>
 <20190522101110.m2stmpaj7seezveq@mbp>
In-Reply-To: <20190522101110.m2stmpaj7seezveq@mbp>
From: enh <enh@google.com>
Date: Wed, 22 May 2019 08:30:21 -0700
Message-ID: <CAJgzZoosKBwqXRyA6fb8QQSZXFqfHqe9qO9je5TogHhzuoGXJQ@mail.gmail.com>
Subject: Re: [PATCH v15 00/17] arm64: untag user pointers passed to the kernel
To: Catalin Marinas <catalin.marinas@arm.com>
X-Mailman-Approved-At: Wed, 22 May 2019 16:59:26 +0000
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=google.com; s=20161025;
 h=mime-version:references:in-reply-to:from:date:message-id:subject:to
 :cc;
 bh=RM2Vs3BpRvxchuOeBY/wop/PzNSZzl64F2EeK+wEZZM=;
 b=YY6JA+LoUtjEOO757K58wra7rdXirZ4AlTHpmSQ+decwKFXSNcixrW+Od3xAIfHhzc
 E31pVzZHa1k0N1eBsu/pwx/4gJOY/Z23T1KlGxD+A3kg2G2nUjg2KBJXZgrs4NREuNVs
 TYlUYYtdAekOg5uSt0naDgODEcL0YeodFYzgZ2kMgQbeYv13wJLMpmBWE0SyYa3YKKBJ
 Ky8EOr/z31g0owz/7VlcdxKTQPp3/9K5jFnQ5GWfggZi2OZBL5soMXgy15fr5y5CKPxC
 m0te1S3imaMe8QwTNQlrTPoiVAA5L9886WXf4f0IGaQNg3NN+dFLYS9ofr5e9wU3GA29
 mQlA==
X-BeenThere: amd-gfx@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Discussion list for AMD gfx <amd-gfx.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/amd-gfx>
List-Post: <mailto:amd-gfx@lists.freedesktop.org>
List-Help: <mailto:amd-gfx-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/amd-gfx>,
 <mailto:amd-gfx-request@lists.freedesktop.org?subject=subscribe>
Cc: Mark Rutland <mark.rutland@arm.com>, kvm@vger.kernel.org,
 Szabolcs Nagy <Szabolcs.Nagy@arm.com>, Will Deacon <will.deacon@arm.com>,
 dri-devel@lists.freedesktop.org,
 Linux Memory Management List <linux-mm@kvack.org>,
 Khalid Aziz <khalid.aziz@oracle.com>,
 "open list:KERNEL SELFTEST FRAMEWORK" <linux-kselftest@vger.kernel.org>,
 Vincenzo Frascino <vincenzo.frascino@arm.com>,
 Jacob Bramley <Jacob.Bramley@arm.com>, Leon Romanovsky <leon@kernel.org>,
 linux-rdma@vger.kernel.org, amd-gfx@lists.freedesktop.org,
 Dmitry Vyukov <dvyukov@google.com>, Dave Martin <Dave.Martin@arm.com>,
 Evgenii Stepanov <eugenis@google.com>, linux-media@vger.kernel.org,
 Kevin Brodsky <kevin.brodsky@arm.com>, Kees Cook <keescook@chromium.org>,
 Ruben Ayrapetyan <Ruben.Ayrapetyan@arm.com>,
 Andrey Konovalov <andreyknvl@google.com>,
 Ramana Radhakrishnan <Ramana.Radhakrishnan@arm.com>,
 Alex Williamson <alex.williamson@redhat.com>,
 Yishai Hadas <yishaih@mellanox.com>,
 Mauro Carvalho Chehab <mchehab@kernel.org>,
 Linux ARM <linux-arm-kernel@lists.infradead.org>,
 Kostya Serebryany <kcc@google.com>,
 Greg Kroah-Hartman <gregkh@linuxfoundation.org>,
 Felix Kuehling <Felix.Kuehling@amd.com>, LKML <linux-kernel@vger.kernel.org>,
 Jens Wiklander <jens.wiklander@linaro.org>, Lee Smith <Lee.Smith@arm.com>,
 Alexander Deucher <Alexander.Deucher@amd.com>,
 Andrew Morton <akpm@linux-foundation.org>, Robin Murphy <robin.murphy@arm.com>,
 Christian Koenig <Christian.Koenig@amd.com>,
 Luc Van Oostenryck <luc.vanoostenryck@gmail.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: amd-gfx-bounces@lists.freedesktop.org
Sender: "amd-gfx" <amd-gfx-bounces@lists.freedesktop.org>

T24gV2VkLCBNYXkgMjIsIDIwMTkgYXQgMzoxMSBBTSBDYXRhbGluIE1hcmluYXMgPGNhdGFsaW4u
bWFyaW5hc0Bhcm0uY29tPiB3cm90ZToKPgo+IEhpIEtlZXMsCj4KPiBUaGFua3MgZm9yIGpvaW5p
bmcgdGhlIHRocmVhZCA7KS4KPgo+IE9uIFR1ZSwgTWF5IDIxLCAyMDE5IGF0IDA1OjA0OjM5UE0g
LTA3MDAsIEtlZXMgQ29vayB3cm90ZToKPiA+IE9uIFR1ZSwgTWF5IDIxLCAyMDE5IGF0IDA3OjI5
OjMzUE0gKzAxMDAsIENhdGFsaW4gTWFyaW5hcyB3cm90ZToKPiA+ID4gT24gTW9uLCBNYXkgMjAs
IDIwMTkgYXQgMDQ6NTM6MDdQTSAtMDcwMCwgRXZnZW5paSBTdGVwYW5vdiB3cm90ZToKPiA+ID4g
PiBPbiBGcmksIE1heSAxNywgMjAxOSBhdCA3OjQ5IEFNIENhdGFsaW4gTWFyaW5hcyA8Y2F0YWxp
bi5tYXJpbmFzQGFybS5jb20+IHdyb3RlOgo+ID4gPiA+ID4gSU1PIChSRkMgZm9yIG5vdyksIEkg
c2VlIHR3byB3YXlzIGZvcndhcmQ6Cj4gPiA+ID4gPiBbLi4uXQo+ID4gPiA+ID4gMi4gU2ltaWxh
ciBzaGltIHRvIHRoZSBhYm92ZSBsaWJjIHdyYXBwZXIgYnV0IGluc2lkZSB0aGUga2VybmVsCj4g
PiA+ID4gPiAgICAoYXJjaC9hcm02NCBvbmx5OyBtb3N0IHBvaW50ZXIgYXJndW1lbnRzIGNvdWxk
IGJlIGNvdmVyZWQgd2l0aCBhbgo+ID4gPiA+ID4gICAgX19TQ19DQVNUIHNpbWlsYXIgdG8gdGhl
IHMzOTAgb25lKS4gVGhlcmUgYXJlIHR3byBkaWZmZXJlbmNlcyBmcm9tCj4gPiA+ID4gPiAgICB3
aGF0IHdlJ3ZlIGRpc2N1c3NlZCBpbiB0aGUgcGFzdDoKPiA+ID4gPiA+Cj4gPiA+ID4gPiAgICBh
KSB0aGlzIGlzIGFuIG9wdC1pbiBieSB0aGUgdXNlciB3aGljaCB3b3VsZCBoYXZlIHRvIGV4cGxp
Y2l0bHkgY2FsbAo+ID4gPiA+ID4gICAgICAgcHJjdGwoKS4gSWYgaXQgcmV0dXJucyAtRU5PVFNV
UFAgZXRjLiwgdGhlIHVzZXIgd29uJ3QgYmUgYWxsb3dlZAo+ID4gPiA+ID4gICAgICAgdG8gcGFz
cyB0YWdnZWQgcG9pbnRlcnMgdG8gdGhlIGtlcm5lbC4gVGhpcyB3b3VsZCBwcm9iYWJseSBiZSB0
aGUKPiA+ID4gPiA+ICAgICAgIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBDIGxpYiB0byBtYWtlIHN1
cmUgaXQgZG9lc24ndCB0YWcgaGVhcAo+ID4gPiA+ID4gICAgICAgYWxsb2NhdGlvbnMuIElmIHRo
ZSB1c2VyIGRpZCBub3Qgb3B0LWluLCB0aGUgc3lzY2FsbHMgYXJlIHJvdXRlZAo+ID4gPiA+ID4g
ICAgICAgdGhyb3VnaCB0aGUgbm9ybWFsIHBhdGggKG5vIHVudGFnZ2luZyBhZGRyZXNzIHNoaW0p
Lgo+ID4gPiA+ID4KPiA+ID4gPiA+ICAgIGIpIGlvY3RsKCkgYW5kIG90aGVyIGJsYWNrbGlzdGVk
IHN5c2NhbGxzIChwcmN0bCkgd2lsbCBub3QgYWNjZXB0Cj4gPiA+ID4gPiAgICAgICB0YWdnZWQg
cG9pbnRlcnMgKHRvIGJlIGRvY3VtZW50ZWQgaW4gVmljZW56bydzIEFCSSBwYXRjaGVzKS4KPiA+
ID4gPgo+ID4gPiA+IFRoZSB3YXkgSSBzZWUgaXQsIGEgcGF0Y2ggdGhhdCBicmVha3MgaGFuZGxp
bmcgb2YgdGFnZ2VkIHBvaW50ZXJzIGlzCj4gPiA+ID4gbm90IHRoYXQgZGlmZmVyZW50IGZyb20s
IHNheSwgYSBwYXRjaCB0aGF0IGFkZHMgYSB3aWxkIHBvaW50ZXIKPiA+ID4gPiBkZXJlZmVyZW5j
ZS4gQm90aCBhcmUgYnVnczsgdGhlIGRpZmZlcmVuY2UgaXMgdGhhdCAoYSkgdGhlIGZvcm1lcgo+
ID4gPiA+IGJyZWFrcyBhIHJlbGF0aXZlbHkgdW5jb21tb24gdGFyZ2V0IGFuZCAoYikgaXQncyBh
cmd1YWJseSBhbiBlYXNpZXIKPiA+ID4gPiBtaXN0YWtlIHRvIG1ha2UuIElmIE1URSBhZG9wdGlv
biBnb2VzIHdlbGwsIChhKSB3aWxsIG5vdCBiZSB0aGUgY2FzZQo+ID4gPiA+IGZvciBsb25nLgo+
ID4gPgo+ID4gPiBJdCdzIGFsc28gdGhlIGZhY3Qgc3VjaCBwYXRjaCB3b3VsZCBnbyB1bm5vdGlj
ZWQgZm9yIGEgbG9uZyB0aW1lIHVudGlsCj4gPiA+IHNvbWVvbmUgZXhlcmNpc2VzIHRoYXQgY29k
ZSBwYXRoLiBBbmQgd2hlbiB0aGV5IGRvLCB0aGUgdXNlciB3b3VsZCBiZQo+ID4gPiBwcmV0dHkg
bXVjaCBpbiB0aGUgZGFyayB0cnlpbmcgdG8gZmlndXJlIHdoYXQgd2hhdCB3ZW50IHdyb25nLCB3
aHkgYQo+ID4gPiBTSUdTRUdWIG9yIC1FRkFVTFQgaGFwcGVuZWQuIFdoYXQncyB3b3JzZSwgd2Ug
Y2FuJ3QgZXZlbiBzYXkgd2UgZml4ZWQKPiA+ID4gYWxsIHRoZSBwbGFjZXMgd2hlcmUgaXQgbWF0
dGVycyBpbiB0aGUgY3VycmVudCBrZXJuZWwgY29kZWJhc2UgKGlnbm9yaW5nCj4gPiA+IGZ1dHVy
ZSBwYXRjaGVzKS4KPiA+Cj4gPiBTbywgbG9va2luZyBmb3J3YXJkIGEgYml0LCB0aGlzIGlzbid0
IGdvaW5nIHRvIGJlIGFuIEFSTS1zcGVjaWZpYyBpc3N1ZQo+ID4gZm9yIGxvbmcuCj4KPiBJIGRv
IGhvcGUgc28uCj4KPiA+IEluIGZhY3QsIEkgdGhpbmsgd2Ugc2hvdWxkbid0IGhhdmUgYXJtLXNw
ZWNpZmljIHN5c2NhbGwgd3JhcHBlcnMKPiA+IGluIHRoaXMgc2VyaWVzOiBJIHRoaW5rIHVudGFn
Z2VkX2FkZHIoKSBzaG91bGQgbGlrZWx5IGJlIGFkZGVkIGF0IHRoZQo+ID4gdG9wLWxldmVsIGFu
ZCBoYXZlIGl0IGJlIGEgbm8tb3AgZm9yIG90aGVyIGFyY2hpdGVjdHVyZXMuCj4KPiBUaGF0J3Mg
d2hhdCB0aGUgY3VycmVudCBwYXRjaHNldCBkb2VzLCBzbyB3ZSBoYXZlIHRoaXMgYXMgYSBzdGFy
dGluZwo+IHBvaW50LiBLb3N0eWEgcmFpc2VkIGFub3RoZXIgcG90ZW50aWFsIGlzc3VlIHdpdGgg
dGhlIHN5c2NhbGwgd3JhcHBlcnM6Cj4gd2l0aCBNVEUgdGhlIGtlcm5lbCB3aWxsIGJlIGZvcmNl
ZCB0byBlbmFibGUgdGhlIG1hdGNoLWFsbCAod2lsZGNhcmQpCj4gcG9pbnRlcnMgZm9yIHVzZXIg
c3BhY2UgYWNjZXNzZXMgc2luY2UgY29weV9mcm9tX3VzZXIoKSB3b3VsZCBvbmx5IGdldCBhCj4g
MCB0YWcuIFNvIGl0IGhhcyB3aWRlciBpbXBsaWNhdGlvbnMgdGhhbiBqdXN0IHVhY2Nlc3Mgcm91
dGluZXMgbm90Cj4gY2hlY2tpbmcgdGhlIGNvbG91ci4KPgo+ID4gU28gZ2l2ZW4gdGhpcyBiZWNv
bWluZyBhIGtlcm5lbC13aWRlIG11bHRpLWFyY2hpdGVjdHVyZSBpc3N1ZSAodW5kZXIKPiA+IHRo
ZSBhc3N1bXB0aW9uIHRoYXQgeDg2LCBSSVNDLVYsIGFuZCBvdGhlcnMgd2lsbCBnYWluIHNpbWls
YXIgVEJJIG9yCj4gPiBNVEUgdGhpbmdzKSwgd2Ugc2hvdWxkIHNvbHZlIGl0IGluIGEgd2F5IHRo
YXQgd2UgY2FuIHJlLXVzZS4KPgo+IENhbiB3ZSBkbyBhbnkgYmV0dGVyIHRvIGFpZCB0aGUgdW50
YWdnZWRfYWRkcigpIHBsYWNlbWVudCAoZS5nLiBiZXR0ZXIKPiB0eXBlIGFubm90YXRpb25zLCBi
ZXR0ZXIgc3RhdGljIGFuYWx5c2lzKT8gV2UgaGF2ZSB0byBkaXN0aW5ndWlzaAo+IGJldHdlZW4g
dXNlciBwb2ludGVycyB0aGF0IG1heSBiZSBkZXJlZmVyZW5jZWQgYnkgdGhlIGtlcm5lbCAoSSB0
aGluawo+IGFsbW9zdCBmdWxseSBjb3ZlcmVkIHdpdGggdGhpcyBwYXRjaHNldCkgYW5kIHVzZXIg
YWRkcmVzc2VzIHJlcHJlc2VudGVkCj4gYXMgdWxvbmcgdGhhdCBtYXk6Cj4KPiBhKSBiZSBjb252
ZXJ0ZWQgdG8gYSB1c2VyIHBvaW50ZXIgYW5kIGRlcmVmZXJlbmNlZDsgSSB0aGluayB0aGF0J3Mg
dGhlCj4gICAgY2FzZSBmb3IgbWFueSBvdmVybG9hZGVkIHVsb25nL3U2NCBhcmd1bWVudHMKPgo+
IGIpIHVzZWQgZm9yIGFkZHJlc3Mgc3BhY2UgbWFuYWdlbWVudCwgcmJ0cmVlIGxvb2stdXBzIGV0
Yy4gd2hlcmUgdGhlIHRhZwo+ICAgIGlzIG5vIGxvbmdlciByZWxldmFudCBhbmQgaXQgZXZlbiBn
ZXRzIGluIHRoZSB3YXkKPgo+IFdlIHRyaWVkIGxhc3QgeWVhciB0byBpZGVudGlmeSB2b2lkIF9f
dXNlciAqIGNhc3RzIHRvIHVuc2lnbmVkIGxvbmcKPiB1c2luZyBzcGFyc2Ugb24gdGhlIGFzc3Vt
cHRpb24gdGhhdCBwb2ludGVycyBjYW4gYmUgdGFnZ2VkIHdoaWxlIHVsb25nCj4gaXMgYWJvdXQg
YWRkcmVzcyBzcGFjZSBtYW5hZ2VtZW50IGFuZCBuZWVkcyB0byBsb3NlIHN1Y2ggdGFnLiBJIHRo
aW5rIHdlCj4gY291bGQgaGF2ZSBwdXNoZWQgdGhpcyBmdXJ0aGVyLiBGb3IgZXhhbXBsZSwgZ2V0
X3VzZXJfcGFnZXMoKSB0YWtlcyBhbgo+IHVuc2lnbmVkIGxvbmcgYnV0IGl0IGlzIHBlcmZlY3Rs
eSBjYXBhYmxlIG9mIHVudGFnZ2luZyB0aGUgYWRkcmVzcwo+IGl0c2VsZi4gU2hhbGwgd2UgY2hh
bmdlIGl0cyBmaXJzdCBhcmd1bWVudCB0byB2b2lkIF9fdXNlciAqICh0b2dldGhlcgo+IHdpdGgg
YWxsIGl0cyBjYWxsZXJzKT8KPgo+IGZpbmRfdm1hKCksIE9UT0gsIGNvdWxkIHVudGFnIHRoZSBh
ZGRyZXNzIGJ1dCBpdCBkb2Vzbid0IGhlbHAgc2luY2UKPiB2bV9zdGFydC9lbmQgZG9uJ3QgaGF2
ZSBzdWNoIGluZm9ybWF0aW9uICh0aGF0J3MgbW9yZSBhYm91dCB0aGUgY29udGVudAo+IG9yIHR5
cGUgdGhhdCB0aGUgdXNlciBkZWNpZGVkKSBhbmQgdGhlIGNhbGxlcnMgY2hlY2sgYWdhaW5zdCBp
dC4KPgo+IEFyZSB0aGVyZSBhbnkgb3RoZXIgcGxhY2VzIHdoZXJlIHRoaXMgbWF0dGVycz8gVGhl
c2UgcGF0Y2hlcyB0cmFja2VkCj4gZG93biBmaW5kX3ZtYSgpIGFzIHNvbWUgaGV1cmlzdGljcyBi
dXQgd2UgbWF5IG5lZWQgYmV0dGVyIHN0YXRpYwo+IGFuYWx5c2lzIHRvIGlkZW50aWZ5IG90aGVy
IGNhc2VzLgo+Cj4gPiBXZSBuZWVkIHNvbWV0aGluZyB0aGF0IGlzIGdvaW5nIHRvIHdvcmsgZXZl
cnl3aGVyZS4gQW5kIGl0IG5lZWRzIHRvIGJlCj4gPiBzdXBwb3J0ZWQgYnkgdGhlIGtlcm5lbCBm
b3IgdGhlIHNpbXBsZSByZWFzb24gdGhhdCB0aGUga2VybmVsIG5lZWRzIHRvCj4gPiBkbyBNVEUg
Y2hlY2tzIGR1cmluZyBjb3B5X2Zyb21fdXNlcigpOiBoYXZpbmcgdGhhdCBpbmZvcm1hdGlvbiBz
dHJpcHBlZAo+ID4gbWVhbnMgd2UgbG9zZSBhbnkgdXNlcnNwYWNlLWFzc2lnbmVkIE1URSBwcm90
ZWN0aW9ucyBpZiB0aGV5IGdldCBoYW5kbGVkCj4gPiBieSB0aGUga2VybmVsLCB3aGljaCBpcyBh
IHRvdGFsIG5vbi1zdGFydGVyLCBJTU8uCj4KPiBTdWNoIGZlZWRiYWNrIGlzIHdlbGNvbWVkIDsp
Lgo+Cj4gPiBBcyBhbiBhc2lkZTogSSB0aGluayBTcGFyYyBBREkgc3VwcG9ydCBpbiBMaW51eCBh
Y3R1YWxseSBzaWRlLXN0ZXBwZWQKPiA+IHRoaXNbMV0gKGkuZS4gY2hvc2UgInNvbHV0aW9uIDEi
KTogIkFsbCBhZGRyZXNzZXMgcGFzc2VkIHRvIGtlcm5lbCBtdXN0Cj4gPiBiZSBub24tQURJIHRh
Z2dlZCBhZGRyZXNzZXMuIiAoQW5kIHNhZGx5LCAiS2VybmVsIGRvZXMgbm90IGVuYWJsZSBBREkK
PiA+IGZvciBrZXJuZWwgY29kZS4iKSBJIHRoaW5rIHRoaXMgd2FzIGEgbWlzdGFrZSB3ZSBzaG91
bGQgbm90IHJlcGVhdCBmb3IKPiA+IGFybTY0ICh3ZSBkbyBzZWVtIHRvIGJlIGF0IGxlYXN0IGlu
IGFncmVlbWVudCBhYm91dCB0aGlzLCBJIHRoaW5rKS4KPiA+Cj4gPiBbMV0gaHR0cHM6Ly9sb3Jl
Lmtlcm5lbC5vcmcvcGF0Y2h3b3JrL3BhdGNoLzY1NDQ4MS8KPgo+IEkgdHJpZWQgdG8gZHJhZyB0
aGUgU1BBUkMgZ3V5cyBpbnRvIHRoaXMgZGlzY3Vzc2lvbiBidXQgd2l0aG91dCBtdWNoCj4gc3Vj
Y2Vzcy4KPgo+ID4gPiA+IFRoaXMgaXMgYSBiaXQgb2YgYSBjaGlja2VuLWFuZC1lZ2cgcHJvYmxl
bS4gSW4gYSB3b3JsZCB3aGVyZSBtZW1vcnkKPiA+ID4gPiBhbGxvY2F0b3JzIG9uIG9uZSBvciBz
ZXZlcmFsIHBvcHVsYXIgcGxhdGZvcm1zIGdlbmVyYXRlIHBvaW50ZXJzIHdpdGgKPiA+ID4gPiBu
b24temVybyB0YWdzLCBhbnkgc3VjaCBicmVha2FnZSB3aWxsIGJlIGNhdWdodCBpbiB0ZXN0aW5n
Lgo+ID4gPiA+IFVuZm9ydHVuYXRlbHkgdG8gcmVhY2ggdGhhdCBzdGF0ZSB3ZSBuZWVkIHRoZSBr
ZXJuZWwgdG8gc3RhcnQKPiA+ID4gPiBhY2NlcHRpbmcgdGFnZ2VkIHBvaW50ZXJzIGZpcnN0LCBh
bmQgdGhlbiBob2xkIG9uIGZvciBhIGNvdXBsZSBvZgo+ID4gPiA+IHllYXJzIHVudGlsIHVzZXJz
cGFjZSBjYXRjaGVzIHVwLgo+ID4gPgo+ID4gPiBXb3VsZCB0aGUga2VybmVsIGFsc28gY2F0Y2gg
dXAgd2l0aCBwcm92aWRpbmcgYSBzdGFibGUgQUJJPyBCZWNhdXNlIHdlCj4gPiA+IGhhdmUgdHdv
IG1vdmluZyB0YXJnZXRzLgo+ID4gPgo+ID4gPiBPbiBvbmUgaGFuZCwgeW91IGhhdmUgQW5kcm9p
ZCBvciBzb21lIExpbnV4IGRpc3RybyB0aGF0IHN0aWNrIHRvIGEKPiA+ID4gc3RhYmxlIGtlcm5l
bCB2ZXJzaW9uIGZvciBzb21lIHRpbWUsIHNvIHRoZXkgaGF2ZSBiZXR0ZXIgY2hhbmNlIG9mCj4g
PiA+IGNsZWFyaW5nIG1vc3Qgb2YgdGhlIHByb2JsZW1zLiBPbiB0aGUgb3RoZXIgaGFuZCwgd2Ug
aGF2ZSBtYWlubGluZQo+ID4gPiBrZXJuZWwgdGhhdCBnZXRzIG92ZXIgNTAwSyBsaW5lcyBldmVy
eSByZWxlYXNlLiBBcyBtYWludGFpbmVyLCBJIGNhbid0Cj4gPiA+IHJlbHkgb24gbXkgdGVzdGlu
ZyBhbG9uZSBhcyB0aGlzIGlzIG9uIGEgbGltaXRlZCBudW1iZXIgb2YgcGxhdGZvcm1zLiBTbwo+
ID4gPiBteSBjb25jZXJuIGlzIHRoYXQgZXZlcnkga2VybmVsIHJlbGVhc2UgaGFzIGEgc2lnbmlm
aWNhbnQgY2hhbmNlIG9mCj4gPiA+IGJyZWFraW5nIHRoZSBBQkksIHVubGVzcyB3ZSBoYXZlIGEg
YmV0dGVyIHdheSBvZiBpZGVudGlmeWluZyBwb3RlbnRpYWwKPiA+ID4gaXNzdWVzLgo+ID4KPiA+
IEkganVzdCB3YW50IHRvIG1ha2Ugc3VyZSBJIGZ1bGx5IHVuZGVyc3RhbmQgeW91ciBjb25jZXJu
IGFib3V0IHRoaXMKPiA+IGJlaW5nIGFuIEFCSSBicmVhaywgYW5kIEkgd29yayBiZXN0IHdpdGgg
ZXhhbXBsZXMuIFRoZSBjbG9zZXN0IHNpdHVhdGlvbgo+ID4gSSBjYW4gc2VlIHdvdWxkIGJlOgo+
ID4KPiA+IC0gc29tZSBwcm9ncmFtIGhhcyBubyBpZGVhIGFib3V0IE1URQo+Cj4gQXBhcnQgZnJv
bSBzb21lIGxpYnJhcmllcyBsaWtlIGxpYmMgKGFuZCBtYXliZSB0aG9zZSB0aGF0IGhhbmRsZQo+
IHNwZWNpZmljIGRldmljZSBpb2N0bHMpLCBJIHRoaW5rIG1vc3QgcHJvZ3JhbXMgc2hvdWxkIGhh
dmUgbm8gaWRlYSBhYm91dAo+IE1URS4gSSB3b3VsZG4ndCBleHBlY3QgcHJvZ3JhbW1lcnMgdG8g
aGF2ZSB0byBjaGFuZ2UgdGhlaXIgYXBwIGp1c3QKPiBiZWNhdXNlIHdlIGhhdmUgYSBuZXcgZmVh
dHVyZSB0aGF0IGNvbG91cnMgaGVhcCBhbGxvY2F0aW9ucy4KCm9idmlvdXNseSBpJ20gYmlhc2Vk
IGFzIGEgbGliYyBtYWludGFpbmVyLCBidXQuLi4KCmkgZG9uJ3QgdGhpbmsgaXQgaGVscHMgdG8g
bW92ZSB0aGlzIHRvIGxpYmMgLS0tIG5vdyB5b3UganVzdCBoYXZlIGFuCmV4dHJhIGRlcGVuZGVu
Y3kgd2hlcmUgdG8gaGF2ZSBhIGd1YXJhbnRlZWQgd29ya2luZyBzeXN0ZW0geW91IG5lZWQgdG8K
dXBkYXRlIHlvdXIga2VybmVsIGFuZCBsaWJjIHRvZ2V0aGVyLiAob3IgYXQgbGVhc3QgdXBkYXRl
IHlvdXIgbGliYyB0bwp1bmRlcnN0YW5kIG5ldyBpb2N0bHMgZXRjIF9iZWZvcmVfIHlvdSBjYW4g
dXBkYXRlIHlvdXIga2VybmVsLikKCj4gPiAtIG1hbGxvYygpIHN0YXJ0cyByZXR1cm5pbmcgTVRF
LXRhZ2dlZCBhZGRyZXNzZXMKPiA+IC0gcHJvZ3JhbSBkb2Vzbid0IGJyZWFrIGZyb20gdGhhdCBj
aGFuZ2UKPiA+IC0gcHJvZ3JhbSB1c2VzIHNvbWUgc3lzY2FsbCB0aGF0IGlzIG1pc3NpbmcgdW50
YWdnZWRfYWRkcigpIGFuZCBmYWlscwo+ID4gLSBrZXJuZWwgaGFzIG5vdyBicm9rZW4gdXNlcnNw
YWNlIHRoYXQgdXNlZCB0byB3b3JrCj4KPiBUaGF0J3Mgb25lIGFzcGVjdCB0aG91Z2ggcHJvYmFi
bHkgbW9yZSBvZiBhIGNhc2Ugb2YgcGx1Z2dpbmcgaW4gYSBuZXcKPiBkZXZpY2UgKGdyYXBoaWNz
IGNhcmQsIG5ldHdvcmsgZXRjLikgYW5kIHRoZSBpb2N0bCB0byB0aGUgbmV3IGRldmljZQo+IGRv
ZXNuJ3Qgd29yay4KPgo+IFRoZSBvdGhlciBpcyB0aGF0LCBhc3N1bWluZyB3ZSByZWFjaCBhIHBv
aW50IHdoZXJlIHRoZSBrZXJuZWwgZW50aXJlbHkKPiBzdXBwb3J0cyB0aGlzIHJlbGF4ZWQgQUJJ
LCBjYW4gd2UgZ3VhcmFudGVlIHRoYXQgaXQgd29uJ3QgYnJlYWsgaW4gdGhlCj4gZnV0dXJlLiBM
ZXQncyBzYXkgc29tZSBzdWJzZXF1ZW50IGtlcm5lbCBjaGFuZ2UgKHNvbWUgcmVmYWN0b3Jpbmcp
Cj4gbWlzc2VzIG91dCBhbiB1bnRhZ2dlZF9hZGRyKCkuIFRoaXMgcmVuZGVycyBhIHByZXZpb3Vz
bHkgVEJJL01URS1jYXBhYmxlCj4gc3lzY2FsbCB1bnVzYWJsZS4gQ2FuIHdlIHJlbHkgb25seSBv
biB0ZXN0aW5nPwo+Cj4gPiBUaGUgdHJvdWJsZSBJIHNlZSB3aXRoIHRoaXMgaXMgdGhhdCBpdCBp
cyBsYXJnZWx5IHRoZW9yZXRpY2FsIGFuZAo+ID4gcmVxdWlyZXMgcGFydCBvZiB1c2Vyc3BhY2Ug
dG8gY29sbHVkZSB0byBzdGFydCB1c2luZyBhIG5ldyBDUFUgZmVhdHVyZQo+ID4gdGhhdCB0aWNr
bGVzIGEgYnVnIGluIHRoZSBrZXJuZWwuIEFzIEkgdW5kZXJzdGFuZCB0aGUgZ29sZGVuIHJ1bGUs
Cj4gPiB0aGlzIGlzIGEgYnVnIGluIHRoZSBrZXJuZWwgKGEgbWlzc2VkIGlvY3RsKCkgb3Igc3Vj
aCkgdG8gYmUgZml4ZWQsCj4gPiBub3QgYSBnbG9iYWwgYnJlYWtpbmcgb2Ygc29tZSB1c2Vyc3Bh
Y2UgYmVoYXZpb3IuCj4KPiBZZXMsIHdlIHNob3VsZCBmb2xsb3cgdGhlIHJ1bGUgdGhhdCBpdCdz
IGEga2VybmVsIGJ1ZyBidXQgaXQgZG9lc24ndAo+IGhlbHAgdGhlIHVzZXIgdGhhdCBhIG5ld2x5
IGluc3RhbGxlZCBrZXJuZWwgY2F1c2VzIHVzZXIgc3BhY2UgdG8gbm8KPiBsb25nZXIgcmVhY2gg
YSBwcm9tcHQuIEhlbmNlIHRoZSBwcm9wb3NhbCBvZiBhbiBvcHQtaW4gdmlhIHBlcnNvbmFsaXR5
Cj4gKGZvciBNVEUgd2Ugd291bGQgbmVlZCBhbiBleHBsaWNpdCBvcHQtaW4gYnkgdGhlIHVzZXIg
YW55d2F5IHNpbmNlIHRoZQo+IHRvcCBieXRlIGlzIG5vIGxvbmdlciBpZ25vcmVkIGJ1dCBjaGVj
a2VkIGFnYWluc3QgdGhlIGFsbG9jYXRpb24gdGFnKS4KCmJ1dCByZWFsaXN0aWNhbGx5IHdvdWxk
IHRoaXMgYWN0dWFsbHkgZ2V0IHVzZWQgaW4gdGhpcyB3YXk/IG9yIHdvdWxkCmFueSBnaXZlbiBz
eXN0ZW0gZWl0aGVyIGJlIE1URSBvciBub24tTVRFLiBpbiB3aGljaCBjYXNlIGEga2VybmVsCmNv
bmZpZ3VyYXRpb24gb3B0aW9uIHdvdWxkIHNlZW0gdG8gbWFrZSBtb3JlIHNlbnNlLiAoYmVjYXVz
ZSBlaXRoZXIKd2F5LCB0aGUgaHlwb3RoZXRpY2FsIHVzZXIgYmFzaWNhbGx5IG5lZWRzIHRvIHJl
Y29tcGlsZSB0aGUga2VybmVsIHRvCmdldCBiYWNrIG9uIHRoZWlyIGZlZXQuIG9yIGFsbCBvZiB1
c2Vyc3BhY2UuKQoKaSdtIG5vdCBzdXJlIGkgc2VlIHRoaXMgbmV3IHdheSBmb3IgYSBrZXJuZWwg
dXBkYXRlIHRvIGJyZWFrIG15IHN5c3RlbQphbmQgbmVlZCB0byBiZSBmaXhlZCBmb3J3YXJkL3Jv
bGxlZCBiYWNrIGFzIGFueSBkaWZmZXJlbnQgZnJvbSBhbnkgb2YKdGhlIGV4aXN0aW5nIHdheXMg
aW4gd2hpY2ggdGhpcyBjYW4gaGFwcGVuIDotKSBhcyBhbiBlbmQtdXNlciBpIGhhdmUKdG8gcmVs
eSBvbiB3aG9ldmVyJ3Mgc2VuZGluZyBtZSBzb2Z0d2FyZSB1cGRhdGVzIHRvIHRlc3QgYWRlcXVh
dGVseQplbm91Z2ggdGhhdCB0aGV5IGZpbmQgdGhlIHByb2JsZW1zLiBhcyBhbiBlbmQgdXNlciwg
dGhlcmUgaXNuJ3QgYW55CmRpZmZlcmVuY2UgYmV0d2VlbiAibXkgcGhvbmUgcmVib290ZWQgd2hl
biBpIHRyaWVkIHRvIHRha2UgYSBwaG90bwpiZWNhdXNlIG9mIGEga2VybmVsL2RyaXZlciBsZWFr
Iiwgc2F5LCBhbmQgIm15IHBob25lIHJlYm9vdGVkIHdoZW4gaQp0cmllZCB0byB0YWtlIGEgcGhv
dG8gYmVjYXVzZSBvZiBtaXNzaW5nIHVudGFnZ2luZyBvZiBhIHBvaW50ZXIgcGFzc2VkCnZpYSBp
b2N0bCIuCgppIHN1c3BlY3QgeW91IGFuZCBpIGhhdmUgdmVyeSBkaWZmZXJlbnQgcGVvcGxlIGlu
IG1pbmQgd2hlbiB3ZSBzYXkgInVzZXIiIDotKQoKPiA+IEkgZmVlbCBsaWtlIEknbSBtaXNzaW5n
IHNvbWV0aGluZyBhYm91dCB0aGlzIGJlaW5nIHNlZW4gYXMgYW4gQUJJCj4gPiBicmVhay4gVGhl
IGtlcm5lbCBhbHJlYWR5IGZhaWxzIG9uIHVzZXJzcGFjZSBhZGRyZXNzZXMgdGhhdCBoYXZlIGhp
Z2gKPiA+IGJpdHMgc2V0IC0tIGFyZSB0aGVyZSB0aGluZ3MgdGhhdCBfZGVwZW5kXyBvbiB0aGlz
IGZhaWx1cmUgdG8gb3BlcmF0ZT8KPgo+IEl0J3MgYWJvdXQgcHJvdmlkaW5nIGEgcmVsYXhlZCBB
Qkkgd2hpY2ggYWxsb3dzIG5vbi16ZXJvIHRvcCBieXRlIGFuZAo+IGJyZWFraW5nIGl0IGxhdGVy
IGluYWR2ZXJ0ZW50bHkgd2l0aG91dCBoYXZpbmcgc29tZXRoaW5nIGJldHRlciBpbiBwbGFjZQo+
IHRvIGFuYWx5c2UgdGhlIGtlcm5lbCBjaGFuZ2VzLgo+Cj4gVGhhbmtzLgo+Cj4gLS0KPiBDYXRh
bGluCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCmFtZC1n
ZnggbWFpbGluZyBsaXN0CmFtZC1nZnhAbGlzdHMuZnJlZWRlc2t0b3Aub3JnCmh0dHBzOi8vbGlz
dHMuZnJlZWRlc2t0b3Aub3JnL21haWxtYW4vbGlzdGluZm8vYW1kLWdmeA==
